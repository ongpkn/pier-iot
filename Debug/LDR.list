
LDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a250  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800a3f0  0800a3f0  0001a3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a954  0800a954  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a954  0800a954  0001a954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a95c  0800a95c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a95c  0800a95c  0001a95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a960  0800a960  0001a960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001f0  0800ab54  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  0800ab54  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f79  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025db  00000000  00000000  00033199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  00035778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00036900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193d3  00000000  00000000  00037990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bc5  00000000  00000000  00050d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e0ac  00000000  00000000  00065928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001039d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa4  00000000  00000000  00103a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3d8 	.word	0x0800a3d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800a3d8 	.word	0x0800a3d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001012:	4a38      	ldr	r2, [pc, #224]	; (80010f4 <HD44780_Init+0xec>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001018:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <HD44780_Init+0xf0>)
 800101a:	2208      	movs	r2, #8
 800101c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <HD44780_Init+0xf4>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HD44780_Init+0xec>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d907      	bls.n	800103c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800102c:	4b33      	ldr	r3, [pc, #204]	; (80010fc <HD44780_Init+0xf4>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <HD44780_Init+0xf4>)
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e006      	b.n	800104a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <HD44780_Init+0xf4>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <HD44780_Init+0xf4>)
 8001048:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800104a:	f000 f985 	bl	8001358 <DelayInit>
  HAL_Delay(50);
 800104e:	2032      	movs	r0, #50	; 0x32
 8001050:	f001 f92e 	bl	80022b0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HD44780_Init+0xf0>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f943 	bl	80012e4 <ExpanderWrite>
  HAL_Delay(1000);
 800105e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001062:	f001 f925 	bl	80022b0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001066:	2030      	movs	r0, #48	; 0x30
 8001068:	f000 f92b 	bl	80012c2 <Write4Bits>
  DelayUS(4500);
 800106c:	f241 1094 	movw	r0, #4500	; 0x1194
 8001070:	f000 f99c 	bl	80013ac <DelayUS>

  Write4Bits(0x03 << 4);
 8001074:	2030      	movs	r0, #48	; 0x30
 8001076:	f000 f924 	bl	80012c2 <Write4Bits>
  DelayUS(4500);
 800107a:	f241 1094 	movw	r0, #4500	; 0x1194
 800107e:	f000 f995 	bl	80013ac <DelayUS>

  Write4Bits(0x03 << 4);
 8001082:	2030      	movs	r0, #48	; 0x30
 8001084:	f000 f91d 	bl	80012c2 <Write4Bits>
  DelayUS(4500);
 8001088:	f241 1094 	movw	r0, #4500	; 0x1194
 800108c:	f000 f98e 	bl	80013ac <DelayUS>

  Write4Bits(0x02 << 4);
 8001090:	2020      	movs	r0, #32
 8001092:	f000 f916 	bl	80012c2 <Write4Bits>
  DelayUS(100);
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f000 f988 	bl	80013ac <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HD44780_Init+0xf4>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	f043 0320 	orr.w	r3, r3, #32
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f8ce 	bl	8001248 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HD44780_Init+0xf8>)
 80010ae:	2204      	movs	r2, #4
 80010b0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80010b2:	f000 f875 	bl	80011a0 <HD44780_Display>
  HD44780_Clear();
 80010b6:	f000 f82b 	bl	8001110 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HD44780_Init+0xfc>)
 80010bc:	2202      	movs	r2, #2
 80010be:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HD44780_Init+0xfc>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f8bc 	bl	8001248 <SendCommand>
  DelayUS(4500);
 80010d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80010d4:	f000 f96a 	bl	80013ac <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80010d8:	490b      	ldr	r1, [pc, #44]	; (8001108 <HD44780_Init+0x100>)
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f876 	bl	80011cc <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80010e0:	490a      	ldr	r1, [pc, #40]	; (800110c <HD44780_Init+0x104>)
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 f872 	bl	80011cc <HD44780_CreateSpecialChar>

  HD44780_Home();
 80010e8:	f000 f81d 	bl	8001126 <HD44780_Home>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000020f 	.word	0x2000020f
 80010f8:	20000210 	.word	0x20000210
 80010fc:	2000020c 	.word	0x2000020c
 8001100:	2000020d 	.word	0x2000020d
 8001104:	2000020e 	.word	0x2000020e
 8001108:	20000000 	.word	0x20000000
 800110c:	20000008 	.word	0x20000008

08001110 <HD44780_Clear>:

void HD44780_Clear()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001114:	2001      	movs	r0, #1
 8001116:	f000 f897 	bl	8001248 <SendCommand>
  DelayUS(2000);
 800111a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800111e:	f000 f945 	bl	80013ac <DelayUS>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}

08001126 <HD44780_Home>:

void HD44780_Home()
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800112a:	2002      	movs	r0, #2
 800112c:	f000 f88c 	bl	8001248 <SendCommand>
  DelayUS(2000);
 8001130:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001134:	f000 f93a 	bl	80013ac <DelayUS>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	460a      	mov	r2, r1
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	4613      	mov	r3, r2
 800114a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HD44780_SetCursor+0x5c>)
 800114e:	f107 0408 	add.w	r4, r7, #8
 8001152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <HD44780_SetCursor+0x60>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	79ba      	ldrb	r2, [r7, #6]
 800115e:	429a      	cmp	r2, r3
 8001160:	d303      	bcc.n	800116a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HD44780_SetCursor+0x60>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3b01      	subs	r3, #1
 8001168:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	3318      	adds	r3, #24
 8001170:	443b      	add	r3, r7
 8001172:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4413      	add	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	b25b      	sxtb	r3, r3
 8001180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001184:	b25b      	sxtb	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f85d 	bl	8001248 <SendCommand>
}
 800118e:	bf00      	nop
 8001190:	371c      	adds	r7, #28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	bf00      	nop
 8001198:	0800a3f0 	.word	0x0800a3f0
 800119c:	2000020f 	.word	0x2000020f

080011a0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HD44780_Display+0x28>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HD44780_Display+0x28>)
 80011b0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HD44780_Display+0x28>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f843 	bl	8001248 <SendCommand>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000020d 	.word	0x2000020d

080011cc <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f82a 	bl	8001248 <SendCommand>
  for (int i=0; i<8; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	e009      	b.n	800120e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f82e 	bl	8001264 <SendChar>
  for (int i=0; i<8; i++)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2b07      	cmp	r3, #7
 8001212:	ddf2      	ble.n	80011fa <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001226:	e006      	b.n	8001236 <HD44780_PrintStr+0x18>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f817 	bl	8001264 <SendChar>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f4      	bne.n	8001228 <HD44780_PrintStr+0xa>
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f812 	bl	8001280 <Send>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2101      	movs	r1, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f804 	bl	8001280 <Send>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	460a      	mov	r2, r1
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f023 030f 	bic.w	r3, r3, #15
 8001296:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f80b 	bl	80012c2 <Write4Bits>
  Write4Bits((lownib)|mode);
 80012ac:	7bba      	ldrb	r2, [r7, #14]
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f804 	bl	80012c2 <Write4Bits>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f808 	bl	80012e4 <ExpanderWrite>
  PulseEnable(value);
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f820 	bl	800131c <PulseEnable>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <ExpanderWrite+0x30>)
 80012f0:	781a      	ldrb	r2, [r3, #0]
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80012fa:	f107 020f 	add.w	r2, r7, #15
 80012fe:	230a      	movs	r3, #10
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	214e      	movs	r1, #78	; 0x4e
 8001306:	4804      	ldr	r0, [pc, #16]	; (8001318 <ExpanderWrite+0x34>)
 8001308:	f001 ff94 	bl	8003234 <HAL_I2C_Master_Transmit>
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000210 	.word	0x20000210
 8001318:	2000025c 	.word	0x2000025c

0800131c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ffd8 	bl	80012e4 <ExpanderWrite>
  DelayUS(20);
 8001334:	2014      	movs	r0, #20
 8001336:	f000 f839 	bl	80013ac <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ffce 	bl	80012e4 <ExpanderWrite>
  DelayUS(20);
 8001348:	2014      	movs	r0, #20
 800134a:	f000 f82f 	bl	80013ac <DelayUS>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <DelayInit>:

static void DelayInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <DelayInit+0x4c>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <DelayInit+0x4c>)
 8001362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001366:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <DelayInit+0x4c>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <DelayInit+0x4c>)
 800136e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001372:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <DelayInit+0x50>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <DelayInit+0x50>)
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <DelayInit+0x50>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <DelayInit+0x50>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <DelayInit+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001392:	bf00      	nop
  __ASM volatile ("NOP");
 8001394:	bf00      	nop
  __ASM volatile ("NOP");
 8001396:	bf00      	nop
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000edf0 	.word	0xe000edf0
 80013a8:	e0001000 	.word	0xe0001000

080013ac <DelayUS>:

static void DelayUS(uint32_t us) {
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <DelayUS+0x44>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <DelayUS+0x48>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	0c9a      	lsrs	r2, r3, #18
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <DelayUS+0x4c>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <DelayUS+0x4c>)
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d8f6      	bhi.n	80013ce <DelayUS+0x22>
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000010 	.word	0x20000010
 80013f4:	431bde83 	.word	0x431bde83
 80013f8:	e0001000 	.word	0xe0001000
 80013fc:	00000000 	.word	0x00000000

08001400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b0c6      	sub	sp, #280	; 0x118
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t numTicks = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	SERVO_Init(SERVO_Motor1);
 800140c:	2000      	movs	r0, #0
 800140e:	f004 f88f 	bl	8005530 <SERVO_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001412:	f000 fedb 	bl	80021cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001416:	f000 f963 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141a:	f000 fb41 	bl	8001aa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800141e:	f000 fb15 	bl	8001a4c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001422:	f000 f9c7 	bl	80017b4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001426:	f000 fac5 	bl	80019b4 <MX_TIM4_Init>
  MX_TIM2_Init();
 800142a:	f000 fa43 	bl	80018b4 <MX_TIM2_Init>
  MX_I2C1_Init();
 800142e:	f000 fa13 	bl	8001858 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  GPIO_TypeDef* TRIG_GPIO_Port = GPIOA;
 8001432:	4b9b      	ldr	r3, [pc, #620]	; (80016a0 <main+0x2a0>)
 8001434:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  GPIO_TypeDef* ECHO_GPIO_Port = GPIOA;
 8001438:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <main+0x2a0>)
 800143a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint16_t TRIG_Pin = GPIO_PIN_8;
 800143e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001442:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
  uint16_t ECHO_Pin = GPIO_PIN_9;
 8001446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800144e:	2100      	movs	r1, #0
 8001450:	4894      	ldr	r0, [pc, #592]	; (80016a4 <main+0x2a4>)
 8001452:	f002 ff37 	bl	80042c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001456:	2108      	movs	r1, #8
 8001458:	4892      	ldr	r0, [pc, #584]	; (80016a4 <main+0x2a4>)
 800145a:	f002 ff33 	bl	80042c4 <HAL_TIM_PWM_Start>
  char buf[256];
  int ret;

  while (1)
  {
  	  HAL_ADC_Start(&hadc1);
 800145e:	4892      	ldr	r0, [pc, #584]	; (80016a8 <main+0x2a8>)
 8001460:	f000 ff8e 	bl	8002380 <HAL_ADC_Start>

	  if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8001464:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001468:	488f      	ldr	r0, [pc, #572]	; (80016a8 <main+0x2a8>)
 800146a:	f001 f83d 	bl	80024e8 <HAL_ADC_PollForConversion>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d141      	bne.n	80014f8 <main+0xf8>
		  int ret = HAL_ADC_GetValue(&hadc1);
 8001474:	488c      	ldr	r0, [pc, #560]	; (80016a8 <main+0x2a8>)
 8001476:	f001 f8c2 	bl	80025fe <HAL_ADC_GetValue>
 800147a:	4603      	mov	r3, r0
 800147c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		  sprintf(buf, "Brightness = %d\r\n", ret);
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001486:	4989      	ldr	r1, [pc, #548]	; (80016ac <main+0x2ac>)
 8001488:	4618      	mov	r0, r3
 800148a:	f005 f9b3 	bl	80067f4 <siprintf>
		  if (ret > 3000) {
 800148e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001492:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001496:	4293      	cmp	r3, r2
 8001498:	dd0f      	ble.n	80014ba <main+0xba>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a0:	487f      	ldr	r0, [pc, #508]	; (80016a0 <main+0x2a0>)
 80014a2:	f001 fd69 	bl	8002f78 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2120      	movs	r1, #32
 80014aa:	4881      	ldr	r0, [pc, #516]	; (80016b0 <main+0x2b0>)
 80014ac:	f001 fd64 	bl	8002f78 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 80014b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014b4:	f000 fefc 	bl	80022b0 <HAL_Delay>
 80014b8:	e00e      	b.n	80014d8 <main+0xd8>
		  } else {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c0:	4877      	ldr	r0, [pc, #476]	; (80016a0 <main+0x2a0>)
 80014c2:	f001 fd59 	bl	8002f78 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2120      	movs	r1, #32
 80014ca:	4879      	ldr	r0, [pc, #484]	; (80016b0 <main+0x2b0>)
 80014cc:	f001 fd54 	bl	8002f78 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 80014d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d4:	f000 feec 	bl	80022b0 <HAL_Delay>
		  }
		  HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000);
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe fe80 	bl	80001e0 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	1d39      	adds	r1, r7, #4
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	4872      	ldr	r0, [pc, #456]	; (80016b4 <main+0x2b4>)
 80014ec:	f003 fcab 	bl	8004e46 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 80014f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f4:	f000 fedc 	bl	80022b0 <HAL_Delay>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Set TRIG to LOW for few uSec
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80014f8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001504:	f001 fd38 	bl	8002f78 <HAL_GPIO_WritePin>
	usDelay(3);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 fb6f 	bl	8001bec <usDelay>

	//*** START Ultrasonic measure routine ***//
	//1. Output 10 usec TRIG
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 800150e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8001512:	2201      	movs	r2, #1
 8001514:	4619      	mov	r1, r3
 8001516:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800151a:	f001 fd2d 	bl	8002f78 <HAL_GPIO_WritePin>
	usDelay(10);
 800151e:	200a      	movs	r0, #10
 8001520:	f000 fb64 	bl	8001bec <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001524:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001530:	f001 fd22 	bl	8002f78 <HAL_GPIO_WritePin>

	//2. Wait for ECHO pin rising edge
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 8001534:	bf00      	nop
 8001536:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 800153a:	4619      	mov	r1, r3
 800153c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001540:	f001 fd02 	bl	8002f48 <HAL_GPIO_ReadPin>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f5      	beq.n	8001536 <main+0x136>

	//3. Start measuring ECHO pulse width in usec
	numTicks = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8001550:	e007      	b.n	8001562 <main+0x162>
	{
	  numTicks++;
 8001552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001556:	3301      	adds	r3, #1
 8001558:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	  usDelay(2); //2.8usec
 800155c:	2002      	movs	r0, #2
 800155e:	f000 fb45 	bl	8001bec <usDelay>
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8001562:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8001566:	4619      	mov	r1, r3
 8001568:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800156c:	f001 fcec 	bl	8002f48 <HAL_GPIO_ReadPin>
 8001570:	4603      	mov	r3, r0
 8001572:	2b01      	cmp	r3, #1
 8001574:	d0ed      	beq.n	8001552 <main+0x152>
	};

	 //4. Estimate distance in cm
	 distance = (numTicks + 0.0f)*2.8*speedOfSound;
 8001576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001582:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80016b8 <main+0x2b8>
 8001586:	ee77 7a87 	vadd.f32	s15, s15, s14
 800158a:	ee17 0a90 	vmov	r0, s15
 800158e:	f7fe ffe3 	bl	8000558 <__aeabi_f2d>
 8001592:	a341      	add	r3, pc, #260	; (adr r3, 8001698 <main+0x298>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7ff f836 	bl	8000608 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4614      	mov	r4, r2
 80015a2:	461d      	mov	r5, r3
 80015a4:	4b45      	ldr	r3, [pc, #276]	; (80016bc <main+0x2bc>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ffd6 	bl	8000558 <__aeabi_f2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4620      	mov	r0, r4
 80015b2:	4629      	mov	r1, r5
 80015b4:	f7ff f828 	bl	8000608 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb1a 	bl	8000bf8 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a3e      	ldr	r2, [pc, #248]	; (80016c0 <main+0x2c0>)
 80015c8:	6013      	str	r3, [r2, #0]



	 if (distance < 10) {
 80015ca:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <main+0x2c0>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	d521      	bpl.n	8001622 <main+0x222>
		 TIM2->CCR1 = (2 << 20) / 2;
 80015de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34

		  HD44780_Init(2);
 80015e8:	2002      	movs	r0, #2
 80015ea:	f7ff fd0d 	bl	8001008 <HD44780_Init>
		  HD44780_Clear();
 80015ee:	f7ff fd8f 	bl	8001110 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 80015f2:	2100      	movs	r1, #0
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fda1 	bl	800113c <HD44780_SetCursor>
		  HD44780_PrintStr("OK : PLEASE WALK");
 80015fa:	4832      	ldr	r0, [pc, #200]	; (80016c4 <main+0x2c4>)
 80015fc:	f7ff fe0f 	bl	800121e <HD44780_PrintStr>
		  HD44780_SetCursor(0,1);
 8001600:	2101      	movs	r1, #1
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff fd9a 	bl	800113c <HD44780_SetCursor>
		  HD44780_PrintStr("beware your step");
 8001608:	482f      	ldr	r0, [pc, #188]	; (80016c8 <main+0x2c8>)
 800160a:	f7ff fe08 	bl	800121e <HD44780_PrintStr>

		  SERVO_MoveTo(SERVO_Motor1, 180);
 800160e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80016cc <main+0x2cc>
 8001612:	2000      	movs	r0, #0
 8001614:	f004 f9bc 	bl	8005990 <SERVO_MoveTo>
		  HAL_Delay(300);
 8001618:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800161c:	f000 fe48 	bl	80022b0 <HAL_Delay>
 8001620:	e01f      	b.n	8001662 <main+0x262>

	 } else {
		 TIM2->CCR1 = 0;
 8001622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001626:	2200      	movs	r2, #0
 8001628:	635a      	str	r2, [r3, #52]	; 0x34

		  HD44780_Init(2);
 800162a:	2002      	movs	r0, #2
 800162c:	f7ff fcec 	bl	8001008 <HD44780_Init>
		  HD44780_Clear();
 8001630:	f7ff fd6e 	bl	8001110 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 8001634:	2100      	movs	r1, #0
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fd80 	bl	800113c <HD44780_SetCursor>
		  HD44780_PrintStr("! PLEASE  WAIT !");
 800163c:	4824      	ldr	r0, [pc, #144]	; (80016d0 <main+0x2d0>)
 800163e:	f7ff fdee 	bl	800121e <HD44780_PrintStr>
		  HD44780_SetCursor(3,1);
 8001642:	2101      	movs	r1, #1
 8001644:	2003      	movs	r0, #3
 8001646:	f7ff fd79 	bl	800113c <HD44780_SetCursor>
		  HD44780_PrintStr("XXXXXXXXXX");
 800164a:	4822      	ldr	r0, [pc, #136]	; (80016d4 <main+0x2d4>)
 800164c:	f7ff fde7 	bl	800121e <HD44780_PrintStr>

		  SERVO_MoveTo(SERVO_Motor1, 0);
 8001650:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80016b8 <main+0x2b8>
 8001654:	2000      	movs	r0, #0
 8001656:	f004 f99b 	bl	8005990 <SERVO_MoveTo>
		  HAL_Delay(300);
 800165a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800165e:	f000 fe27 	bl	80022b0 <HAL_Delay>

	 }

	 //5. Print to UART terminal for debugging
	 sprintf(uartBuf, "Distance (cm)  = %.1f\r\n", distance);
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <main+0x2c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff76 	bl	8000558 <__aeabi_f2d>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4919      	ldr	r1, [pc, #100]	; (80016d8 <main+0x2d8>)
 8001672:	481a      	ldr	r0, [pc, #104]	; (80016dc <main+0x2dc>)
 8001674:	f005 f8be 	bl	80067f4 <siprintf>
	 HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8001678:	4818      	ldr	r0, [pc, #96]	; (80016dc <main+0x2dc>)
 800167a:	f7fe fdb1 	bl	80001e0 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	2364      	movs	r3, #100	; 0x64
 8001684:	4915      	ldr	r1, [pc, #84]	; (80016dc <main+0x2dc>)
 8001686:	480b      	ldr	r0, [pc, #44]	; (80016b4 <main+0x2b4>)
 8001688:	f003 fbdd 	bl	8004e46 <HAL_UART_Transmit>

	 HAL_Delay(1000);
 800168c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001690:	f000 fe0e 	bl	80022b0 <HAL_Delay>
  	  HAL_ADC_Start(&hadc1);
 8001694:	e6e3      	b.n	800145e <main+0x5e>
 8001696:	bf00      	nop
 8001698:	66666666 	.word	0x66666666
 800169c:	40066666 	.word	0x40066666
 80016a0:	40020000 	.word	0x40020000
 80016a4:	200002b0 	.word	0x200002b0
 80016a8:	20000214 	.word	0x20000214
 80016ac:	0800a400 	.word	0x0800a400
 80016b0:	40020400 	.word	0x40020400
 80016b4:	20000340 	.word	0x20000340
 80016b8:	00000000 	.word	0x00000000
 80016bc:	3c8c7e28 	.word	0x3c8c7e28
 80016c0:	20000384 	.word	0x20000384
 80016c4:	0800a414 	.word	0x0800a414
 80016c8:	0800a428 	.word	0x0800a428
 80016cc:	43340000 	.word	0x43340000
 80016d0:	0800a43c 	.word	0x0800a43c
 80016d4:	0800a450 	.word	0x0800a450
 80016d8:	0800a45c 	.word	0x0800a45c
 80016dc:	20000388 	.word	0x20000388

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	; 0x50
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	2230      	movs	r2, #48	; 0x30
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 f9f8 	bl	8005ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <SystemClock_Config+0xcc>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	4a27      	ldr	r2, [pc, #156]	; (80017ac <SystemClock_Config+0xcc>)
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001712:	6413      	str	r3, [r2, #64]	; 0x40
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <SystemClock_Config+0xcc>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <SystemClock_Config+0xd0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <SystemClock_Config+0xd0>)
 800172a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <SystemClock_Config+0xd0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800173c:	2302      	movs	r3, #2
 800173e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001740:	2301      	movs	r3, #1
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001744:	2310      	movs	r3, #16
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001748:	2302      	movs	r3, #2
 800174a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800174c:	2300      	movs	r3, #0
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001750:	2310      	movs	r3, #16
 8001752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001754:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001758:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800175a:	2304      	movs	r3, #4
 800175c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800175e:	2304      	movs	r3, #4
 8001760:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	4618      	mov	r0, r3
 8001768:	f002 f86c 	bl	8003844 <HAL_RCC_OscConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001772:	f000 fa6d 	bl	8001c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001776:	230f      	movs	r3, #15
 8001778:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177a:	2302      	movs	r3, #2
 800177c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2102      	movs	r1, #2
 8001792:	4618      	mov	r0, r3
 8001794:	f002 face 	bl	8003d34 <HAL_RCC_ClockConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800179e:	f000 fa57 	bl	8001c50 <Error_Handler>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3750      	adds	r7, #80	; 0x50
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000

080017b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ba:	463b      	mov	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <MX_ADC1_Init+0x98>)
 80017c8:	4a21      	ldr	r2, [pc, #132]	; (8001850 <MX_ADC1_Init+0x9c>)
 80017ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_ADC1_Init+0x98>)
 80017ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <MX_ADC1_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_ADC1_Init+0x98>)
 80017dc:	2204      	movs	r2, #4
 80017de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_ADC1_Init+0x98>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_ADC1_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_ADC1_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_ADC1_Init+0x98>)
 80017f6:	4a17      	ldr	r2, [pc, #92]	; (8001854 <MX_ADC1_Init+0xa0>)
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_ADC1_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_ADC1_Init+0x98>)
 8001802:	2201      	movs	r2, #1
 8001804:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_ADC1_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_ADC1_Init+0x98>)
 8001810:	2201      	movs	r2, #1
 8001812:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <MX_ADC1_Init+0x98>)
 8001816:	f000 fd6f 	bl	80022f8 <HAL_ADC_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001820:	f000 fa16 	bl	8001c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001824:	2300      	movs	r3, #0
 8001826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001828:	2301      	movs	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_ADC1_Init+0x98>)
 8001836:	f000 feef 	bl	8002618 <HAL_ADC_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001840:	f000 fa06 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000214 	.word	0x20000214
 8001850:	40012000 	.word	0x40012000
 8001854:	0f000001 	.word	0x0f000001

08001858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_I2C1_Init+0x50>)
 800185e:	4a13      	ldr	r2, [pc, #76]	; (80018ac <MX_I2C1_Init+0x54>)
 8001860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <MX_I2C1_Init+0x58>)
 8001866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_I2C1_Init+0x50>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <MX_I2C1_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <MX_I2C1_Init+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_I2C1_Init+0x50>)
 8001896:	f001 fb89 	bl	8002fac <HAL_I2C_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018a0:	f000 f9d6 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2000025c 	.word	0x2000025c
 80018ac:	40005400 	.word	0x40005400
 80018b0:	000186a0 	.word	0x000186a0

080018b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	; 0x38
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	f107 0320 	add.w	r3, r7, #32
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	615a      	str	r2, [r3, #20]
 80018e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e4:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <MX_TIM2_Init+0xfc>)
 80018e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80018ec:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <MX_TIM2_Init+0xfc>)
 80018ee:	220f      	movs	r2, #15
 80018f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <MX_TIM2_Init+0xfc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <MX_TIM2_Init+0xfc>)
 80018fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80018fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <MX_TIM2_Init+0xfc>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <MX_TIM2_Init+0xfc>)
 8001908:	2280      	movs	r2, #128	; 0x80
 800190a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800190c:	4828      	ldr	r0, [pc, #160]	; (80019b0 <MX_TIM2_Init+0xfc>)
 800190e:	f002 fc31 	bl	8004174 <HAL_TIM_Base_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001918:	f000 f99a 	bl	8001c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001926:	4619      	mov	r1, r3
 8001928:	4821      	ldr	r0, [pc, #132]	; (80019b0 <MX_TIM2_Init+0xfc>)
 800192a:	f002 fe3d 	bl	80045a8 <HAL_TIM_ConfigClockSource>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001934:	f000 f98c 	bl	8001c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001938:	481d      	ldr	r0, [pc, #116]	; (80019b0 <MX_TIM2_Init+0xfc>)
 800193a:	f002 fc6a 	bl	8004212 <HAL_TIM_PWM_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001944:	f000 f984 	bl	8001c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	4619      	mov	r1, r3
 8001956:	4816      	ldr	r0, [pc, #88]	; (80019b0 <MX_TIM2_Init+0xfc>)
 8001958:	f003 f9ba 	bl	8004cd0 <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001962:	f000 f975 	bl	8001c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001966:	2360      	movs	r3, #96	; 0x60
 8001968:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <MX_TIM2_Init+0xfc>)
 800197e:	f002 fd51 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001988:	f000 f962 	bl	8001c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2208      	movs	r2, #8
 8001990:	4619      	mov	r1, r3
 8001992:	4807      	ldr	r0, [pc, #28]	; (80019b0 <MX_TIM2_Init+0xfc>)
 8001994:	f002 fd46 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800199e:	f000 f957 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019a2:	4803      	ldr	r0, [pc, #12]	; (80019b0 <MX_TIM2_Init+0xfc>)
 80019a4:	f000 fa44 	bl	8001e30 <HAL_TIM_MspPostInit>

}
 80019a8:	bf00      	nop
 80019aa:	3738      	adds	r7, #56	; 0x38
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200002b0 	.word	0x200002b0

080019b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	463b      	mov	r3, r7
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <MX_TIM4_Init+0x90>)
 80019d2:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <MX_TIM4_Init+0x94>)
 80019d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_TIM4_Init+0x90>)
 80019d8:	2253      	movs	r2, #83	; 0x53
 80019da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <MX_TIM4_Init+0x90>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_TIM4_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_TIM4_Init+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <MX_TIM4_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019f4:	4813      	ldr	r0, [pc, #76]	; (8001a44 <MX_TIM4_Init+0x90>)
 80019f6:	f002 fbbd 	bl	8004174 <HAL_TIM_Base_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001a00:	f000 f926 	bl	8001c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <MX_TIM4_Init+0x90>)
 8001a12:	f002 fdc9 	bl	80045a8 <HAL_TIM_ConfigClockSource>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001a1c:	f000 f918 	bl	8001c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a20:	2300      	movs	r3, #0
 8001a22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_TIM4_Init+0x90>)
 8001a2e:	f003 f94f 	bl	8004cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001a38:	f000 f90a 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200002f8 	.word	0x200002f8
 8001a48:	40000800 	.word	0x40000800

08001a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <MX_USART2_UART_Init+0x50>)
 8001a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a72:	220c      	movs	r2, #12
 8001a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_USART2_UART_Init+0x4c>)
 8001a84:	f003 f992 	bl	8004dac <HAL_UART_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a8e:	f000 f8df 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000340 	.word	0x20000340
 8001a9c:	40004400 	.word	0x40004400

08001aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b45      	ldr	r3, [pc, #276]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a40      	ldr	r2, [pc, #256]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b3e      	ldr	r3, [pc, #248]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a39      	ldr	r2, [pc, #228]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a32      	ldr	r2, [pc, #200]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <MX_GPIO_Init+0x13c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2108      	movs	r1, #8
 8001b2a:	482d      	ldr	r0, [pc, #180]	; (8001be0 <MX_GPIO_Init+0x140>)
 8001b2c:	f001 fa24 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ultrasonic___TRIG_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8001b36:	482b      	ldr	r0, [pc, #172]	; (8001be4 <MX_GPIO_Init+0x144>)
 8001b38:	f001 fa1e 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2120      	movs	r1, #32
 8001b40:	4829      	ldr	r0, [pc, #164]	; (8001be8 <MX_GPIO_Init+0x148>)
 8001b42:	f001 fa19 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4820      	ldr	r0, [pc, #128]	; (8001be0 <MX_GPIO_Init+0x140>)
 8001b5e:	f001 f86f 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b62:	2308      	movs	r3, #8
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4819      	ldr	r0, [pc, #100]	; (8001be0 <MX_GPIO_Init+0x140>)
 8001b7a:	f001 f861 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ultrasonic___TRIG_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|Ultrasonic___TRIG_Pin|GPIO_PIN_10;
 8001b7e:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4813      	ldr	r0, [pc, #76]	; (8001be4 <MX_GPIO_Init+0x144>)
 8001b98:	f001 f852 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultrasonic___ECHO_Pin */
  GPIO_InitStruct.Pin = Ultrasonic___ECHO_Pin;
 8001b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Ultrasonic___ECHO_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480c      	ldr	r0, [pc, #48]	; (8001be4 <MX_GPIO_Init+0x144>)
 8001bb2:	f001 f845 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <MX_GPIO_Init+0x148>)
 8001bce:	f001 f837 	bl	8002c40 <HAL_GPIO_Init>

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40020400 	.word	0x40020400

08001bec <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d801      	bhi.n	8001bfe <usDelay+0x12>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8001bfe:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <usDelay+0x60>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <usDelay+0x60>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <usDelay+0x60>)
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <usDelay+0x60>)
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <usDelay+0x60>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <usDelay+0x60>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8001c24:	bf00      	nop
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <usDelay+0x60>)
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d1f9      	bne.n	8001c26 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <usDelay+0x60>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <usDelay+0x60>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6113      	str	r3, [r2, #16]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40000800 	.word	0x40000800

08001c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <Error_Handler+0x8>
	...

08001c5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c9a:	2007      	movs	r0, #7
 8001c9c:	f000 ff9c 	bl	8002bd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_ADC_MspInit+0x7c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d127      	bne.n	8001d1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d06:	2301      	movs	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_ADC_MspInit+0x84>)
 8001d1a:	f000 ff91 	bl	8002c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40012000 	.word	0x40012000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000

08001d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <HAL_I2C_MspInit+0x84>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d12c      	bne.n	8001db0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d78:	2312      	movs	r3, #18
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d84:	2304      	movs	r3, #4
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <HAL_I2C_MspInit+0x8c>)
 8001d90:	f000 ff56 	bl	8002c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	; 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020400 	.word	0x40020400

08001dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_TIM_Base_MspInit+0x64>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <HAL_TIM_Base_MspInit+0x64>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_TIM_Base_MspInit+0x64>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001df2:	e012      	b.n	8001e1a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <HAL_TIM_Base_MspInit+0x68>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d10d      	bne.n	8001e1a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_TIM_Base_MspInit+0x64>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <HAL_TIM_Base_MspInit+0x64>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_TIM_Base_MspInit+0x64>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40000800 	.word	0x40000800

08001e30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d13d      	bne.n	8001ece <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_TIM_MspPostInit+0xa8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_TIM_MspPostInit+0xa8>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_TIM_MspPostInit+0xa8>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_TIM_MspPostInit+0xa8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_TIM_MspPostInit+0xa8>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_TIM_MspPostInit+0xa8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480d      	ldr	r0, [pc, #52]	; (8001edc <HAL_TIM_MspPostInit+0xac>)
 8001ea8:	f000 feca 	bl	8002c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <HAL_TIM_MspPostInit+0xb0>)
 8001eca:	f000 feb9 	bl	8002c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020400 	.word	0x40020400
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_UART_MspInit+0x84>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12b      	bne.n	8001f5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f3e:	230c      	movs	r3, #12
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	; (8001f70 <HAL_UART_MspInit+0x8c>)
 8001f5a:	f000 fe71 	bl	8002c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3728      	adds	r7, #40	; 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40004400 	.word	0x40004400
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <NMI_Handler+0x4>

08001f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <MemManage_Handler+0x4>

08001f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <BusFault_Handler+0x4>

08001f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <UsageFault_Handler+0x4>

08001f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc0:	f000 f956 	bl	8002270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
	return 1;
 8001fcc:	2301      	movs	r3, #1
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <_kill>:

int _kill(int pid, int sig)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fe2:	f003 fd55 	bl	8005a90 <__errno>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2216      	movs	r2, #22
 8001fea:	601a      	str	r2, [r3, #0]
	return -1;
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_exit>:

void _exit (int status)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002000:	f04f 31ff 	mov.w	r1, #4294967295
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ffe7 	bl	8001fd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800200a:	e7fe      	b.n	800200a <_exit+0x12>

0800200c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	e00a      	b.n	8002034 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800201e:	f3af 8000 	nop.w
 8002022:	4601      	mov	r1, r0
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	60ba      	str	r2, [r7, #8]
 800202a:	b2ca      	uxtb	r2, r1
 800202c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3301      	adds	r3, #1
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	dbf0      	blt.n	800201e <_read+0x12>
	}

return len;
 800203c:	687b      	ldr	r3, [r7, #4]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e009      	b.n	800206c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	60ba      	str	r2, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	dbf1      	blt.n	8002058 <_write+0x12>
	}
	return len;
 8002074:	687b      	ldr	r3, [r7, #4]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_close>:

int _close(int file)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
	return -1;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a6:	605a      	str	r2, [r3, #4]
	return 0;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_isatty>:

int _isatty(int file)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
	return 1;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
	return 0;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <_sbrk+0x5c>)
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <_sbrk+0x60>)
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <_sbrk+0x64>)
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <_sbrk+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	429a      	cmp	r2, r3
 8002116:	d207      	bcs.n	8002128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002118:	f003 fcba 	bl	8005a90 <__errno>
 800211c:	4603      	mov	r3, r0
 800211e:	220c      	movs	r2, #12
 8002120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	e009      	b.n	800213c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	4a05      	ldr	r2, [pc, #20]	; (800214c <_sbrk+0x64>)
 8002138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20020000 	.word	0x20020000
 8002148:	00000400 	.word	0x00000400
 800214c:	200003ec 	.word	0x200003ec
 8002150:	20000408 	.word	0x20000408

08002154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <SystemInit+0x20>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	4a05      	ldr	r2, [pc, #20]	; (8002174 <SystemInit+0x20>)
 8002160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002194:	4c0b      	ldr	r4, [pc, #44]	; (80021c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a2:	f7ff ffd7 	bl	8002154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a6:	f003 fc79 	bl	8005a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021aa:	f7ff f929 	bl	8001400 <main>
  bx  lr    
 80021ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80021bc:	0800a964 	.word	0x0800a964
  ldr r2, =_sbss
 80021c0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80021c4:	20000408 	.word	0x20000408

080021c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC_IRQHandler>
	...

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <HAL_Init+0x40>)
 80021d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_Init+0x40>)
 80021e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_Init+0x40>)
 80021ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f000 fcef 	bl	8002bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f000 f808 	bl	8002210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002200:	f7ff fd2c 	bl	8001c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00

08002210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_InitTick+0x54>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_InitTick+0x58>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002226:	fbb3 f3f1 	udiv	r3, r3, r1
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fcf9 	bl	8002c26 <HAL_SYSTICK_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00e      	b.n	800225c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b0f      	cmp	r3, #15
 8002242:	d80a      	bhi.n	800225a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002244:	2200      	movs	r2, #0
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f000 fccf 	bl	8002bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002250:	4a06      	ldr	r2, [pc, #24]	; (800226c <HAL_InitTick+0x5c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000010 	.word	0x20000010
 8002268:	20000018 	.word	0x20000018
 800226c:	20000014 	.word	0x20000014

08002270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x20>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x24>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_IncTick+0x24>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000018 	.word	0x20000018
 8002294:	200003f0 	.word	0x200003f0

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200003f0 	.word	0x200003f0

080022b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff ffee 	bl	8002298 <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d005      	beq.n	80022d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_Delay+0x44>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022d6:	bf00      	nop
 80022d8:	f7ff ffde 	bl	8002298 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d8f7      	bhi.n	80022d8 <HAL_Delay+0x28>
  {
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000018 	.word	0x20000018

080022f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e033      	b.n	8002376 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff fcc8 	bl	8001cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d118      	bne.n	8002368 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800233e:	f023 0302 	bic.w	r3, r3, #2
 8002342:	f043 0202 	orr.w	r2, r3, #2
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa96 	bl	800287c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f023 0303 	bic.w	r3, r3, #3
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
 8002366:	e001      	b.n	800236c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002374:	7bfb      	ldrb	r3, [r7, #15]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_Start+0x1a>
 8002396:	2302      	movs	r3, #2
 8002398:	e097      	b.n	80024ca <HAL_ADC_Start+0x14a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d018      	beq.n	80023e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023c0:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <HAL_ADC_Start+0x158>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a45      	ldr	r2, [pc, #276]	; (80024dc <HAL_ADC_Start+0x15c>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0c9a      	lsrs	r2, r3, #18
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023d4:	e002      	b.n	80023dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3b01      	subs	r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f9      	bne.n	80023d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d15f      	bne.n	80024b0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800241a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800242e:	d106      	bne.n	800243e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f023 0206 	bic.w	r2, r3, #6
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	645a      	str	r2, [r3, #68]	; 0x44
 800243c:	e002      	b.n	8002444 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_ADC_Start+0x160>)
 800244e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002458:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d129      	bne.n	80024c8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	e020      	b.n	80024c8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a16      	ldr	r2, [pc, #88]	; (80024e4 <HAL_ADC_Start+0x164>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d11b      	bne.n	80024c8 <HAL_ADC_Start+0x148>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d114      	bne.n	80024c8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	e00b      	b.n	80024c8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0210 	orr.w	r2, r3, #16
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000010 	.word	0x20000010
 80024dc:	431bde83 	.word	0x431bde83
 80024e0:	40012300 	.word	0x40012300
 80024e4:	40012000 	.word	0x40012000

080024e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002504:	d113      	bne.n	800252e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002514:	d10b      	bne.n	800252e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f043 0220 	orr.w	r2, r3, #32
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e063      	b.n	80025f6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800252e:	f7ff feb3 	bl	8002298 <HAL_GetTick>
 8002532:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002534:	e021      	b.n	800257a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d01d      	beq.n	800257a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_ADC_PollForConversion+0x6c>
 8002544:	f7ff fea8 	bl	8002298 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d212      	bcs.n	800257a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d00b      	beq.n	800257a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f043 0204 	orr.w	r2, r3, #4
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e03d      	b.n	80025f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b02      	cmp	r3, #2
 8002586:	d1d6      	bne.n	8002536 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0212 	mvn.w	r2, #18
 8002590:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d123      	bne.n	80025f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11f      	bne.n	80025f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d111      	bne.n	80025f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1c>
 8002630:	2302      	movs	r3, #2
 8002632:	e113      	b.n	800285c <HAL_ADC_ConfigChannel+0x244>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b09      	cmp	r3, #9
 8002642:	d925      	bls.n	8002690 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	3b1e      	subs	r3, #30
 800265a:	2207      	movs	r2, #7
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43da      	mvns	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	400a      	ands	r2, r1
 8002668:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68d9      	ldr	r1, [r3, #12]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	4618      	mov	r0, r3
 800267c:	4603      	mov	r3, r0
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4403      	add	r3, r0
 8002682:	3b1e      	subs	r3, #30
 8002684:	409a      	lsls	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	e022      	b.n	80026d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	2207      	movs	r2, #7
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	400a      	ands	r2, r1
 80026b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6919      	ldr	r1, [r3, #16]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4403      	add	r3, r0
 80026cc:	409a      	lsls	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d824      	bhi.n	8002728 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	3b05      	subs	r3, #5
 80026f0:	221f      	movs	r2, #31
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	400a      	ands	r2, r1
 80026fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	4618      	mov	r0, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	3b05      	subs	r3, #5
 800271a:	fa00 f203 	lsl.w	r2, r0, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	635a      	str	r2, [r3, #52]	; 0x34
 8002726:	e04c      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	d824      	bhi.n	800277a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	3b23      	subs	r3, #35	; 0x23
 8002742:	221f      	movs	r2, #31
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43da      	mvns	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	400a      	ands	r2, r1
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	b29b      	uxth	r3, r3
 800275e:	4618      	mov	r0, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	3b23      	subs	r3, #35	; 0x23
 800276c:	fa00 f203 	lsl.w	r2, r0, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
 8002778:	e023      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	3b41      	subs	r3, #65	; 0x41
 800278c:	221f      	movs	r2, #31
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	400a      	ands	r2, r1
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	3b41      	subs	r3, #65	; 0x41
 80027b6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027c2:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_ADC_ConfigChannel+0x250>)
 80027c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a28      	ldr	r2, [pc, #160]	; (800286c <HAL_ADC_ConfigChannel+0x254>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d10f      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x1d8>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b12      	cmp	r3, #18
 80027d6:	d10b      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1d      	ldr	r2, [pc, #116]	; (800286c <HAL_ADC_ConfigChannel+0x254>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d12b      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x23a>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <HAL_ADC_ConfigChannel+0x258>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d003      	beq.n	800280c <HAL_ADC_ConfigChannel+0x1f4>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b11      	cmp	r3, #17
 800280a:	d122      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_ADC_ConfigChannel+0x258>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d111      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_ADC_ConfigChannel+0x25c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a11      	ldr	r2, [pc, #68]	; (8002878 <HAL_ADC_ConfigChannel+0x260>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	0c9a      	lsrs	r2, r3, #18
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002844:	e002      	b.n	800284c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3b01      	subs	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f9      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40012300 	.word	0x40012300
 800286c:	40012000 	.word	0x40012000
 8002870:	10000012 	.word	0x10000012
 8002874:	20000010 	.word	0x20000010
 8002878:	431bde83 	.word	0x431bde83

0800287c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002884:	4b79      	ldr	r3, [pc, #484]	; (8002a6c <ADC_Init+0x1f0>)
 8002886:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	431a      	orrs	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	021a      	lsls	r2, r3, #8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6899      	ldr	r1, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <ADC_Init+0x1f4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d022      	beq.n	800295a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002922:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6899      	ldr	r1, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6899      	ldr	r1, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	e00f      	b.n	800297a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002978:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0202 	bic.w	r2, r2, #2
 8002988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	7e1b      	ldrb	r3, [r3, #24]
 8002994:	005a      	lsls	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01b      	beq.n	80029e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	3b01      	subs	r3, #1
 80029d4:	035a      	lsls	r2, r3, #13
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	e007      	b.n	80029f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	051a      	lsls	r2, r3, #20
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6899      	ldr	r1, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a32:	025a      	lsls	r2, r3, #9
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6899      	ldr	r1, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	029a      	lsls	r2, r3, #10
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40012300 	.word	0x40012300
 8002a70:	0f000001 	.word	0x0f000001

08002a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db0a      	blt.n	8002b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	490c      	ldr	r1, [pc, #48]	; (8002b24 <__NVIC_SetPriority+0x4c>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b00:	e00a      	b.n	8002b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4908      	ldr	r1, [pc, #32]	; (8002b28 <__NVIC_SetPriority+0x50>)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	761a      	strb	r2, [r3, #24]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000e100 	.word	0xe000e100
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f1c3 0307 	rsb	r3, r3, #7
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	bf28      	it	cs
 8002b4a:	2304      	movcs	r3, #4
 8002b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d902      	bls.n	8002b5c <NVIC_EncodePriority+0x30>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3b03      	subs	r3, #3
 8002b5a:	e000      	b.n	8002b5e <NVIC_EncodePriority+0x32>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	401a      	ands	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	43d9      	mvns	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	4313      	orrs	r3, r2
         );
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba4:	d301      	bcc.n	8002baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00f      	b.n	8002bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <SysTick_Config+0x40>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	f7ff ff8e 	bl	8002ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <SysTick_Config+0x40>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <SysTick_Config+0x40>)
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	e000e010 	.word	0xe000e010

08002bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff47 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c00:	f7ff ff5c 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f7ff ff8e 	bl	8002b2c <NVIC_EncodePriority>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff5d 	bl	8002ad8 <__NVIC_SetPriority>
}
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ffb0 	bl	8002b94 <SysTick_Config>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e159      	b.n	8002f10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f040 8148 	bne.w	8002f0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d005      	beq.n	8002c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d130      	bne.n	8002cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0201 	and.w	r2, r3, #1
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d017      	beq.n	8002d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d123      	bne.n	8002d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	220f      	movs	r2, #15
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	08da      	lsrs	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3208      	adds	r2, #8
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0203 	and.w	r2, r3, #3
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a2 	beq.w	8002f0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b57      	ldr	r3, [pc, #348]	; (8002f28 <HAL_GPIO_Init+0x2e8>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <HAL_GPIO_Init+0x2e8>)
 8002dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd6:	4b54      	ldr	r3, [pc, #336]	; (8002f28 <HAL_GPIO_Init+0x2e8>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de2:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_GPIO_Init+0x2ec>)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <HAL_GPIO_Init+0x2f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d019      	beq.n	8002e42 <HAL_GPIO_Init+0x202>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a48      	ldr	r2, [pc, #288]	; (8002f34 <HAL_GPIO_Init+0x2f4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_GPIO_Init+0x1fe>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a47      	ldr	r2, [pc, #284]	; (8002f38 <HAL_GPIO_Init+0x2f8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00d      	beq.n	8002e3a <HAL_GPIO_Init+0x1fa>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a46      	ldr	r2, [pc, #280]	; (8002f3c <HAL_GPIO_Init+0x2fc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <HAL_GPIO_Init+0x1f6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a45      	ldr	r2, [pc, #276]	; (8002f40 <HAL_GPIO_Init+0x300>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_GPIO_Init+0x1f2>
 8002e2e:	2304      	movs	r3, #4
 8002e30:	e008      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e32:	2307      	movs	r3, #7
 8002e34:	e006      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e36:	2303      	movs	r3, #3
 8002e38:	e004      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e002      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_GPIO_Init+0x204>
 8002e42:	2300      	movs	r3, #0
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	f002 0203 	and.w	r2, r2, #3
 8002e4a:	0092      	lsls	r2, r2, #2
 8002e4c:	4093      	lsls	r3, r2
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e54:	4935      	ldr	r1, [pc, #212]	; (8002f2c <HAL_GPIO_Init+0x2ec>)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	089b      	lsrs	r3, r3, #2
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e62:	4b38      	ldr	r3, [pc, #224]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e86:	4a2f      	ldr	r2, [pc, #188]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb0:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eda:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f04:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b0f      	cmp	r3, #15
 8002f14:	f67f aea2 	bls.w	8002c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	40020000 	.word	0x40020000
 8002f34:	40020400 	.word	0x40020400
 8002f38:	40020800 	.word	0x40020800
 8002f3c:	40020c00 	.word	0x40020c00
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40013c00 	.word	0x40013c00

08002f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	e001      	b.n	8002f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f94:	e003      	b.n	8002f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e12b      	b.n	8003216 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe feae 	bl	8001d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	; 0x24
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800300e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003010:	f001 f888 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8003014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4a81      	ldr	r2, [pc, #516]	; (8003220 <HAL_I2C_Init+0x274>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d807      	bhi.n	8003030 <HAL_I2C_Init+0x84>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a80      	ldr	r2, [pc, #512]	; (8003224 <HAL_I2C_Init+0x278>)
 8003024:	4293      	cmp	r3, r2
 8003026:	bf94      	ite	ls
 8003028:	2301      	movls	r3, #1
 800302a:	2300      	movhi	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e006      	b.n	800303e <HAL_I2C_Init+0x92>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a7d      	ldr	r2, [pc, #500]	; (8003228 <HAL_I2C_Init+0x27c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	bf94      	ite	ls
 8003038:	2301      	movls	r3, #1
 800303a:	2300      	movhi	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0e7      	b.n	8003216 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4a78      	ldr	r2, [pc, #480]	; (800322c <HAL_I2C_Init+0x280>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	0c9b      	lsrs	r3, r3, #18
 8003050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4a6a      	ldr	r2, [pc, #424]	; (8003220 <HAL_I2C_Init+0x274>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d802      	bhi.n	8003080 <HAL_I2C_Init+0xd4>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	3301      	adds	r3, #1
 800307e:	e009      	b.n	8003094 <HAL_I2C_Init+0xe8>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	4a69      	ldr	r2, [pc, #420]	; (8003230 <HAL_I2C_Init+0x284>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	3301      	adds	r3, #1
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	430b      	orrs	r3, r1
 800309a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	495c      	ldr	r1, [pc, #368]	; (8003220 <HAL_I2C_Init+0x274>)
 80030b0:	428b      	cmp	r3, r1
 80030b2:	d819      	bhi.n	80030e8 <HAL_I2C_Init+0x13c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1e59      	subs	r1, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c2:	1c59      	adds	r1, r3, #1
 80030c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030c8:	400b      	ands	r3, r1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00a      	beq.n	80030e4 <HAL_I2C_Init+0x138>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1e59      	subs	r1, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e2:	e051      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 80030e4:	2304      	movs	r3, #4
 80030e6:	e04f      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d111      	bne.n	8003114 <HAL_I2C_Init+0x168>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e58      	subs	r0, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	440b      	add	r3, r1
 80030fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003102:	3301      	adds	r3, #1
 8003104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e012      	b.n	800313a <HAL_I2C_Init+0x18e>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	0099      	lsls	r1, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Init+0x196>
 800313e:	2301      	movs	r3, #1
 8003140:	e022      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10e      	bne.n	8003168 <HAL_I2C_Init+0x1bc>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1e58      	subs	r0, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	440b      	add	r3, r1
 8003158:	fbb0 f3f3 	udiv	r3, r0, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003166:	e00f      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e58      	subs	r0, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	0099      	lsls	r1, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	fbb0 f3f3 	udiv	r3, r0, r3
 800317e:	3301      	adds	r3, #1
 8003180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	6809      	ldr	r1, [r1, #0]
 800318c:	4313      	orrs	r3, r2
 800318e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6911      	ldr	r1, [r2, #16]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68d2      	ldr	r2, [r2, #12]
 80031c2:	4311      	orrs	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	000186a0 	.word	0x000186a0
 8003224:	001e847f 	.word	0x001e847f
 8003228:	003d08ff 	.word	0x003d08ff
 800322c:	431bde83 	.word	0x431bde83
 8003230:	10624dd3 	.word	0x10624dd3

08003234 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	461a      	mov	r2, r3
 8003240:	460b      	mov	r3, r1
 8003242:	817b      	strh	r3, [r7, #10]
 8003244:	4613      	mov	r3, r2
 8003246:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003248:	f7ff f826 	bl	8002298 <HAL_GetTick>
 800324c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b20      	cmp	r3, #32
 8003258:	f040 80e0 	bne.w	800341c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	2319      	movs	r3, #25
 8003262:	2201      	movs	r2, #1
 8003264:	4970      	ldr	r1, [pc, #448]	; (8003428 <HAL_I2C_Master_Transmit+0x1f4>)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f964 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003272:	2302      	movs	r3, #2
 8003274:	e0d3      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_I2C_Master_Transmit+0x50>
 8003280:	2302      	movs	r3, #2
 8003282:	e0cc      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d007      	beq.n	80032aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2221      	movs	r2, #33	; 0x21
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2210      	movs	r2, #16
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	893a      	ldrh	r2, [r7, #8]
 80032da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a50      	ldr	r2, [pc, #320]	; (800342c <HAL_I2C_Master_Transmit+0x1f8>)
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032ec:	8979      	ldrh	r1, [r7, #10]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	6a3a      	ldr	r2, [r7, #32]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f89c 	bl	8003430 <I2C_MasterRequestWrite>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e08d      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003318:	e066      	b.n	80033e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	6a39      	ldr	r1, [r7, #32]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f9de 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b04      	cmp	r3, #4
 8003330:	d107      	bne.n	8003342 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003340:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e06b      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b04      	cmp	r3, #4
 8003382:	d11b      	bne.n	80033bc <HAL_I2C_Master_Transmit+0x188>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	d017      	beq.n	80033bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	781a      	ldrb	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	6a39      	ldr	r1, [r7, #32]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f9ce 	bl	8003762 <I2C_WaitOnBTFFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d107      	bne.n	80033e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e01a      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d194      	bne.n	800331a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	00100002 	.word	0x00100002
 800342c:	ffff0000 	.word	0xffff0000

08003430 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	460b      	mov	r3, r1
 800343e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d006      	beq.n	800345a <I2C_MasterRequestWrite+0x2a>
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d003      	beq.n	800345a <I2C_MasterRequestWrite+0x2a>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003458:	d108      	bne.n	800346c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e00b      	b.n	8003484 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	2b12      	cmp	r3, #18
 8003472:	d107      	bne.n	8003484 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003482:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f84f 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00d      	beq.n	80034b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034aa:	d103      	bne.n	80034b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e035      	b.n	8003524 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034c0:	d108      	bne.n	80034d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034c2:	897b      	ldrh	r3, [r7, #10]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034d0:	611a      	str	r2, [r3, #16]
 80034d2:	e01b      	b.n	800350c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034d4:	897b      	ldrh	r3, [r7, #10]
 80034d6:	11db      	asrs	r3, r3, #7
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f003 0306 	and.w	r3, r3, #6
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f063 030f 	orn	r3, r3, #15
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	490e      	ldr	r1, [pc, #56]	; (800352c <I2C_MasterRequestWrite+0xfc>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f875 	bl	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e010      	b.n	8003524 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4907      	ldr	r1, [pc, #28]	; (8003530 <I2C_MasterRequestWrite+0x100>)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f865 	bl	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	00010008 	.word	0x00010008
 8003530:	00010002 	.word	0x00010002

08003534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	4613      	mov	r3, r2
 8003542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003544:	e025      	b.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d021      	beq.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354e:	f7fe fea3 	bl	8002298 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d116      	bne.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f043 0220 	orr.w	r2, r3, #32
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e023      	b.n	80035da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d10d      	bne.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	e00c      	b.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4013      	ands	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bf0c      	ite	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	2300      	movne	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d0b6      	beq.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035f0:	e051      	b.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003600:	d123      	bne.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003610:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800361a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f043 0204 	orr.w	r2, r3, #4
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e046      	b.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d021      	beq.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fe fe21 	bl	8002298 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d116      	bne.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f043 0220 	orr.w	r2, r3, #32
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e020      	b.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d10c      	bne.n	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bf14      	ite	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	2300      	moveq	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	e00b      	b.n	80036d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	43da      	mvns	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4013      	ands	r3, r2
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d18d      	bne.n	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ec:	e02d      	b.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f878 	bl	80037e4 <I2C_IsAcknowledgeFailed>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e02d      	b.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d021      	beq.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fe fdc7 	bl	8002298 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d116      	bne.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f043 0220 	orr.w	r2, r3, #32
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e007      	b.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d1ca      	bne.n	80036ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800376e:	e02d      	b.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f837 	bl	80037e4 <I2C_IsAcknowledgeFailed>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e02d      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d021      	beq.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003788:	f7fe fd86 	bl	8002298 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	429a      	cmp	r2, r3
 8003796:	d302      	bcc.n	800379e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d116      	bne.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d1ca      	bne.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fa:	d11b      	bne.n	8003834 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003804:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0204 	orr.w	r2, r3, #4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e267      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d075      	beq.n	800394e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003862:	4b88      	ldr	r3, [pc, #544]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b04      	cmp	r3, #4
 800386c:	d00c      	beq.n	8003888 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386e:	4b85      	ldr	r3, [pc, #532]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003876:	2b08      	cmp	r3, #8
 8003878:	d112      	bne.n	80038a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387a:	4b82      	ldr	r3, [pc, #520]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003886:	d10b      	bne.n	80038a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	4b7e      	ldr	r3, [pc, #504]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d05b      	beq.n	800394c <HAL_RCC_OscConfig+0x108>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d157      	bne.n	800394c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e242      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a8:	d106      	bne.n	80038b8 <HAL_RCC_OscConfig+0x74>
 80038aa:	4b76      	ldr	r3, [pc, #472]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a75      	ldr	r2, [pc, #468]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e01d      	b.n	80038f4 <HAL_RCC_OscConfig+0xb0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x98>
 80038c2:	4b70      	ldr	r3, [pc, #448]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6f      	ldr	r2, [pc, #444]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b6d      	ldr	r3, [pc, #436]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6c      	ldr	r2, [pc, #432]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0xb0>
 80038dc:	4b69      	ldr	r3, [pc, #420]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a68      	ldr	r2, [pc, #416]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b66      	ldr	r3, [pc, #408]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a65      	ldr	r2, [pc, #404]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe fccc 	bl	8002298 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003904:	f7fe fcc8 	bl	8002298 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	; 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e207      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	4b5b      	ldr	r3, [pc, #364]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0xc0>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fe fcb8 	bl	8002298 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800392c:	f7fe fcb4 	bl	8002298 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	; 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e1f3      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	4b51      	ldr	r3, [pc, #324]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0xe8>
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d063      	beq.n	8003a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800395a:	4b4a      	ldr	r3, [pc, #296]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800396e:	2b08      	cmp	r3, #8
 8003970:	d11c      	bne.n	80039ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003972:	4b44      	ldr	r3, [pc, #272]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d116      	bne.n	80039ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397e:	4b41      	ldr	r3, [pc, #260]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_RCC_OscConfig+0x152>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e1c7      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003996:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4937      	ldr	r1, [pc, #220]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039aa:	e03a      	b.n	8003a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b4:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <HAL_RCC_OscConfig+0x244>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ba:	f7fe fc6d 	bl	8002298 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c2:	f7fe fc69 	bl	8002298 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1a8      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e0:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4925      	ldr	r1, [pc, #148]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]
 80039f4:	e015      	b.n	8003a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <HAL_RCC_OscConfig+0x244>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe fc4c 	bl	8002298 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a04:	f7fe fc48 	bl	8002298 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e187      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d036      	beq.n	8003a9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <HAL_RCC_OscConfig+0x248>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fe fc2c 	bl	8002298 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a44:	f7fe fc28 	bl	8002298 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e167      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x200>
 8003a62:	e01b      	b.n	8003a9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_OscConfig+0x248>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6a:	f7fe fc15 	bl	8002298 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a70:	e00e      	b.n	8003a90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a72:	f7fe fc11 	bl	8002298 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d907      	bls.n	8003a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e150      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
 8003a84:	40023800 	.word	0x40023800
 8003a88:	42470000 	.word	0x42470000
 8003a8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a90:	4b88      	ldr	r3, [pc, #544]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ea      	bne.n	8003a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8097 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4b81      	ldr	r3, [pc, #516]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	4b7d      	ldr	r3, [pc, #500]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	4a7c      	ldr	r2, [pc, #496]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aca:	4b7a      	ldr	r3, [pc, #488]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b77      	ldr	r3, [pc, #476]	; (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d118      	bne.n	8003b18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae6:	4b74      	ldr	r3, [pc, #464]	; (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a73      	ldr	r2, [pc, #460]	; (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fe fbd1 	bl	8002298 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afa:	f7fe fbcd 	bl	8002298 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e10c      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x2ea>
 8003b20:	4b64      	ldr	r3, [pc, #400]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	4a63      	ldr	r2, [pc, #396]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2c:	e01c      	b.n	8003b68 <HAL_RCC_OscConfig+0x324>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x30c>
 8003b36:	4b5f      	ldr	r3, [pc, #380]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a5e      	ldr	r2, [pc, #376]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
 8003b42:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	4a5b      	ldr	r2, [pc, #364]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0x324>
 8003b50:	4b58      	ldr	r3, [pc, #352]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	4a57      	ldr	r2, [pc, #348]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5c:	4b55      	ldr	r3, [pc, #340]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	4a54      	ldr	r2, [pc, #336]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fe fb92 	bl	8002298 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fe fb8e 	bl	8002298 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e0cb      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8e:	4b49      	ldr	r3, [pc, #292]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ee      	beq.n	8003b78 <HAL_RCC_OscConfig+0x334>
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9c:	f7fe fb7c 	bl	8002298 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba4:	f7fe fb78 	bl	8002298 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e0b5      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bba:	4b3e      	ldr	r3, [pc, #248]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ee      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bcc:	4b39      	ldr	r3, [pc, #228]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	4a38      	ldr	r2, [pc, #224]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80a1 	beq.w	8003d24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be2:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d05c      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d141      	bne.n	8003c7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf6:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <HAL_RCC_OscConfig+0x478>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fb4c 	bl	8002298 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fe fb48 	bl	8002298 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e087      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	019b      	lsls	r3, r3, #6
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	041b      	lsls	r3, r3, #16
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	491b      	ldr	r1, [pc, #108]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <HAL_RCC_OscConfig+0x478>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fe fb21 	bl	8002298 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fe fb1d 	bl	8002298 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e05c      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x416>
 8003c78:	e054      	b.n	8003d24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <HAL_RCC_OscConfig+0x478>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe fb0a 	bl	8002298 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe fb06 	bl	8002298 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e045      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x444>
 8003ca6:	e03d      	b.n	8003d24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d107      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e038      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40007000 	.word	0x40007000
 8003cbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <HAL_RCC_OscConfig+0x4ec>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d028      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d121      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d11a      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d111      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800

08003d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0cc      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d48:	4b68      	ldr	r3, [pc, #416]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d90c      	bls.n	8003d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b65      	ldr	r3, [pc, #404]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b63      	ldr	r3, [pc, #396]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0b8      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d020      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d88:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da0:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a52      	ldr	r2, [pc, #328]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	494d      	ldr	r1, [pc, #308]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d044      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d119      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e07f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df2:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e02:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e067      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e12:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 0203 	bic.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4934      	ldr	r1, [pc, #208]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e24:	f7fe fa38 	bl	8002298 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2c:	f7fe fa34 	bl	8002298 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e04f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 020c 	and.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1eb      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d20c      	bcs.n	8003e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b22      	ldr	r3, [pc, #136]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e032      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4916      	ldr	r1, [pc, #88]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eba:	f000 f821 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	490a      	ldr	r1, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	5ccb      	ldrb	r3, [r1, r3]
 8003ece:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe f998 	bl	8002210 <HAL_InitTick>

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40023c00 	.word	0x40023c00
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	0800a474 	.word	0x0800a474
 8003ef8:	20000010 	.word	0x20000010
 8003efc:	20000014 	.word	0x20000014

08003f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f04:	b094      	sub	sp, #80	; 0x50
 8003f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f10:	2300      	movs	r3, #0
 8003f12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f18:	4b79      	ldr	r3, [pc, #484]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d00d      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x40>
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	f200 80e1 	bhi.w	80040ec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d003      	beq.n	8003f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f32:	e0db      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b73      	ldr	r3, [pc, #460]	; (8004104 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f38:	e0db      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f3a:	4b73      	ldr	r3, [pc, #460]	; (8004108 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f3e:	e0d8      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f40:	4b6f      	ldr	r3, [pc, #444]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f4a:	4b6d      	ldr	r3, [pc, #436]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d063      	beq.n	800401e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f56:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	099b      	lsrs	r3, r3, #6
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f72:	4622      	mov	r2, r4
 8003f74:	462b      	mov	r3, r5
 8003f76:	f04f 0000 	mov.w	r0, #0
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	0159      	lsls	r1, r3, #5
 8003f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f84:	0150      	lsls	r0, r2, #5
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	1a51      	subs	r1, r2, r1
 8003f8e:	6139      	str	r1, [r7, #16]
 8003f90:	4629      	mov	r1, r5
 8003f92:	eb63 0301 	sbc.w	r3, r3, r1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa4:	4659      	mov	r1, fp
 8003fa6:	018b      	lsls	r3, r1, #6
 8003fa8:	4651      	mov	r1, sl
 8003faa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fae:	4651      	mov	r1, sl
 8003fb0:	018a      	lsls	r2, r1, #6
 8003fb2:	4651      	mov	r1, sl
 8003fb4:	ebb2 0801 	subs.w	r8, r2, r1
 8003fb8:	4659      	mov	r1, fp
 8003fba:	eb63 0901 	sbc.w	r9, r3, r1
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd2:	4690      	mov	r8, r2
 8003fd4:	4699      	mov	r9, r3
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	eb18 0303 	adds.w	r3, r8, r3
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	462b      	mov	r3, r5
 8003fe0:	eb49 0303 	adc.w	r3, r9, r3
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	024b      	lsls	r3, r1, #9
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	024a      	lsls	r2, r1, #9
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004006:	2200      	movs	r2, #0
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
 800400a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800400c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004010:	f7fc fe42 	bl	8000c98 <__aeabi_uldivmod>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4613      	mov	r3, r2
 800401a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800401c:	e058      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401e:	4b38      	ldr	r3, [pc, #224]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	099b      	lsrs	r3, r3, #6
 8004024:	2200      	movs	r2, #0
 8004026:	4618      	mov	r0, r3
 8004028:	4611      	mov	r1, r2
 800402a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
 8004034:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004038:	4642      	mov	r2, r8
 800403a:	464b      	mov	r3, r9
 800403c:	f04f 0000 	mov.w	r0, #0
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	0159      	lsls	r1, r3, #5
 8004046:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800404a:	0150      	lsls	r0, r2, #5
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4641      	mov	r1, r8
 8004052:	ebb2 0a01 	subs.w	sl, r2, r1
 8004056:	4649      	mov	r1, r9
 8004058:	eb63 0b01 	sbc.w	fp, r3, r1
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004068:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800406c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004070:	ebb2 040a 	subs.w	r4, r2, sl
 8004074:	eb63 050b 	sbc.w	r5, r3, fp
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	00eb      	lsls	r3, r5, #3
 8004082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004086:	00e2      	lsls	r2, r4, #3
 8004088:	4614      	mov	r4, r2
 800408a:	461d      	mov	r5, r3
 800408c:	4643      	mov	r3, r8
 800408e:	18e3      	adds	r3, r4, r3
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	464b      	mov	r3, r9
 8004094:	eb45 0303 	adc.w	r3, r5, r3
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040a6:	4629      	mov	r1, r5
 80040a8:	028b      	lsls	r3, r1, #10
 80040aa:	4621      	mov	r1, r4
 80040ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b0:	4621      	mov	r1, r4
 80040b2:	028a      	lsls	r2, r1, #10
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ba:	2200      	movs	r2, #0
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	61fa      	str	r2, [r7, #28]
 80040c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c4:	f7fc fde8 	bl	8000c98 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4613      	mov	r3, r2
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ea:	e002      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3750      	adds	r7, #80	; 0x50
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	00f42400 	.word	0x00f42400
 8004108:	007a1200 	.word	0x007a1200

0800410c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <HAL_RCC_GetHCLKFreq+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000010 	.word	0x20000010

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004128:	f7ff fff0 	bl	800410c <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a9b      	lsrs	r3, r3, #10
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4903      	ldr	r1, [pc, #12]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	0800a484 	.word	0x0800a484

0800414c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004150:	f7ff ffdc 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0b5b      	lsrs	r3, r3, #13
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	0800a484 	.word	0x0800a484

08004174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e041      	b.n	800420a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fd fe12 	bl	8001dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f000 fac0 	bl	8004738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e041      	b.n	80042a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f839 	bl	80042b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
 800424e:	4619      	mov	r1, r3
 8004250:	4610      	mov	r0, r2
 8004252:	f000 fa71 	bl	8004738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_TIM_PWM_Start+0x24>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e022      	b.n	800432e <HAL_TIM_PWM_Start+0x6a>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d109      	bne.n	8004302 <HAL_TIM_PWM_Start+0x3e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e015      	b.n	800432e <HAL_TIM_PWM_Start+0x6a>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d109      	bne.n	800431c <HAL_TIM_PWM_Start+0x58>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e008      	b.n	800432e <HAL_TIM_PWM_Start+0x6a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e068      	b.n	8004408 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d104      	bne.n	8004346 <HAL_TIM_PWM_Start+0x82>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004344:	e013      	b.n	800436e <HAL_TIM_PWM_Start+0xaa>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d104      	bne.n	8004356 <HAL_TIM_PWM_Start+0x92>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004354:	e00b      	b.n	800436e <HAL_TIM_PWM_Start+0xaa>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d104      	bne.n	8004366 <HAL_TIM_PWM_Start+0xa2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004364:	e003      	b.n	800436e <HAL_TIM_PWM_Start+0xaa>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2201      	movs	r2, #1
 8004374:	6839      	ldr	r1, [r7, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fc84 	bl	8004c84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a23      	ldr	r2, [pc, #140]	; (8004410 <HAL_TIM_PWM_Start+0x14c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d107      	bne.n	8004396 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <HAL_TIM_PWM_Start+0x14c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d018      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x10e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d013      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x10e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a19      	ldr	r2, [pc, #100]	; (8004414 <HAL_TIM_PWM_Start+0x150>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x10e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a17      	ldr	r2, [pc, #92]	; (8004418 <HAL_TIM_PWM_Start+0x154>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x10e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_TIM_PWM_Start+0x158>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x10e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a14      	ldr	r2, [pc, #80]	; (8004420 <HAL_TIM_PWM_Start+0x15c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d111      	bne.n	80043f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b06      	cmp	r3, #6
 80043e2:	d010      	beq.n	8004406 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	e007      	b.n	8004406 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40010000 	.word	0x40010000
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800
 800441c:	40000c00 	.word	0x40000c00
 8004420:	40014000 	.word	0x40014000

08004424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800443e:	2302      	movs	r3, #2
 8004440:	e0ae      	b.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b0c      	cmp	r3, #12
 800444e:	f200 809f 	bhi.w	8004590 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004452:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	0800448d 	.word	0x0800448d
 800445c:	08004591 	.word	0x08004591
 8004460:	08004591 	.word	0x08004591
 8004464:	08004591 	.word	0x08004591
 8004468:	080044cd 	.word	0x080044cd
 800446c:	08004591 	.word	0x08004591
 8004470:	08004591 	.word	0x08004591
 8004474:	08004591 	.word	0x08004591
 8004478:	0800450f 	.word	0x0800450f
 800447c:	08004591 	.word	0x08004591
 8004480:	08004591 	.word	0x08004591
 8004484:	08004591 	.word	0x08004591
 8004488:	0800454f 	.word	0x0800454f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f9d0 	bl	8004838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0208 	orr.w	r2, r2, #8
 80044a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0204 	bic.w	r2, r2, #4
 80044b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6999      	ldr	r1, [r3, #24]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	619a      	str	r2, [r3, #24]
      break;
 80044ca:	e064      	b.n	8004596 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fa16 	bl	8004904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6999      	ldr	r1, [r3, #24]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	619a      	str	r2, [r3, #24]
      break;
 800450c:	e043      	b.n	8004596 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fa61 	bl	80049dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0208 	orr.w	r2, r2, #8
 8004528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0204 	bic.w	r2, r2, #4
 8004538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69d9      	ldr	r1, [r3, #28]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	61da      	str	r2, [r3, #28]
      break;
 800454c:	e023      	b.n	8004596 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 faab 	bl	8004ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69d9      	ldr	r1, [r3, #28]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	021a      	lsls	r2, r3, #8
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	61da      	str	r2, [r3, #28]
      break;
 800458e:	e002      	b.n	8004596 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	75fb      	strb	r3, [r7, #23]
      break;
 8004594:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800459e:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_TIM_ConfigClockSource+0x1c>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e0b4      	b.n	800472e <HAL_TIM_ConfigClockSource+0x186>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fc:	d03e      	beq.n	800467c <HAL_TIM_ConfigClockSource+0xd4>
 80045fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004602:	f200 8087 	bhi.w	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460a:	f000 8086 	beq.w	800471a <HAL_TIM_ConfigClockSource+0x172>
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004612:	d87f      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 8004614:	2b70      	cmp	r3, #112	; 0x70
 8004616:	d01a      	beq.n	800464e <HAL_TIM_ConfigClockSource+0xa6>
 8004618:	2b70      	cmp	r3, #112	; 0x70
 800461a:	d87b      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 800461c:	2b60      	cmp	r3, #96	; 0x60
 800461e:	d050      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004620:	2b60      	cmp	r3, #96	; 0x60
 8004622:	d877      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 8004624:	2b50      	cmp	r3, #80	; 0x50
 8004626:	d03c      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004628:	2b50      	cmp	r3, #80	; 0x50
 800462a:	d873      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d058      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d86f      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 8004634:	2b30      	cmp	r3, #48	; 0x30
 8004636:	d064      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x15a>
 8004638:	2b30      	cmp	r3, #48	; 0x30
 800463a:	d86b      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 800463c:	2b20      	cmp	r3, #32
 800463e:	d060      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x15a>
 8004640:	2b20      	cmp	r3, #32
 8004642:	d867      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 8004644:	2b00      	cmp	r3, #0
 8004646:	d05c      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x15a>
 8004648:	2b10      	cmp	r3, #16
 800464a:	d05a      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x15a>
 800464c:	e062      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6899      	ldr	r1, [r3, #8]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f000 faf1 	bl	8004c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	609a      	str	r2, [r3, #8]
      break;
 800467a:	e04f      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	6899      	ldr	r1, [r3, #8]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f000 fada 	bl	8004c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800469e:	609a      	str	r2, [r3, #8]
      break;
 80046a0:	e03c      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f000 fa4e 	bl	8004b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2150      	movs	r1, #80	; 0x50
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 faa7 	bl	8004c0e <TIM_ITRx_SetConfig>
      break;
 80046c0:	e02c      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6859      	ldr	r1, [r3, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f000 fa6d 	bl	8004bae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2160      	movs	r1, #96	; 0x60
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fa97 	bl	8004c0e <TIM_ITRx_SetConfig>
      break;
 80046e0:	e01c      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6859      	ldr	r1, [r3, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	461a      	mov	r2, r3
 80046f0:	f000 fa2e 	bl	8004b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2140      	movs	r1, #64	; 0x40
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fa87 	bl	8004c0e <TIM_ITRx_SetConfig>
      break;
 8004700:	e00c      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f000 fa7e 	bl	8004c0e <TIM_ITRx_SetConfig>
      break;
 8004712:	e003      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      break;
 8004718:	e000      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800471a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800472c:	7bfb      	ldrb	r3, [r7, #15]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a34      	ldr	r2, [pc, #208]	; (800481c <TIM_Base_SetConfig+0xe4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00f      	beq.n	8004770 <TIM_Base_SetConfig+0x38>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004756:	d00b      	beq.n	8004770 <TIM_Base_SetConfig+0x38>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a31      	ldr	r2, [pc, #196]	; (8004820 <TIM_Base_SetConfig+0xe8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d007      	beq.n	8004770 <TIM_Base_SetConfig+0x38>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a30      	ldr	r2, [pc, #192]	; (8004824 <TIM_Base_SetConfig+0xec>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_Base_SetConfig+0x38>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <TIM_Base_SetConfig+0xf0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d108      	bne.n	8004782 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a25      	ldr	r2, [pc, #148]	; (800481c <TIM_Base_SetConfig+0xe4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d01b      	beq.n	80047c2 <TIM_Base_SetConfig+0x8a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004790:	d017      	beq.n	80047c2 <TIM_Base_SetConfig+0x8a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a22      	ldr	r2, [pc, #136]	; (8004820 <TIM_Base_SetConfig+0xe8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <TIM_Base_SetConfig+0x8a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a21      	ldr	r2, [pc, #132]	; (8004824 <TIM_Base_SetConfig+0xec>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00f      	beq.n	80047c2 <TIM_Base_SetConfig+0x8a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a20      	ldr	r2, [pc, #128]	; (8004828 <TIM_Base_SetConfig+0xf0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00b      	beq.n	80047c2 <TIM_Base_SetConfig+0x8a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1f      	ldr	r2, [pc, #124]	; (800482c <TIM_Base_SetConfig+0xf4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d007      	beq.n	80047c2 <TIM_Base_SetConfig+0x8a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <TIM_Base_SetConfig+0xf8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d003      	beq.n	80047c2 <TIM_Base_SetConfig+0x8a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <TIM_Base_SetConfig+0xfc>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d108      	bne.n	80047d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a08      	ldr	r2, [pc, #32]	; (800481c <TIM_Base_SetConfig+0xe4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d103      	bne.n	8004808 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	615a      	str	r2, [r3, #20]
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40010000 	.word	0x40010000
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40000c00 	.word	0x40000c00
 800482c:	40014000 	.word	0x40014000
 8004830:	40014400 	.word	0x40014400
 8004834:	40014800 	.word	0x40014800

08004838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 0302 	bic.w	r3, r3, #2
 8004880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <TIM_OC1_SetConfig+0xc8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d10c      	bne.n	80048ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f023 0308 	bic.w	r3, r3, #8
 800489a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f023 0304 	bic.w	r3, r3, #4
 80048ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a13      	ldr	r2, [pc, #76]	; (8004900 <TIM_OC1_SetConfig+0xc8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d111      	bne.n	80048da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	621a      	str	r2, [r3, #32]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40010000 	.word	0x40010000

08004904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0210 	bic.w	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0320 	bic.w	r3, r3, #32
 800494e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <TIM_OC2_SetConfig+0xd4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d10d      	bne.n	8004980 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800496a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <TIM_OC2_SetConfig+0xd4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d113      	bne.n	80049b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800498e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40010000 	.word	0x40010000

080049dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1d      	ldr	r2, [pc, #116]	; (8004aac <TIM_OC3_SetConfig+0xd0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d10d      	bne.n	8004a56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a14      	ldr	r2, [pc, #80]	; (8004aac <TIM_OC3_SetConfig+0xd0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d113      	bne.n	8004a86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40010000 	.word	0x40010000

08004ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	031b      	lsls	r3, r3, #12
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a10      	ldr	r2, [pc, #64]	; (8004b4c <TIM_OC4_SetConfig+0x9c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d109      	bne.n	8004b24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	019b      	lsls	r3, r3, #6
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	621a      	str	r2, [r3, #32]
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40010000 	.word	0x40010000

08004b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f023 0201 	bic.w	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f023 030a 	bic.w	r3, r3, #10
 8004b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	621a      	str	r2, [r3, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b087      	sub	sp, #28
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f023 0210 	bic.w	r2, r3, #16
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	031b      	lsls	r3, r3, #12
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f043 0307 	orr.w	r3, r3, #7
 8004c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	609a      	str	r2, [r3, #8]
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	021a      	lsls	r2, r3, #8
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	609a      	str	r2, [r3, #8]
}
 8004c78:	bf00      	nop
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	2201      	movs	r2, #1
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a1a      	ldr	r2, [r3, #32]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	401a      	ands	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a1a      	ldr	r2, [r3, #32]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e050      	b.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d018      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d34:	d013      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d009      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a13      	ldr	r2, [pc, #76]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10c      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800
 8004da4:	40000c00 	.word	0x40000c00
 8004da8:	40014000 	.word	0x40014000

08004dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e03f      	b.n	8004e3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fd f886 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2224      	movs	r2, #36	; 0x24
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f929 	bl	8005048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b08a      	sub	sp, #40	; 0x28
 8004e4a:	af02      	add	r7, sp, #8
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	4613      	mov	r3, r2
 8004e54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d17c      	bne.n	8004f60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_UART_Transmit+0x2c>
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e075      	b.n	8004f62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_UART_Transmit+0x3e>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e06e      	b.n	8004f62 <HAL_UART_Transmit+0x11c>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2221      	movs	r2, #33	; 0x21
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e9a:	f7fd f9fd 	bl	8002298 <HAL_GetTick>
 8004e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	88fa      	ldrh	r2, [r7, #6]
 8004ea4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	88fa      	ldrh	r2, [r7, #6]
 8004eaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb4:	d108      	bne.n	8004ec8 <HAL_UART_Transmit+0x82>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d104      	bne.n	8004ec8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	e003      	b.n	8004ed0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ed8:	e02a      	b.n	8004f30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2180      	movs	r1, #128	; 0x80
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f840 	bl	8004f6a <UART_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e036      	b.n	8004f62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	e007      	b.n	8004f22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1cf      	bne.n	8004eda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2200      	movs	r2, #0
 8004f42:	2140      	movs	r1, #64	; 0x40
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 f810 	bl	8004f6a <UART_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e006      	b.n	8004f62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e000      	b.n	8004f62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f60:	2302      	movs	r3, #2
  }
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b090      	sub	sp, #64	; 0x40
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	603b      	str	r3, [r7, #0]
 8004f76:	4613      	mov	r3, r2
 8004f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7a:	e050      	b.n	800501e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f82:	d04c      	beq.n	800501e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f8a:	f7fd f985 	bl	8002298 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d241      	bcs.n	800501e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fba:	637a      	str	r2, [r7, #52]	; 0x34
 8004fbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e5      	bne.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3314      	adds	r3, #20
 8004fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3314      	adds	r3, #20
 8004fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fee:	623a      	str	r2, [r7, #32]
 8004ff0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	69f9      	ldr	r1, [r7, #28]
 8004ff4:	6a3a      	ldr	r2, [r7, #32]
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e5      	bne.n	8004fce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e00f      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4013      	ands	r3, r2
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	429a      	cmp	r2, r3
 800502c:	bf0c      	ite	eq
 800502e:	2301      	moveq	r3, #1
 8005030:	2300      	movne	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	429a      	cmp	r2, r3
 800503a:	d09f      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3740      	adds	r7, #64	; 0x40
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800504c:	b0c0      	sub	sp, #256	; 0x100
 800504e:	af00      	add	r7, sp, #0
 8005050:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	68d9      	ldr	r1, [r3, #12]
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	ea40 0301 	orr.w	r3, r0, r1
 8005070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	431a      	orrs	r2, r3
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	431a      	orrs	r2, r3
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050a0:	f021 010c 	bic.w	r1, r1, #12
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ae:	430b      	orrs	r3, r1
 80050b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c2:	6999      	ldr	r1, [r3, #24]
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	ea40 0301 	orr.w	r3, r0, r1
 80050ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b8f      	ldr	r3, [pc, #572]	; (8005314 <UART_SetConfig+0x2cc>)
 80050d8:	429a      	cmp	r2, r3
 80050da:	d005      	beq.n	80050e8 <UART_SetConfig+0xa0>
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b8d      	ldr	r3, [pc, #564]	; (8005318 <UART_SetConfig+0x2d0>)
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d104      	bne.n	80050f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050e8:	f7ff f830 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 80050ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050f0:	e003      	b.n	80050fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050f2:	f7ff f817 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 80050f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005104:	f040 810c 	bne.w	8005320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800510c:	2200      	movs	r2, #0
 800510e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005112:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800511a:	4622      	mov	r2, r4
 800511c:	462b      	mov	r3, r5
 800511e:	1891      	adds	r1, r2, r2
 8005120:	65b9      	str	r1, [r7, #88]	; 0x58
 8005122:	415b      	adcs	r3, r3
 8005124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800512a:	4621      	mov	r1, r4
 800512c:	eb12 0801 	adds.w	r8, r2, r1
 8005130:	4629      	mov	r1, r5
 8005132:	eb43 0901 	adc.w	r9, r3, r1
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800514a:	4690      	mov	r8, r2
 800514c:	4699      	mov	r9, r3
 800514e:	4623      	mov	r3, r4
 8005150:	eb18 0303 	adds.w	r3, r8, r3
 8005154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005158:	462b      	mov	r3, r5
 800515a:	eb49 0303 	adc.w	r3, r9, r3
 800515e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800516e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005176:	460b      	mov	r3, r1
 8005178:	18db      	adds	r3, r3, r3
 800517a:	653b      	str	r3, [r7, #80]	; 0x50
 800517c:	4613      	mov	r3, r2
 800517e:	eb42 0303 	adc.w	r3, r2, r3
 8005182:	657b      	str	r3, [r7, #84]	; 0x54
 8005184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800518c:	f7fb fd84 	bl	8000c98 <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4b61      	ldr	r3, [pc, #388]	; (800531c <UART_SetConfig+0x2d4>)
 8005196:	fba3 2302 	umull	r2, r3, r3, r2
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	011c      	lsls	r4, r3, #4
 800519e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051b0:	4642      	mov	r2, r8
 80051b2:	464b      	mov	r3, r9
 80051b4:	1891      	adds	r1, r2, r2
 80051b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80051b8:	415b      	adcs	r3, r3
 80051ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051c0:	4641      	mov	r1, r8
 80051c2:	eb12 0a01 	adds.w	sl, r2, r1
 80051c6:	4649      	mov	r1, r9
 80051c8:	eb43 0b01 	adc.w	fp, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051e0:	4692      	mov	sl, r2
 80051e2:	469b      	mov	fp, r3
 80051e4:	4643      	mov	r3, r8
 80051e6:	eb1a 0303 	adds.w	r3, sl, r3
 80051ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ee:	464b      	mov	r3, r9
 80051f0:	eb4b 0303 	adc.w	r3, fp, r3
 80051f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005204:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800520c:	460b      	mov	r3, r1
 800520e:	18db      	adds	r3, r3, r3
 8005210:	643b      	str	r3, [r7, #64]	; 0x40
 8005212:	4613      	mov	r3, r2
 8005214:	eb42 0303 	adc.w	r3, r2, r3
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
 800521a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800521e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005222:	f7fb fd39 	bl	8000c98 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4611      	mov	r1, r2
 800522c:	4b3b      	ldr	r3, [pc, #236]	; (800531c <UART_SetConfig+0x2d4>)
 800522e:	fba3 2301 	umull	r2, r3, r3, r1
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	2264      	movs	r2, #100	; 0x64
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	1acb      	subs	r3, r1, r3
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005242:	4b36      	ldr	r3, [pc, #216]	; (800531c <UART_SetConfig+0x2d4>)
 8005244:	fba3 2302 	umull	r2, r3, r3, r2
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005250:	441c      	add	r4, r3
 8005252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005256:	2200      	movs	r2, #0
 8005258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800525c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	1891      	adds	r1, r2, r2
 800526a:	63b9      	str	r1, [r7, #56]	; 0x38
 800526c:	415b      	adcs	r3, r3
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005274:	4641      	mov	r1, r8
 8005276:	1851      	adds	r1, r2, r1
 8005278:	6339      	str	r1, [r7, #48]	; 0x30
 800527a:	4649      	mov	r1, r9
 800527c:	414b      	adcs	r3, r1
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800528c:	4659      	mov	r1, fp
 800528e:	00cb      	lsls	r3, r1, #3
 8005290:	4651      	mov	r1, sl
 8005292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005296:	4651      	mov	r1, sl
 8005298:	00ca      	lsls	r2, r1, #3
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	4603      	mov	r3, r0
 80052a0:	4642      	mov	r2, r8
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052a8:	464b      	mov	r3, r9
 80052aa:	460a      	mov	r2, r1
 80052ac:	eb42 0303 	adc.w	r3, r2, r3
 80052b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052c8:	460b      	mov	r3, r1
 80052ca:	18db      	adds	r3, r3, r3
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ce:	4613      	mov	r3, r2
 80052d0:	eb42 0303 	adc.w	r3, r2, r3
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052de:	f7fb fcdb 	bl	8000c98 <__aeabi_uldivmod>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <UART_SetConfig+0x2d4>)
 80052e8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	2164      	movs	r1, #100	; 0x64
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	3332      	adds	r3, #50	; 0x32
 80052fa:	4a08      	ldr	r2, [pc, #32]	; (800531c <UART_SetConfig+0x2d4>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	f003 0207 	and.w	r2, r3, #7
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4422      	add	r2, r4
 800530e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005310:	e105      	b.n	800551e <UART_SetConfig+0x4d6>
 8005312:	bf00      	nop
 8005314:	40011000 	.word	0x40011000
 8005318:	40011400 	.word	0x40011400
 800531c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005324:	2200      	movs	r2, #0
 8005326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800532a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800532e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005332:	4642      	mov	r2, r8
 8005334:	464b      	mov	r3, r9
 8005336:	1891      	adds	r1, r2, r2
 8005338:	6239      	str	r1, [r7, #32]
 800533a:	415b      	adcs	r3, r3
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
 800533e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005342:	4641      	mov	r1, r8
 8005344:	1854      	adds	r4, r2, r1
 8005346:	4649      	mov	r1, r9
 8005348:	eb43 0501 	adc.w	r5, r3, r1
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	00eb      	lsls	r3, r5, #3
 8005356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800535a:	00e2      	lsls	r2, r4, #3
 800535c:	4614      	mov	r4, r2
 800535e:	461d      	mov	r5, r3
 8005360:	4643      	mov	r3, r8
 8005362:	18e3      	adds	r3, r4, r3
 8005364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005368:	464b      	mov	r3, r9
 800536a:	eb45 0303 	adc.w	r3, r5, r3
 800536e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800537e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800538e:	4629      	mov	r1, r5
 8005390:	008b      	lsls	r3, r1, #2
 8005392:	4621      	mov	r1, r4
 8005394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005398:	4621      	mov	r1, r4
 800539a:	008a      	lsls	r2, r1, #2
 800539c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053a0:	f7fb fc7a 	bl	8000c98 <__aeabi_uldivmod>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4b60      	ldr	r3, [pc, #384]	; (800552c <UART_SetConfig+0x4e4>)
 80053aa:	fba3 2302 	umull	r2, r3, r3, r2
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	011c      	lsls	r4, r3, #4
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	1891      	adds	r1, r2, r2
 80053ca:	61b9      	str	r1, [r7, #24]
 80053cc:	415b      	adcs	r3, r3
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053d4:	4641      	mov	r1, r8
 80053d6:	1851      	adds	r1, r2, r1
 80053d8:	6139      	str	r1, [r7, #16]
 80053da:	4649      	mov	r1, r9
 80053dc:	414b      	adcs	r3, r1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ec:	4659      	mov	r1, fp
 80053ee:	00cb      	lsls	r3, r1, #3
 80053f0:	4651      	mov	r1, sl
 80053f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f6:	4651      	mov	r1, sl
 80053f8:	00ca      	lsls	r2, r1, #3
 80053fa:	4610      	mov	r0, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	4642      	mov	r2, r8
 8005402:	189b      	adds	r3, r3, r2
 8005404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005408:	464b      	mov	r3, r9
 800540a:	460a      	mov	r2, r1
 800540c:	eb42 0303 	adc.w	r3, r2, r3
 8005410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	67bb      	str	r3, [r7, #120]	; 0x78
 800541e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800542c:	4649      	mov	r1, r9
 800542e:	008b      	lsls	r3, r1, #2
 8005430:	4641      	mov	r1, r8
 8005432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005436:	4641      	mov	r1, r8
 8005438:	008a      	lsls	r2, r1, #2
 800543a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800543e:	f7fb fc2b 	bl	8000c98 <__aeabi_uldivmod>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4b39      	ldr	r3, [pc, #228]	; (800552c <UART_SetConfig+0x4e4>)
 8005448:	fba3 1302 	umull	r1, r3, r3, r2
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	2164      	movs	r1, #100	; 0x64
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	3332      	adds	r3, #50	; 0x32
 800545a:	4a34      	ldr	r2, [pc, #208]	; (800552c <UART_SetConfig+0x4e4>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005466:	441c      	add	r4, r3
 8005468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800546c:	2200      	movs	r2, #0
 800546e:	673b      	str	r3, [r7, #112]	; 0x70
 8005470:	677a      	str	r2, [r7, #116]	; 0x74
 8005472:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005476:	4642      	mov	r2, r8
 8005478:	464b      	mov	r3, r9
 800547a:	1891      	adds	r1, r2, r2
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	415b      	adcs	r3, r3
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005486:	4641      	mov	r1, r8
 8005488:	1851      	adds	r1, r2, r1
 800548a:	6039      	str	r1, [r7, #0]
 800548c:	4649      	mov	r1, r9
 800548e:	414b      	adcs	r3, r1
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800549e:	4659      	mov	r1, fp
 80054a0:	00cb      	lsls	r3, r1, #3
 80054a2:	4651      	mov	r1, sl
 80054a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054a8:	4651      	mov	r1, sl
 80054aa:	00ca      	lsls	r2, r1, #3
 80054ac:	4610      	mov	r0, r2
 80054ae:	4619      	mov	r1, r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	4642      	mov	r2, r8
 80054b4:	189b      	adds	r3, r3, r2
 80054b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b8:	464b      	mov	r3, r9
 80054ba:	460a      	mov	r2, r1
 80054bc:	eb42 0303 	adc.w	r3, r2, r3
 80054c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	663b      	str	r3, [r7, #96]	; 0x60
 80054cc:	667a      	str	r2, [r7, #100]	; 0x64
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054da:	4649      	mov	r1, r9
 80054dc:	008b      	lsls	r3, r1, #2
 80054de:	4641      	mov	r1, r8
 80054e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054e4:	4641      	mov	r1, r8
 80054e6:	008a      	lsls	r2, r1, #2
 80054e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054ec:	f7fb fbd4 	bl	8000c98 <__aeabi_uldivmod>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4b0d      	ldr	r3, [pc, #52]	; (800552c <UART_SetConfig+0x4e4>)
 80054f6:	fba3 1302 	umull	r1, r3, r3, r2
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	2164      	movs	r1, #100	; 0x64
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	3332      	adds	r3, #50	; 0x32
 8005508:	4a08      	ldr	r2, [pc, #32]	; (800552c <UART_SetConfig+0x4e4>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	f003 020f 	and.w	r2, r3, #15
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4422      	add	r2, r4
 800551c:	609a      	str	r2, [r3, #8]
}
 800551e:	bf00      	nop
 8005520:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005524:	46bd      	mov	sp, r7
 8005526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800552a:	bf00      	nop
 800552c:	51eb851f 	.word	0x51eb851f

08005530 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8005530:	b5b0      	push	{r4, r5, r7, lr}
 8005532:	b0b2      	sub	sp, #200	; 0xc8
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800553a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	609a      	str	r2, [r3, #8]
 8005546:	60da      	str	r2, [r3, #12]
 8005548:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800554a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	609a      	str	r2, [r3, #8]
 8005556:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005558:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8005562:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	605a      	str	r2, [r3, #4]
 800556c:	609a      	str	r2, [r3, #8]
 800556e:	60da      	str	r2, [r3, #12]
 8005570:	611a      	str	r2, [r3, #16]
 8005572:	615a      	str	r2, [r3, #20]
 8005574:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t ARR_Value = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    DWT_Delay_Init();
 8005582:	f000 fa55 	bl	8005a30 <DWT_Delay_Init>

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOA)
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	4a8e      	ldr	r2, [pc, #568]	; (80057c4 <SERVO_Init+0x294>)
 800558a:	015b      	lsls	r3, r3, #5
 800558c:	4413      	add	r3, r2
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a8d      	ldr	r2, [pc, #564]	; (80057c8 <SERVO_Init+0x298>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d10e      	bne.n	80055b4 <SERVO_Init+0x84>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559a:	4b8c      	ldr	r3, [pc, #560]	; (80057cc <SERVO_Init+0x29c>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	4a8b      	ldr	r2, [pc, #556]	; (80057cc <SERVO_Init+0x29c>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	6313      	str	r3, [r2, #48]	; 0x30
 80055a6:	4b89      	ldr	r3, [pc, #548]	; (80057cc <SERVO_Init+0x29c>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	e05a      	b.n	800566a <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOB)
 80055b4:	88fb      	ldrh	r3, [r7, #6]
 80055b6:	4a83      	ldr	r2, [pc, #524]	; (80057c4 <SERVO_Init+0x294>)
 80055b8:	015b      	lsls	r3, r3, #5
 80055ba:	4413      	add	r3, r2
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a84      	ldr	r2, [pc, #528]	; (80057d0 <SERVO_Init+0x2a0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d10e      	bne.n	80055e2 <SERVO_Init+0xb2>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 80055c4:	2300      	movs	r3, #0
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c8:	4b80      	ldr	r3, [pc, #512]	; (80057cc <SERVO_Init+0x29c>)
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	4a7f      	ldr	r2, [pc, #508]	; (80057cc <SERVO_Init+0x29c>)
 80055ce:	f043 0302 	orr.w	r3, r3, #2
 80055d2:	6313      	str	r3, [r2, #48]	; 0x30
 80055d4:	4b7d      	ldr	r3, [pc, #500]	; (80057cc <SERVO_Init+0x29c>)
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	e043      	b.n	800566a <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOC)
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	4a77      	ldr	r2, [pc, #476]	; (80057c4 <SERVO_Init+0x294>)
 80055e6:	015b      	lsls	r3, r3, #5
 80055e8:	4413      	add	r3, r2
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a79      	ldr	r2, [pc, #484]	; (80057d4 <SERVO_Init+0x2a4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d10e      	bne.n	8005610 <SERVO_Init+0xe0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80055f2:	2300      	movs	r3, #0
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
 80055f6:	4b75      	ldr	r3, [pc, #468]	; (80057cc <SERVO_Init+0x29c>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	4a74      	ldr	r2, [pc, #464]	; (80057cc <SERVO_Init+0x29c>)
 80055fc:	f043 0304 	orr.w	r3, r3, #4
 8005600:	6313      	str	r3, [r2, #48]	; 0x30
 8005602:	4b72      	ldr	r3, [pc, #456]	; (80057cc <SERVO_Init+0x29c>)
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	e02c      	b.n	800566a <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOD)
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	4a6c      	ldr	r2, [pc, #432]	; (80057c4 <SERVO_Init+0x294>)
 8005614:	015b      	lsls	r3, r3, #5
 8005616:	4413      	add	r3, r2
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a6f      	ldr	r2, [pc, #444]	; (80057d8 <SERVO_Init+0x2a8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10e      	bne.n	800563e <SERVO_Init+0x10e>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8005620:	2300      	movs	r3, #0
 8005622:	623b      	str	r3, [r7, #32]
 8005624:	4b69      	ldr	r3, [pc, #420]	; (80057cc <SERVO_Init+0x29c>)
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	4a68      	ldr	r2, [pc, #416]	; (80057cc <SERVO_Init+0x29c>)
 800562a:	f043 0308 	orr.w	r3, r3, #8
 800562e:	6313      	str	r3, [r2, #48]	; 0x30
 8005630:	4b66      	ldr	r3, [pc, #408]	; (80057cc <SERVO_Init+0x29c>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	e015      	b.n	800566a <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOE)
 800563e:	88fb      	ldrh	r3, [r7, #6]
 8005640:	4a60      	ldr	r2, [pc, #384]	; (80057c4 <SERVO_Init+0x294>)
 8005642:	015b      	lsls	r3, r3, #5
 8005644:	4413      	add	r3, r2
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a64      	ldr	r2, [pc, #400]	; (80057dc <SERVO_Init+0x2ac>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d10d      	bne.n	800566a <SERVO_Init+0x13a>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	4b5e      	ldr	r3, [pc, #376]	; (80057cc <SERVO_Init+0x29c>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	4a5d      	ldr	r2, [pc, #372]	; (80057cc <SERVO_Init+0x29c>)
 8005658:	f043 0310 	orr.w	r3, r3, #16
 800565c:	6313      	str	r3, [r2, #48]	; 0x30
 800565e:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <SERVO_Init+0x29c>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	61fb      	str	r3, [r7, #28]
 8005668:	69fb      	ldr	r3, [r7, #28]
    }
	GPIO_InitStruct.Pin = SERVO_CfgParam[au16_SERVO_Instance].SERVO_PIN;
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	4a55      	ldr	r2, [pc, #340]	; (80057c4 <SERVO_Init+0x294>)
 800566e:	015b      	lsls	r3, r3, #5
 8005670:	4413      	add	r3, r2
 8005672:	3304      	adds	r3, #4
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567a:	2302      	movs	r3, #2
 800567c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005680:	2300      	movs	r3, #0
 8005682:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	4a4e      	ldr	r2, [pc, #312]	; (80057c4 <SERVO_Init+0x294>)
 800568a:	015b      	lsls	r3, r3, #5
 800568c:	4413      	add	r3, r2
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005694:	4611      	mov	r1, r2
 8005696:	4618      	mov	r0, r3
 8005698:	f7fd fad2 	bl	8002c40 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	4a49      	ldr	r2, [pc, #292]	; (80057c4 <SERVO_Init+0x294>)
 80056a0:	015b      	lsls	r3, r3, #5
 80056a2:	4413      	add	r3, r2
 80056a4:	3314      	adds	r3, #20
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fa ff33 	bl	8000514 <__aeabi_ui2d>
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	4b4b      	ldr	r3, [pc, #300]	; (80057e0 <SERVO_Init+0x2b0>)
 80056b4:	f7fb f8d2 	bl	800085c <__aeabi_ddiv>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4610      	mov	r0, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	f7fb fa7a 	bl	8000bb8 <__aeabi_d2uiz>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	4a3d      	ldr	r2, [pc, #244]	; (80057c4 <SERVO_Init+0x294>)
 80056ce:	015b      	lsls	r3, r3, #5
 80056d0:	4413      	add	r3, r2
 80056d2:	3314      	adds	r3, #20
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fa ff1c 	bl	8000514 <__aeabi_ui2d>
 80056dc:	4604      	mov	r4, r0
 80056de:	460d      	mov	r5, r1
 80056e0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80056e4:	f7fa ff16 	bl	8000514 <__aeabi_ui2d>
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	4b3d      	ldr	r3, [pc, #244]	; (80057e4 <SERVO_Init+0x2b4>)
 80056ee:	f7fa fdd5 	bl	800029c <__adddf3>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4610      	mov	r0, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <SERVO_Init+0x2b8>)
 8005700:	f7fa ff82 	bl	8000608 <__aeabi_dmul>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4620      	mov	r0, r4
 800570a:	4629      	mov	r1, r5
 800570c:	f7fb f8a6 	bl	800085c <__aeabi_ddiv>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4610      	mov	r0, r2
 8005716:	4619      	mov	r1, r3
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	4b31      	ldr	r3, [pc, #196]	; (80057e4 <SERVO_Init+0x2b4>)
 800571e:	f7fa fdbb 	bl	8000298 <__aeabi_dsub>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4610      	mov	r0, r2
 8005728:	4619      	mov	r1, r3
 800572a:	f7fb fa45 	bl	8000bb8 <__aeabi_d2uiz>
 800572e:	4603      	mov	r3, r0
 8005730:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 8005734:	88fb      	ldrh	r3, [r7, #6]
 8005736:	4a23      	ldr	r2, [pc, #140]	; (80057c4 <SERVO_Init+0x294>)
 8005738:	015b      	lsls	r3, r3, #5
 800573a:	4413      	add	r3, r2
 800573c:	3308      	adds	r3, #8
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2a      	ldr	r2, [pc, #168]	; (80057ec <SERVO_Init+0x2bc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10e      	bne.n	8005764 <SERVO_Init+0x234>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8005746:	2300      	movs	r3, #0
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	4b20      	ldr	r3, [pc, #128]	; (80057cc <SERVO_Init+0x29c>)
 800574c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574e:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <SERVO_Init+0x29c>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	6453      	str	r3, [r2, #68]	; 0x44
 8005756:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <SERVO_Init+0x29c>)
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	e05e      	b.n	8005822 <SERVO_Init+0x2f2>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	4a17      	ldr	r2, [pc, #92]	; (80057c4 <SERVO_Init+0x294>)
 8005768:	015b      	lsls	r3, r3, #5
 800576a:	4413      	add	r3, r2
 800576c:	3308      	adds	r3, #8
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005774:	d10e      	bne.n	8005794 <SERVO_Init+0x264>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	4b14      	ldr	r3, [pc, #80]	; (80057cc <SERVO_Init+0x29c>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	4a13      	ldr	r2, [pc, #76]	; (80057cc <SERVO_Init+0x29c>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6413      	str	r3, [r2, #64]	; 0x40
 8005786:	4b11      	ldr	r3, [pc, #68]	; (80057cc <SERVO_Init+0x29c>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	e046      	b.n	8005822 <SERVO_Init+0x2f2>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	4a0b      	ldr	r2, [pc, #44]	; (80057c4 <SERVO_Init+0x294>)
 8005798:	015b      	lsls	r3, r3, #5
 800579a:	4413      	add	r3, r2
 800579c:	3308      	adds	r3, #8
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a13      	ldr	r2, [pc, #76]	; (80057f0 <SERVO_Init+0x2c0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d126      	bne.n	80057f4 <SERVO_Init+0x2c4>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	4b08      	ldr	r3, [pc, #32]	; (80057cc <SERVO_Init+0x29c>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	4a07      	ldr	r2, [pc, #28]	; (80057cc <SERVO_Init+0x29c>)
 80057b0:	f043 0302 	orr.w	r3, r3, #2
 80057b4:	6413      	str	r3, [r2, #64]	; 0x40
 80057b6:	4b05      	ldr	r3, [pc, #20]	; (80057cc <SERVO_Init+0x29c>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	e02e      	b.n	8005822 <SERVO_Init+0x2f2>
 80057c4:	0800a48c 	.word	0x0800a48c
 80057c8:	40020000 	.word	0x40020000
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40020400 	.word	0x40020400
 80057d4:	40020800 	.word	0x40020800
 80057d8:	40020c00 	.word	0x40020c00
 80057dc:	40021000 	.word	0x40021000
 80057e0:	41490000 	.word	0x41490000
 80057e4:	3ff00000 	.word	0x3ff00000
 80057e8:	40490000 	.word	0x40490000
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40000400 	.word	0x40000400
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	4a61      	ldr	r2, [pc, #388]	; (800597c <SERVO_Init+0x44c>)
 80057f8:	015b      	lsls	r3, r3, #5
 80057fa:	4413      	add	r3, r2
 80057fc:	3308      	adds	r3, #8
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a5f      	ldr	r2, [pc, #380]	; (8005980 <SERVO_Init+0x450>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d10d      	bne.n	8005822 <SERVO_Init+0x2f2>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	4b5e      	ldr	r3, [pc, #376]	; (8005984 <SERVO_Init+0x454>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	4a5d      	ldr	r2, [pc, #372]	; (8005984 <SERVO_Init+0x454>)
 8005810:	f043 0304 	orr.w	r3, r3, #4
 8005814:	6413      	str	r3, [r2, #64]	; 0x40
 8005816:	4b5b      	ldr	r3, [pc, #364]	; (8005984 <SERVO_Init+0x454>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	4a55      	ldr	r2, [pc, #340]	; (800597c <SERVO_Init+0x44c>)
 8005826:	015b      	lsls	r3, r3, #5
 8005828:	4413      	add	r3, r2
 800582a:	3308      	adds	r3, #8
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.Prescaler = PSC_Value;
 8005830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005836:	2300      	movs	r3, #0
 8005838:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.Period = ARR_Value;
 800583a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005840:	2300      	movs	r3, #0
 8005842:	643b      	str	r3, [r7, #64]	; 0x40
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_TIM_Base_Init(&htim);
 8005848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800584c:	4618      	mov	r0, r3
 800584e:	f7fe fc91 	bl	8004174 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800585a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800585e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005862:	4611      	mov	r1, r2
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe fe9f 	bl	80045a8 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800586a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe fccf 	bl	8004212 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005874:	2300      	movs	r3, #0
 8005876:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800587a:	2300      	movs	r3, #0
 800587c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8005880:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8005884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005888:	4611      	mov	r1, r2
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fa20 	bl	8004cd0 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005890:	2360      	movs	r3, #96	; 0x60
 8005892:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.Pulse = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800589e:	2300      	movs	r3, #0
 80058a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	4a35      	ldr	r2, [pc, #212]	; (800597c <SERVO_Init+0x44c>)
 80058a8:	015b      	lsls	r3, r3, #5
 80058aa:	4413      	add	r3, r2
 80058ac:	3310      	adds	r3, #16
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80058b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fe fdb3 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 80058be:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80058c2:	f7fa fe27 	bl	8000514 <__aeabi_ui2d>
 80058c6:	4604      	mov	r4, r0
 80058c8:	460d      	mov	r5, r1
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	4a2b      	ldr	r2, [pc, #172]	; (800597c <SERVO_Init+0x44c>)
 80058ce:	015b      	lsls	r3, r3, #5
 80058d0:	4413      	add	r3, r2
 80058d2:	3318      	adds	r3, #24
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fa fe3e 	bl	8000558 <__aeabi_f2d>
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	4b29      	ldr	r3, [pc, #164]	; (8005988 <SERVO_Init+0x458>)
 80058e2:	f7fa ffbb 	bl	800085c <__aeabi_ddiv>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4620      	mov	r0, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7fa fe8b 	bl	8000608 <__aeabi_dmul>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	88fc      	ldrh	r4, [r7, #6]
 80058f8:	4610      	mov	r0, r2
 80058fa:	4619      	mov	r1, r3
 80058fc:	f7fb f95c 	bl	8000bb8 <__aeabi_d2uiz>
 8005900:	4603      	mov	r3, r0
 8005902:	b29a      	uxth	r2, r3
 8005904:	4b21      	ldr	r3, [pc, #132]	; (800598c <SERVO_Init+0x45c>)
 8005906:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 800590a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800590e:	f7fa fe01 	bl	8000514 <__aeabi_ui2d>
 8005912:	4604      	mov	r4, r0
 8005914:	460d      	mov	r5, r1
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	4a18      	ldr	r2, [pc, #96]	; (800597c <SERVO_Init+0x44c>)
 800591a:	015b      	lsls	r3, r3, #5
 800591c:	4413      	add	r3, r2
 800591e:	331c      	adds	r3, #28
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f7fa fe18 	bl	8000558 <__aeabi_f2d>
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	4b16      	ldr	r3, [pc, #88]	; (8005988 <SERVO_Init+0x458>)
 800592e:	f7fa ff95 	bl	800085c <__aeabi_ddiv>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4620      	mov	r0, r4
 8005938:	4629      	mov	r1, r5
 800593a:	f7fa fe65 	bl	8000608 <__aeabi_dmul>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	88fc      	ldrh	r4, [r7, #6]
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	f7fb f936 	bl	8000bb8 <__aeabi_d2uiz>
 800594c:	4603      	mov	r3, r0
 800594e:	b299      	uxth	r1, r3
 8005950:	4a0e      	ldr	r2, [pc, #56]	; (800598c <SERVO_Init+0x45c>)
 8005952:	00a3      	lsls	r3, r4, #2
 8005954:	4413      	add	r3, r2
 8005956:	460a      	mov	r2, r1
 8005958:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	4a07      	ldr	r2, [pc, #28]	; (800597c <SERVO_Init+0x44c>)
 800595e:	015b      	lsls	r3, r3, #5
 8005960:	4413      	add	r3, r2
 8005962:	3310      	adds	r3, #16
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800596a:	4611      	mov	r1, r2
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe fca9 	bl	80042c4 <HAL_TIM_PWM_Start>
}
 8005972:	bf00      	nop
 8005974:	37c8      	adds	r7, #200	; 0xc8
 8005976:	46bd      	mov	sp, r7
 8005978:	bdb0      	pop	{r4, r5, r7, pc}
 800597a:	bf00      	nop
 800597c:	0800a48c 	.word	0x0800a48c
 8005980:	40000800 	.word	0x40000800
 8005984:	40023800 	.word	0x40023800
 8005988:	40340000 	.word	0x40340000
 800598c:	200003f4 	.word	0x200003f4

08005990 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 8005990:	b5b0      	push	{r4, r5, r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	ed87 0a00 	vstr	s0, [r7]
 800599c:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	4a1f      	ldr	r2, [pc, #124]	; (8005a24 <SERVO_MoveTo+0x94>)
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	885b      	ldrh	r3, [r3, #2]
 80059ac:	4619      	mov	r1, r3
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <SERVO_MoveTo+0x94>)
 80059b2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80059b6:	1acb      	subs	r3, r1, r3
 80059b8:	ee07 3a90 	vmov	s15, r3
 80059bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059c0:	edd7 7a00 	vldr	s15, [r7]
 80059c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c8:	ee17 0a90 	vmov	r0, s15
 80059cc:	f7fa fdc4 	bl	8000558 <__aeabi_f2d>
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <SERVO_MoveTo+0x98>)
 80059d6:	f7fa ff41 	bl	800085c <__aeabi_ddiv>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4614      	mov	r4, r2
 80059e0:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	4a0f      	ldr	r2, [pc, #60]	; (8005a24 <SERVO_MoveTo+0x94>)
 80059e6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fa fda2 	bl	8000534 <__aeabi_i2d>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4620      	mov	r0, r4
 80059f6:	4629      	mov	r1, r5
 80059f8:	f7fa fc50 	bl	800029c <__adddf3>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 8005a00:	4610      	mov	r0, r2
 8005a02:	4619      	mov	r1, r3
 8005a04:	f7fb f8d8 	bl	8000bb8 <__aeabi_d2uiz>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	4a07      	ldr	r2, [pc, #28]	; (8005a2c <SERVO_MoveTo+0x9c>)
 8005a10:	015b      	lsls	r3, r3, #5
 8005a12:	4413      	add	r3, r2
 8005a14:	330c      	adds	r3, #12
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	89fa      	ldrh	r2, [r7, #14]
 8005a1a:	601a      	str	r2, [r3, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bdb0      	pop	{r4, r5, r7, pc}
 8005a24:	200003f4 	.word	0x200003f4
 8005a28:	40668000 	.word	0x40668000
 8005a2c:	0800a48c 	.word	0x0800a48c

08005a30 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8005a34:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <DWT_Delay_Init+0x58>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4a13      	ldr	r2, [pc, #76]	; (8005a88 <DWT_Delay_Init+0x58>)
 8005a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a3e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8005a40:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <DWT_Delay_Init+0x58>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4a10      	ldr	r2, [pc, #64]	; (8005a88 <DWT_Delay_Init+0x58>)
 8005a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a4a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <DWT_Delay_Init+0x5c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0e      	ldr	r2, [pc, #56]	; (8005a8c <DWT_Delay_Init+0x5c>)
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <DWT_Delay_Init+0x5c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a0b      	ldr	r2, [pc, #44]	; (8005a8c <DWT_Delay_Init+0x5c>)
 8005a5e:	f043 0301 	orr.w	r3, r3, #1
 8005a62:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8005a64:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <DWT_Delay_Init+0x5c>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8005a6a:	bf00      	nop
    __ASM volatile ("NOP");
 8005a6c:	bf00      	nop
    __ASM volatile ("NOP");
 8005a6e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <DWT_Delay_Init+0x5c>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e000      	b.n	8005a7e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8005a7c:	2301      	movs	r3, #1
    }
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	e000edf0 	.word	0xe000edf0
 8005a8c:	e0001000 	.word	0xe0001000

08005a90 <__errno>:
 8005a90:	4b01      	ldr	r3, [pc, #4]	; (8005a98 <__errno+0x8>)
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	2000001c 	.word	0x2000001c

08005a9c <__libc_init_array>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	4d0d      	ldr	r5, [pc, #52]	; (8005ad4 <__libc_init_array+0x38>)
 8005aa0:	4c0d      	ldr	r4, [pc, #52]	; (8005ad8 <__libc_init_array+0x3c>)
 8005aa2:	1b64      	subs	r4, r4, r5
 8005aa4:	10a4      	asrs	r4, r4, #2
 8005aa6:	2600      	movs	r6, #0
 8005aa8:	42a6      	cmp	r6, r4
 8005aaa:	d109      	bne.n	8005ac0 <__libc_init_array+0x24>
 8005aac:	4d0b      	ldr	r5, [pc, #44]	; (8005adc <__libc_init_array+0x40>)
 8005aae:	4c0c      	ldr	r4, [pc, #48]	; (8005ae0 <__libc_init_array+0x44>)
 8005ab0:	f004 fc92 	bl	800a3d8 <_init>
 8005ab4:	1b64      	subs	r4, r4, r5
 8005ab6:	10a4      	asrs	r4, r4, #2
 8005ab8:	2600      	movs	r6, #0
 8005aba:	42a6      	cmp	r6, r4
 8005abc:	d105      	bne.n	8005aca <__libc_init_array+0x2e>
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac4:	4798      	blx	r3
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	e7ee      	b.n	8005aa8 <__libc_init_array+0xc>
 8005aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ace:	4798      	blx	r3
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	e7f2      	b.n	8005aba <__libc_init_array+0x1e>
 8005ad4:	0800a95c 	.word	0x0800a95c
 8005ad8:	0800a95c 	.word	0x0800a95c
 8005adc:	0800a95c 	.word	0x0800a95c
 8005ae0:	0800a960 	.word	0x0800a960

08005ae4 <memset>:
 8005ae4:	4402      	add	r2, r0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d100      	bne.n	8005aee <memset+0xa>
 8005aec:	4770      	bx	lr
 8005aee:	f803 1b01 	strb.w	r1, [r3], #1
 8005af2:	e7f9      	b.n	8005ae8 <memset+0x4>

08005af4 <__cvt>:
 8005af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	ec55 4b10 	vmov	r4, r5, d0
 8005afc:	2d00      	cmp	r5, #0
 8005afe:	460e      	mov	r6, r1
 8005b00:	4619      	mov	r1, r3
 8005b02:	462b      	mov	r3, r5
 8005b04:	bfbb      	ittet	lt
 8005b06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b0a:	461d      	movlt	r5, r3
 8005b0c:	2300      	movge	r3, #0
 8005b0e:	232d      	movlt	r3, #45	; 0x2d
 8005b10:	700b      	strb	r3, [r1, #0]
 8005b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b18:	4691      	mov	r9, r2
 8005b1a:	f023 0820 	bic.w	r8, r3, #32
 8005b1e:	bfbc      	itt	lt
 8005b20:	4622      	movlt	r2, r4
 8005b22:	4614      	movlt	r4, r2
 8005b24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b28:	d005      	beq.n	8005b36 <__cvt+0x42>
 8005b2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b2e:	d100      	bne.n	8005b32 <__cvt+0x3e>
 8005b30:	3601      	adds	r6, #1
 8005b32:	2102      	movs	r1, #2
 8005b34:	e000      	b.n	8005b38 <__cvt+0x44>
 8005b36:	2103      	movs	r1, #3
 8005b38:	ab03      	add	r3, sp, #12
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	ab02      	add	r3, sp, #8
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	ec45 4b10 	vmov	d0, r4, r5
 8005b44:	4653      	mov	r3, sl
 8005b46:	4632      	mov	r2, r6
 8005b48:	f001 fdae 	bl	80076a8 <_dtoa_r>
 8005b4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b50:	4607      	mov	r7, r0
 8005b52:	d102      	bne.n	8005b5a <__cvt+0x66>
 8005b54:	f019 0f01 	tst.w	r9, #1
 8005b58:	d022      	beq.n	8005ba0 <__cvt+0xac>
 8005b5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b5e:	eb07 0906 	add.w	r9, r7, r6
 8005b62:	d110      	bne.n	8005b86 <__cvt+0x92>
 8005b64:	783b      	ldrb	r3, [r7, #0]
 8005b66:	2b30      	cmp	r3, #48	; 0x30
 8005b68:	d10a      	bne.n	8005b80 <__cvt+0x8c>
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa ffb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b76:	b918      	cbnz	r0, 8005b80 <__cvt+0x8c>
 8005b78:	f1c6 0601 	rsb	r6, r6, #1
 8005b7c:	f8ca 6000 	str.w	r6, [sl]
 8005b80:	f8da 3000 	ldr.w	r3, [sl]
 8005b84:	4499      	add	r9, r3
 8005b86:	2200      	movs	r2, #0
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	f7fa ffa3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b92:	b108      	cbz	r0, 8005b98 <__cvt+0xa4>
 8005b94:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b98:	2230      	movs	r2, #48	; 0x30
 8005b9a:	9b03      	ldr	r3, [sp, #12]
 8005b9c:	454b      	cmp	r3, r9
 8005b9e:	d307      	bcc.n	8005bb0 <__cvt+0xbc>
 8005ba0:	9b03      	ldr	r3, [sp, #12]
 8005ba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ba4:	1bdb      	subs	r3, r3, r7
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	b004      	add	sp, #16
 8005bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb0:	1c59      	adds	r1, r3, #1
 8005bb2:	9103      	str	r1, [sp, #12]
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	e7f0      	b.n	8005b9a <__cvt+0xa6>

08005bb8 <__exponent>:
 8005bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	bfb8      	it	lt
 8005bc0:	4249      	neglt	r1, r1
 8005bc2:	f803 2b02 	strb.w	r2, [r3], #2
 8005bc6:	bfb4      	ite	lt
 8005bc8:	222d      	movlt	r2, #45	; 0x2d
 8005bca:	222b      	movge	r2, #43	; 0x2b
 8005bcc:	2909      	cmp	r1, #9
 8005bce:	7042      	strb	r2, [r0, #1]
 8005bd0:	dd2a      	ble.n	8005c28 <__exponent+0x70>
 8005bd2:	f10d 0407 	add.w	r4, sp, #7
 8005bd6:	46a4      	mov	ip, r4
 8005bd8:	270a      	movs	r7, #10
 8005bda:	46a6      	mov	lr, r4
 8005bdc:	460a      	mov	r2, r1
 8005bde:	fb91 f6f7 	sdiv	r6, r1, r7
 8005be2:	fb07 1516 	mls	r5, r7, r6, r1
 8005be6:	3530      	adds	r5, #48	; 0x30
 8005be8:	2a63      	cmp	r2, #99	; 0x63
 8005bea:	f104 34ff 	add.w	r4, r4, #4294967295
 8005bee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	dcf1      	bgt.n	8005bda <__exponent+0x22>
 8005bf6:	3130      	adds	r1, #48	; 0x30
 8005bf8:	f1ae 0502 	sub.w	r5, lr, #2
 8005bfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c00:	1c44      	adds	r4, r0, #1
 8005c02:	4629      	mov	r1, r5
 8005c04:	4561      	cmp	r1, ip
 8005c06:	d30a      	bcc.n	8005c1e <__exponent+0x66>
 8005c08:	f10d 0209 	add.w	r2, sp, #9
 8005c0c:	eba2 020e 	sub.w	r2, r2, lr
 8005c10:	4565      	cmp	r5, ip
 8005c12:	bf88      	it	hi
 8005c14:	2200      	movhi	r2, #0
 8005c16:	4413      	add	r3, r2
 8005c18:	1a18      	subs	r0, r3, r0
 8005c1a:	b003      	add	sp, #12
 8005c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c26:	e7ed      	b.n	8005c04 <__exponent+0x4c>
 8005c28:	2330      	movs	r3, #48	; 0x30
 8005c2a:	3130      	adds	r1, #48	; 0x30
 8005c2c:	7083      	strb	r3, [r0, #2]
 8005c2e:	70c1      	strb	r1, [r0, #3]
 8005c30:	1d03      	adds	r3, r0, #4
 8005c32:	e7f1      	b.n	8005c18 <__exponent+0x60>

08005c34 <_printf_float>:
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	ed2d 8b02 	vpush	{d8}
 8005c3c:	b08d      	sub	sp, #52	; 0x34
 8005c3e:	460c      	mov	r4, r1
 8005c40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c44:	4616      	mov	r6, r2
 8005c46:	461f      	mov	r7, r3
 8005c48:	4605      	mov	r5, r0
 8005c4a:	f002 fe8b 	bl	8008964 <_localeconv_r>
 8005c4e:	f8d0 a000 	ldr.w	sl, [r0]
 8005c52:	4650      	mov	r0, sl
 8005c54:	f7fa fac4 	bl	80001e0 <strlen>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	9305      	str	r3, [sp, #20]
 8005c60:	f8d8 3000 	ldr.w	r3, [r8]
 8005c64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c68:	3307      	adds	r3, #7
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	f103 0208 	add.w	r2, r3, #8
 8005c72:	f8c8 2000 	str.w	r2, [r8]
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c86:	9307      	str	r3, [sp, #28]
 8005c88:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c8c:	ee08 0a10 	vmov	s16, r0
 8005c90:	4b9f      	ldr	r3, [pc, #636]	; (8005f10 <_printf_float+0x2dc>)
 8005c92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c96:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9a:	f7fa ff4f 	bl	8000b3c <__aeabi_dcmpun>
 8005c9e:	bb88      	cbnz	r0, 8005d04 <_printf_float+0xd0>
 8005ca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ca4:	4b9a      	ldr	r3, [pc, #616]	; (8005f10 <_printf_float+0x2dc>)
 8005ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8005caa:	f7fa ff29 	bl	8000b00 <__aeabi_dcmple>
 8005cae:	bb48      	cbnz	r0, 8005d04 <_printf_float+0xd0>
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	f7fa ff18 	bl	8000aec <__aeabi_dcmplt>
 8005cbc:	b110      	cbz	r0, 8005cc4 <_printf_float+0x90>
 8005cbe:	232d      	movs	r3, #45	; 0x2d
 8005cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc4:	4b93      	ldr	r3, [pc, #588]	; (8005f14 <_printf_float+0x2e0>)
 8005cc6:	4894      	ldr	r0, [pc, #592]	; (8005f18 <_printf_float+0x2e4>)
 8005cc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ccc:	bf94      	ite	ls
 8005cce:	4698      	movls	r8, r3
 8005cd0:	4680      	movhi	r8, r0
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	6123      	str	r3, [r4, #16]
 8005cd6:	9b05      	ldr	r3, [sp, #20]
 8005cd8:	f023 0204 	bic.w	r2, r3, #4
 8005cdc:	6022      	str	r2, [r4, #0]
 8005cde:	f04f 0900 	mov.w	r9, #0
 8005ce2:	9700      	str	r7, [sp, #0]
 8005ce4:	4633      	mov	r3, r6
 8005ce6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 f9d8 	bl	80060a0 <_printf_common>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	f040 8090 	bne.w	8005e16 <_printf_float+0x1e2>
 8005cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfa:	b00d      	add	sp, #52	; 0x34
 8005cfc:	ecbd 8b02 	vpop	{d8}
 8005d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d04:	4642      	mov	r2, r8
 8005d06:	464b      	mov	r3, r9
 8005d08:	4640      	mov	r0, r8
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	f7fa ff16 	bl	8000b3c <__aeabi_dcmpun>
 8005d10:	b140      	cbz	r0, 8005d24 <_printf_float+0xf0>
 8005d12:	464b      	mov	r3, r9
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bfbc      	itt	lt
 8005d18:	232d      	movlt	r3, #45	; 0x2d
 8005d1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d1e:	487f      	ldr	r0, [pc, #508]	; (8005f1c <_printf_float+0x2e8>)
 8005d20:	4b7f      	ldr	r3, [pc, #508]	; (8005f20 <_printf_float+0x2ec>)
 8005d22:	e7d1      	b.n	8005cc8 <_printf_float+0x94>
 8005d24:	6863      	ldr	r3, [r4, #4]
 8005d26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d2a:	9206      	str	r2, [sp, #24]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	d13f      	bne.n	8005db0 <_printf_float+0x17c>
 8005d30:	2306      	movs	r3, #6
 8005d32:	6063      	str	r3, [r4, #4]
 8005d34:	9b05      	ldr	r3, [sp, #20]
 8005d36:	6861      	ldr	r1, [r4, #4]
 8005d38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	9303      	str	r3, [sp, #12]
 8005d40:	ab0a      	add	r3, sp, #40	; 0x28
 8005d42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d46:	ab09      	add	r3, sp, #36	; 0x24
 8005d48:	ec49 8b10 	vmov	d0, r8, r9
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	6022      	str	r2, [r4, #0]
 8005d50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d54:	4628      	mov	r0, r5
 8005d56:	f7ff fecd 	bl	8005af4 <__cvt>
 8005d5a:	9b06      	ldr	r3, [sp, #24]
 8005d5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d5e:	2b47      	cmp	r3, #71	; 0x47
 8005d60:	4680      	mov	r8, r0
 8005d62:	d108      	bne.n	8005d76 <_printf_float+0x142>
 8005d64:	1cc8      	adds	r0, r1, #3
 8005d66:	db02      	blt.n	8005d6e <_printf_float+0x13a>
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	4299      	cmp	r1, r3
 8005d6c:	dd41      	ble.n	8005df2 <_printf_float+0x1be>
 8005d6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005d72:	fa5f fb8b 	uxtb.w	fp, fp
 8005d76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d7a:	d820      	bhi.n	8005dbe <_printf_float+0x18a>
 8005d7c:	3901      	subs	r1, #1
 8005d7e:	465a      	mov	r2, fp
 8005d80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d84:	9109      	str	r1, [sp, #36]	; 0x24
 8005d86:	f7ff ff17 	bl	8005bb8 <__exponent>
 8005d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d8c:	1813      	adds	r3, r2, r0
 8005d8e:	2a01      	cmp	r2, #1
 8005d90:	4681      	mov	r9, r0
 8005d92:	6123      	str	r3, [r4, #16]
 8005d94:	dc02      	bgt.n	8005d9c <_printf_float+0x168>
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	07d2      	lsls	r2, r2, #31
 8005d9a:	d501      	bpl.n	8005da0 <_printf_float+0x16c>
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	6123      	str	r3, [r4, #16]
 8005da0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d09c      	beq.n	8005ce2 <_printf_float+0xae>
 8005da8:	232d      	movs	r3, #45	; 0x2d
 8005daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dae:	e798      	b.n	8005ce2 <_printf_float+0xae>
 8005db0:	9a06      	ldr	r2, [sp, #24]
 8005db2:	2a47      	cmp	r2, #71	; 0x47
 8005db4:	d1be      	bne.n	8005d34 <_printf_float+0x100>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1bc      	bne.n	8005d34 <_printf_float+0x100>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e7b9      	b.n	8005d32 <_printf_float+0xfe>
 8005dbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005dc2:	d118      	bne.n	8005df6 <_printf_float+0x1c2>
 8005dc4:	2900      	cmp	r1, #0
 8005dc6:	6863      	ldr	r3, [r4, #4]
 8005dc8:	dd0b      	ble.n	8005de2 <_printf_float+0x1ae>
 8005dca:	6121      	str	r1, [r4, #16]
 8005dcc:	b913      	cbnz	r3, 8005dd4 <_printf_float+0x1a0>
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	07d0      	lsls	r0, r2, #31
 8005dd2:	d502      	bpl.n	8005dda <_printf_float+0x1a6>
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	440b      	add	r3, r1
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ddc:	f04f 0900 	mov.w	r9, #0
 8005de0:	e7de      	b.n	8005da0 <_printf_float+0x16c>
 8005de2:	b913      	cbnz	r3, 8005dea <_printf_float+0x1b6>
 8005de4:	6822      	ldr	r2, [r4, #0]
 8005de6:	07d2      	lsls	r2, r2, #31
 8005de8:	d501      	bpl.n	8005dee <_printf_float+0x1ba>
 8005dea:	3302      	adds	r3, #2
 8005dec:	e7f4      	b.n	8005dd8 <_printf_float+0x1a4>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e7f2      	b.n	8005dd8 <_printf_float+0x1a4>
 8005df2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005df8:	4299      	cmp	r1, r3
 8005dfa:	db05      	blt.n	8005e08 <_printf_float+0x1d4>
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	6121      	str	r1, [r4, #16]
 8005e00:	07d8      	lsls	r0, r3, #31
 8005e02:	d5ea      	bpl.n	8005dda <_printf_float+0x1a6>
 8005e04:	1c4b      	adds	r3, r1, #1
 8005e06:	e7e7      	b.n	8005dd8 <_printf_float+0x1a4>
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	bfd4      	ite	le
 8005e0c:	f1c1 0202 	rsble	r2, r1, #2
 8005e10:	2201      	movgt	r2, #1
 8005e12:	4413      	add	r3, r2
 8005e14:	e7e0      	b.n	8005dd8 <_printf_float+0x1a4>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	055a      	lsls	r2, r3, #21
 8005e1a:	d407      	bmi.n	8005e2c <_printf_float+0x1f8>
 8005e1c:	6923      	ldr	r3, [r4, #16]
 8005e1e:	4642      	mov	r2, r8
 8005e20:	4631      	mov	r1, r6
 8005e22:	4628      	mov	r0, r5
 8005e24:	47b8      	blx	r7
 8005e26:	3001      	adds	r0, #1
 8005e28:	d12c      	bne.n	8005e84 <_printf_float+0x250>
 8005e2a:	e764      	b.n	8005cf6 <_printf_float+0xc2>
 8005e2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e30:	f240 80e0 	bls.w	8005ff4 <_printf_float+0x3c0>
 8005e34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f7fa fe4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d034      	beq.n	8005eae <_printf_float+0x27a>
 8005e44:	4a37      	ldr	r2, [pc, #220]	; (8005f24 <_printf_float+0x2f0>)
 8005e46:	2301      	movs	r3, #1
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	f43f af51 	beq.w	8005cf6 <_printf_float+0xc2>
 8005e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	db02      	blt.n	8005e62 <_printf_float+0x22e>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	07d8      	lsls	r0, r3, #31
 8005e60:	d510      	bpl.n	8005e84 <_printf_float+0x250>
 8005e62:	ee18 3a10 	vmov	r3, s16
 8005e66:	4652      	mov	r2, sl
 8005e68:	4631      	mov	r1, r6
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	47b8      	blx	r7
 8005e6e:	3001      	adds	r0, #1
 8005e70:	f43f af41 	beq.w	8005cf6 <_printf_float+0xc2>
 8005e74:	f04f 0800 	mov.w	r8, #0
 8005e78:	f104 091a 	add.w	r9, r4, #26
 8005e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	4543      	cmp	r3, r8
 8005e82:	dc09      	bgt.n	8005e98 <_printf_float+0x264>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	079b      	lsls	r3, r3, #30
 8005e88:	f100 8105 	bmi.w	8006096 <_printf_float+0x462>
 8005e8c:	68e0      	ldr	r0, [r4, #12]
 8005e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e90:	4298      	cmp	r0, r3
 8005e92:	bfb8      	it	lt
 8005e94:	4618      	movlt	r0, r3
 8005e96:	e730      	b.n	8005cfa <_printf_float+0xc6>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	464a      	mov	r2, r9
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f43f af27 	beq.w	8005cf6 <_printf_float+0xc2>
 8005ea8:	f108 0801 	add.w	r8, r8, #1
 8005eac:	e7e6      	b.n	8005e7c <_printf_float+0x248>
 8005eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	dc39      	bgt.n	8005f28 <_printf_float+0x2f4>
 8005eb4:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <_printf_float+0x2f0>)
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4628      	mov	r0, r5
 8005ebc:	47b8      	blx	r7
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	f43f af19 	beq.w	8005cf6 <_printf_float+0xc2>
 8005ec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	d102      	bne.n	8005ed2 <_printf_float+0x29e>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	07d9      	lsls	r1, r3, #31
 8005ed0:	d5d8      	bpl.n	8005e84 <_printf_float+0x250>
 8005ed2:	ee18 3a10 	vmov	r3, s16
 8005ed6:	4652      	mov	r2, sl
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f43f af09 	beq.w	8005cf6 <_printf_float+0xc2>
 8005ee4:	f04f 0900 	mov.w	r9, #0
 8005ee8:	f104 0a1a 	add.w	sl, r4, #26
 8005eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eee:	425b      	negs	r3, r3
 8005ef0:	454b      	cmp	r3, r9
 8005ef2:	dc01      	bgt.n	8005ef8 <_printf_float+0x2c4>
 8005ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef6:	e792      	b.n	8005e1e <_printf_float+0x1ea>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	4652      	mov	r2, sl
 8005efc:	4631      	mov	r1, r6
 8005efe:	4628      	mov	r0, r5
 8005f00:	47b8      	blx	r7
 8005f02:	3001      	adds	r0, #1
 8005f04:	f43f aef7 	beq.w	8005cf6 <_printf_float+0xc2>
 8005f08:	f109 0901 	add.w	r9, r9, #1
 8005f0c:	e7ee      	b.n	8005eec <_printf_float+0x2b8>
 8005f0e:	bf00      	nop
 8005f10:	7fefffff 	.word	0x7fefffff
 8005f14:	0800a4b0 	.word	0x0800a4b0
 8005f18:	0800a4b4 	.word	0x0800a4b4
 8005f1c:	0800a4bc 	.word	0x0800a4bc
 8005f20:	0800a4b8 	.word	0x0800a4b8
 8005f24:	0800a4c0 	.word	0x0800a4c0
 8005f28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	bfa8      	it	ge
 8005f30:	461a      	movge	r2, r3
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	4691      	mov	r9, r2
 8005f36:	dc37      	bgt.n	8005fa8 <_printf_float+0x374>
 8005f38:	f04f 0b00 	mov.w	fp, #0
 8005f3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f40:	f104 021a 	add.w	r2, r4, #26
 8005f44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f46:	9305      	str	r3, [sp, #20]
 8005f48:	eba3 0309 	sub.w	r3, r3, r9
 8005f4c:	455b      	cmp	r3, fp
 8005f4e:	dc33      	bgt.n	8005fb8 <_printf_float+0x384>
 8005f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f54:	429a      	cmp	r2, r3
 8005f56:	db3b      	blt.n	8005fd0 <_printf_float+0x39c>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	07da      	lsls	r2, r3, #31
 8005f5c:	d438      	bmi.n	8005fd0 <_printf_float+0x39c>
 8005f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f60:	9a05      	ldr	r2, [sp, #20]
 8005f62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f64:	1a9a      	subs	r2, r3, r2
 8005f66:	eba3 0901 	sub.w	r9, r3, r1
 8005f6a:	4591      	cmp	r9, r2
 8005f6c:	bfa8      	it	ge
 8005f6e:	4691      	movge	r9, r2
 8005f70:	f1b9 0f00 	cmp.w	r9, #0
 8005f74:	dc35      	bgt.n	8005fe2 <_printf_float+0x3ae>
 8005f76:	f04f 0800 	mov.w	r8, #0
 8005f7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f7e:	f104 0a1a 	add.w	sl, r4, #26
 8005f82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	eba3 0309 	sub.w	r3, r3, r9
 8005f8c:	4543      	cmp	r3, r8
 8005f8e:	f77f af79 	ble.w	8005e84 <_printf_float+0x250>
 8005f92:	2301      	movs	r3, #1
 8005f94:	4652      	mov	r2, sl
 8005f96:	4631      	mov	r1, r6
 8005f98:	4628      	mov	r0, r5
 8005f9a:	47b8      	blx	r7
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	f43f aeaa 	beq.w	8005cf6 <_printf_float+0xc2>
 8005fa2:	f108 0801 	add.w	r8, r8, #1
 8005fa6:	e7ec      	b.n	8005f82 <_printf_float+0x34e>
 8005fa8:	4613      	mov	r3, r2
 8005faa:	4631      	mov	r1, r6
 8005fac:	4642      	mov	r2, r8
 8005fae:	4628      	mov	r0, r5
 8005fb0:	47b8      	blx	r7
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d1c0      	bne.n	8005f38 <_printf_float+0x304>
 8005fb6:	e69e      	b.n	8005cf6 <_printf_float+0xc2>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	9205      	str	r2, [sp, #20]
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	f43f ae97 	beq.w	8005cf6 <_printf_float+0xc2>
 8005fc8:	9a05      	ldr	r2, [sp, #20]
 8005fca:	f10b 0b01 	add.w	fp, fp, #1
 8005fce:	e7b9      	b.n	8005f44 <_printf_float+0x310>
 8005fd0:	ee18 3a10 	vmov	r3, s16
 8005fd4:	4652      	mov	r2, sl
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4628      	mov	r0, r5
 8005fda:	47b8      	blx	r7
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d1be      	bne.n	8005f5e <_printf_float+0x32a>
 8005fe0:	e689      	b.n	8005cf6 <_printf_float+0xc2>
 8005fe2:	9a05      	ldr	r2, [sp, #20]
 8005fe4:	464b      	mov	r3, r9
 8005fe6:	4442      	add	r2, r8
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b8      	blx	r7
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d1c1      	bne.n	8005f76 <_printf_float+0x342>
 8005ff2:	e680      	b.n	8005cf6 <_printf_float+0xc2>
 8005ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff6:	2a01      	cmp	r2, #1
 8005ff8:	dc01      	bgt.n	8005ffe <_printf_float+0x3ca>
 8005ffa:	07db      	lsls	r3, r3, #31
 8005ffc:	d538      	bpl.n	8006070 <_printf_float+0x43c>
 8005ffe:	2301      	movs	r3, #1
 8006000:	4642      	mov	r2, r8
 8006002:	4631      	mov	r1, r6
 8006004:	4628      	mov	r0, r5
 8006006:	47b8      	blx	r7
 8006008:	3001      	adds	r0, #1
 800600a:	f43f ae74 	beq.w	8005cf6 <_printf_float+0xc2>
 800600e:	ee18 3a10 	vmov	r3, s16
 8006012:	4652      	mov	r2, sl
 8006014:	4631      	mov	r1, r6
 8006016:	4628      	mov	r0, r5
 8006018:	47b8      	blx	r7
 800601a:	3001      	adds	r0, #1
 800601c:	f43f ae6b 	beq.w	8005cf6 <_printf_float+0xc2>
 8006020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006024:	2200      	movs	r2, #0
 8006026:	2300      	movs	r3, #0
 8006028:	f7fa fd56 	bl	8000ad8 <__aeabi_dcmpeq>
 800602c:	b9d8      	cbnz	r0, 8006066 <_printf_float+0x432>
 800602e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006030:	f108 0201 	add.w	r2, r8, #1
 8006034:	3b01      	subs	r3, #1
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	d10e      	bne.n	800605e <_printf_float+0x42a>
 8006040:	e659      	b.n	8005cf6 <_printf_float+0xc2>
 8006042:	2301      	movs	r3, #1
 8006044:	4652      	mov	r2, sl
 8006046:	4631      	mov	r1, r6
 8006048:	4628      	mov	r0, r5
 800604a:	47b8      	blx	r7
 800604c:	3001      	adds	r0, #1
 800604e:	f43f ae52 	beq.w	8005cf6 <_printf_float+0xc2>
 8006052:	f108 0801 	add.w	r8, r8, #1
 8006056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006058:	3b01      	subs	r3, #1
 800605a:	4543      	cmp	r3, r8
 800605c:	dcf1      	bgt.n	8006042 <_printf_float+0x40e>
 800605e:	464b      	mov	r3, r9
 8006060:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006064:	e6dc      	b.n	8005e20 <_printf_float+0x1ec>
 8006066:	f04f 0800 	mov.w	r8, #0
 800606a:	f104 0a1a 	add.w	sl, r4, #26
 800606e:	e7f2      	b.n	8006056 <_printf_float+0x422>
 8006070:	2301      	movs	r3, #1
 8006072:	4642      	mov	r2, r8
 8006074:	e7df      	b.n	8006036 <_printf_float+0x402>
 8006076:	2301      	movs	r3, #1
 8006078:	464a      	mov	r2, r9
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	f43f ae38 	beq.w	8005cf6 <_printf_float+0xc2>
 8006086:	f108 0801 	add.w	r8, r8, #1
 800608a:	68e3      	ldr	r3, [r4, #12]
 800608c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800608e:	1a5b      	subs	r3, r3, r1
 8006090:	4543      	cmp	r3, r8
 8006092:	dcf0      	bgt.n	8006076 <_printf_float+0x442>
 8006094:	e6fa      	b.n	8005e8c <_printf_float+0x258>
 8006096:	f04f 0800 	mov.w	r8, #0
 800609a:	f104 0919 	add.w	r9, r4, #25
 800609e:	e7f4      	b.n	800608a <_printf_float+0x456>

080060a0 <_printf_common>:
 80060a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a4:	4616      	mov	r6, r2
 80060a6:	4699      	mov	r9, r3
 80060a8:	688a      	ldr	r2, [r1, #8]
 80060aa:	690b      	ldr	r3, [r1, #16]
 80060ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060b0:	4293      	cmp	r3, r2
 80060b2:	bfb8      	it	lt
 80060b4:	4613      	movlt	r3, r2
 80060b6:	6033      	str	r3, [r6, #0]
 80060b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060bc:	4607      	mov	r7, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	b10a      	cbz	r2, 80060c6 <_printf_common+0x26>
 80060c2:	3301      	adds	r3, #1
 80060c4:	6033      	str	r3, [r6, #0]
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	0699      	lsls	r1, r3, #26
 80060ca:	bf42      	ittt	mi
 80060cc:	6833      	ldrmi	r3, [r6, #0]
 80060ce:	3302      	addmi	r3, #2
 80060d0:	6033      	strmi	r3, [r6, #0]
 80060d2:	6825      	ldr	r5, [r4, #0]
 80060d4:	f015 0506 	ands.w	r5, r5, #6
 80060d8:	d106      	bne.n	80060e8 <_printf_common+0x48>
 80060da:	f104 0a19 	add.w	sl, r4, #25
 80060de:	68e3      	ldr	r3, [r4, #12]
 80060e0:	6832      	ldr	r2, [r6, #0]
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	42ab      	cmp	r3, r5
 80060e6:	dc26      	bgt.n	8006136 <_printf_common+0x96>
 80060e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060ec:	1e13      	subs	r3, r2, #0
 80060ee:	6822      	ldr	r2, [r4, #0]
 80060f0:	bf18      	it	ne
 80060f2:	2301      	movne	r3, #1
 80060f4:	0692      	lsls	r2, r2, #26
 80060f6:	d42b      	bmi.n	8006150 <_printf_common+0xb0>
 80060f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060fc:	4649      	mov	r1, r9
 80060fe:	4638      	mov	r0, r7
 8006100:	47c0      	blx	r8
 8006102:	3001      	adds	r0, #1
 8006104:	d01e      	beq.n	8006144 <_printf_common+0xa4>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	68e5      	ldr	r5, [r4, #12]
 800610a:	6832      	ldr	r2, [r6, #0]
 800610c:	f003 0306 	and.w	r3, r3, #6
 8006110:	2b04      	cmp	r3, #4
 8006112:	bf08      	it	eq
 8006114:	1aad      	subeq	r5, r5, r2
 8006116:	68a3      	ldr	r3, [r4, #8]
 8006118:	6922      	ldr	r2, [r4, #16]
 800611a:	bf0c      	ite	eq
 800611c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006120:	2500      	movne	r5, #0
 8006122:	4293      	cmp	r3, r2
 8006124:	bfc4      	itt	gt
 8006126:	1a9b      	subgt	r3, r3, r2
 8006128:	18ed      	addgt	r5, r5, r3
 800612a:	2600      	movs	r6, #0
 800612c:	341a      	adds	r4, #26
 800612e:	42b5      	cmp	r5, r6
 8006130:	d11a      	bne.n	8006168 <_printf_common+0xc8>
 8006132:	2000      	movs	r0, #0
 8006134:	e008      	b.n	8006148 <_printf_common+0xa8>
 8006136:	2301      	movs	r3, #1
 8006138:	4652      	mov	r2, sl
 800613a:	4649      	mov	r1, r9
 800613c:	4638      	mov	r0, r7
 800613e:	47c0      	blx	r8
 8006140:	3001      	adds	r0, #1
 8006142:	d103      	bne.n	800614c <_printf_common+0xac>
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614c:	3501      	adds	r5, #1
 800614e:	e7c6      	b.n	80060de <_printf_common+0x3e>
 8006150:	18e1      	adds	r1, r4, r3
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	2030      	movs	r0, #48	; 0x30
 8006156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800615a:	4422      	add	r2, r4
 800615c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006164:	3302      	adds	r3, #2
 8006166:	e7c7      	b.n	80060f8 <_printf_common+0x58>
 8006168:	2301      	movs	r3, #1
 800616a:	4622      	mov	r2, r4
 800616c:	4649      	mov	r1, r9
 800616e:	4638      	mov	r0, r7
 8006170:	47c0      	blx	r8
 8006172:	3001      	adds	r0, #1
 8006174:	d0e6      	beq.n	8006144 <_printf_common+0xa4>
 8006176:	3601      	adds	r6, #1
 8006178:	e7d9      	b.n	800612e <_printf_common+0x8e>
	...

0800617c <_printf_i>:
 800617c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006180:	7e0f      	ldrb	r7, [r1, #24]
 8006182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006184:	2f78      	cmp	r7, #120	; 0x78
 8006186:	4691      	mov	r9, r2
 8006188:	4680      	mov	r8, r0
 800618a:	460c      	mov	r4, r1
 800618c:	469a      	mov	sl, r3
 800618e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006192:	d807      	bhi.n	80061a4 <_printf_i+0x28>
 8006194:	2f62      	cmp	r7, #98	; 0x62
 8006196:	d80a      	bhi.n	80061ae <_printf_i+0x32>
 8006198:	2f00      	cmp	r7, #0
 800619a:	f000 80d8 	beq.w	800634e <_printf_i+0x1d2>
 800619e:	2f58      	cmp	r7, #88	; 0x58
 80061a0:	f000 80a3 	beq.w	80062ea <_printf_i+0x16e>
 80061a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061ac:	e03a      	b.n	8006224 <_printf_i+0xa8>
 80061ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061b2:	2b15      	cmp	r3, #21
 80061b4:	d8f6      	bhi.n	80061a4 <_printf_i+0x28>
 80061b6:	a101      	add	r1, pc, #4	; (adr r1, 80061bc <_printf_i+0x40>)
 80061b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061bc:	08006215 	.word	0x08006215
 80061c0:	08006229 	.word	0x08006229
 80061c4:	080061a5 	.word	0x080061a5
 80061c8:	080061a5 	.word	0x080061a5
 80061cc:	080061a5 	.word	0x080061a5
 80061d0:	080061a5 	.word	0x080061a5
 80061d4:	08006229 	.word	0x08006229
 80061d8:	080061a5 	.word	0x080061a5
 80061dc:	080061a5 	.word	0x080061a5
 80061e0:	080061a5 	.word	0x080061a5
 80061e4:	080061a5 	.word	0x080061a5
 80061e8:	08006335 	.word	0x08006335
 80061ec:	08006259 	.word	0x08006259
 80061f0:	08006317 	.word	0x08006317
 80061f4:	080061a5 	.word	0x080061a5
 80061f8:	080061a5 	.word	0x080061a5
 80061fc:	08006357 	.word	0x08006357
 8006200:	080061a5 	.word	0x080061a5
 8006204:	08006259 	.word	0x08006259
 8006208:	080061a5 	.word	0x080061a5
 800620c:	080061a5 	.word	0x080061a5
 8006210:	0800631f 	.word	0x0800631f
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	1d1a      	adds	r2, r3, #4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	602a      	str	r2, [r5, #0]
 800621c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006224:	2301      	movs	r3, #1
 8006226:	e0a3      	b.n	8006370 <_printf_i+0x1f4>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	6829      	ldr	r1, [r5, #0]
 800622c:	0606      	lsls	r6, r0, #24
 800622e:	f101 0304 	add.w	r3, r1, #4
 8006232:	d50a      	bpl.n	800624a <_printf_i+0xce>
 8006234:	680e      	ldr	r6, [r1, #0]
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	2e00      	cmp	r6, #0
 800623a:	da03      	bge.n	8006244 <_printf_i+0xc8>
 800623c:	232d      	movs	r3, #45	; 0x2d
 800623e:	4276      	negs	r6, r6
 8006240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006244:	485e      	ldr	r0, [pc, #376]	; (80063c0 <_printf_i+0x244>)
 8006246:	230a      	movs	r3, #10
 8006248:	e019      	b.n	800627e <_printf_i+0x102>
 800624a:	680e      	ldr	r6, [r1, #0]
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006252:	bf18      	it	ne
 8006254:	b236      	sxthne	r6, r6
 8006256:	e7ef      	b.n	8006238 <_printf_i+0xbc>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	6820      	ldr	r0, [r4, #0]
 800625c:	1d19      	adds	r1, r3, #4
 800625e:	6029      	str	r1, [r5, #0]
 8006260:	0601      	lsls	r1, r0, #24
 8006262:	d501      	bpl.n	8006268 <_printf_i+0xec>
 8006264:	681e      	ldr	r6, [r3, #0]
 8006266:	e002      	b.n	800626e <_printf_i+0xf2>
 8006268:	0646      	lsls	r6, r0, #25
 800626a:	d5fb      	bpl.n	8006264 <_printf_i+0xe8>
 800626c:	881e      	ldrh	r6, [r3, #0]
 800626e:	4854      	ldr	r0, [pc, #336]	; (80063c0 <_printf_i+0x244>)
 8006270:	2f6f      	cmp	r7, #111	; 0x6f
 8006272:	bf0c      	ite	eq
 8006274:	2308      	moveq	r3, #8
 8006276:	230a      	movne	r3, #10
 8006278:	2100      	movs	r1, #0
 800627a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800627e:	6865      	ldr	r5, [r4, #4]
 8006280:	60a5      	str	r5, [r4, #8]
 8006282:	2d00      	cmp	r5, #0
 8006284:	bfa2      	ittt	ge
 8006286:	6821      	ldrge	r1, [r4, #0]
 8006288:	f021 0104 	bicge.w	r1, r1, #4
 800628c:	6021      	strge	r1, [r4, #0]
 800628e:	b90e      	cbnz	r6, 8006294 <_printf_i+0x118>
 8006290:	2d00      	cmp	r5, #0
 8006292:	d04d      	beq.n	8006330 <_printf_i+0x1b4>
 8006294:	4615      	mov	r5, r2
 8006296:	fbb6 f1f3 	udiv	r1, r6, r3
 800629a:	fb03 6711 	mls	r7, r3, r1, r6
 800629e:	5dc7      	ldrb	r7, [r0, r7]
 80062a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062a4:	4637      	mov	r7, r6
 80062a6:	42bb      	cmp	r3, r7
 80062a8:	460e      	mov	r6, r1
 80062aa:	d9f4      	bls.n	8006296 <_printf_i+0x11a>
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d10b      	bne.n	80062c8 <_printf_i+0x14c>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	07de      	lsls	r6, r3, #31
 80062b4:	d508      	bpl.n	80062c8 <_printf_i+0x14c>
 80062b6:	6923      	ldr	r3, [r4, #16]
 80062b8:	6861      	ldr	r1, [r4, #4]
 80062ba:	4299      	cmp	r1, r3
 80062bc:	bfde      	ittt	le
 80062be:	2330      	movle	r3, #48	; 0x30
 80062c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062c8:	1b52      	subs	r2, r2, r5
 80062ca:	6122      	str	r2, [r4, #16]
 80062cc:	f8cd a000 	str.w	sl, [sp]
 80062d0:	464b      	mov	r3, r9
 80062d2:	aa03      	add	r2, sp, #12
 80062d4:	4621      	mov	r1, r4
 80062d6:	4640      	mov	r0, r8
 80062d8:	f7ff fee2 	bl	80060a0 <_printf_common>
 80062dc:	3001      	adds	r0, #1
 80062de:	d14c      	bne.n	800637a <_printf_i+0x1fe>
 80062e0:	f04f 30ff 	mov.w	r0, #4294967295
 80062e4:	b004      	add	sp, #16
 80062e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ea:	4835      	ldr	r0, [pc, #212]	; (80063c0 <_printf_i+0x244>)
 80062ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062f0:	6829      	ldr	r1, [r5, #0]
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80062f8:	6029      	str	r1, [r5, #0]
 80062fa:	061d      	lsls	r5, r3, #24
 80062fc:	d514      	bpl.n	8006328 <_printf_i+0x1ac>
 80062fe:	07df      	lsls	r7, r3, #31
 8006300:	bf44      	itt	mi
 8006302:	f043 0320 	orrmi.w	r3, r3, #32
 8006306:	6023      	strmi	r3, [r4, #0]
 8006308:	b91e      	cbnz	r6, 8006312 <_printf_i+0x196>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	f023 0320 	bic.w	r3, r3, #32
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	2310      	movs	r3, #16
 8006314:	e7b0      	b.n	8006278 <_printf_i+0xfc>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	f043 0320 	orr.w	r3, r3, #32
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	2378      	movs	r3, #120	; 0x78
 8006320:	4828      	ldr	r0, [pc, #160]	; (80063c4 <_printf_i+0x248>)
 8006322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006326:	e7e3      	b.n	80062f0 <_printf_i+0x174>
 8006328:	0659      	lsls	r1, r3, #25
 800632a:	bf48      	it	mi
 800632c:	b2b6      	uxthmi	r6, r6
 800632e:	e7e6      	b.n	80062fe <_printf_i+0x182>
 8006330:	4615      	mov	r5, r2
 8006332:	e7bb      	b.n	80062ac <_printf_i+0x130>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	6826      	ldr	r6, [r4, #0]
 8006338:	6961      	ldr	r1, [r4, #20]
 800633a:	1d18      	adds	r0, r3, #4
 800633c:	6028      	str	r0, [r5, #0]
 800633e:	0635      	lsls	r5, r6, #24
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	d501      	bpl.n	8006348 <_printf_i+0x1cc>
 8006344:	6019      	str	r1, [r3, #0]
 8006346:	e002      	b.n	800634e <_printf_i+0x1d2>
 8006348:	0670      	lsls	r0, r6, #25
 800634a:	d5fb      	bpl.n	8006344 <_printf_i+0x1c8>
 800634c:	8019      	strh	r1, [r3, #0]
 800634e:	2300      	movs	r3, #0
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	4615      	mov	r5, r2
 8006354:	e7ba      	b.n	80062cc <_printf_i+0x150>
 8006356:	682b      	ldr	r3, [r5, #0]
 8006358:	1d1a      	adds	r2, r3, #4
 800635a:	602a      	str	r2, [r5, #0]
 800635c:	681d      	ldr	r5, [r3, #0]
 800635e:	6862      	ldr	r2, [r4, #4]
 8006360:	2100      	movs	r1, #0
 8006362:	4628      	mov	r0, r5
 8006364:	f7f9 ff44 	bl	80001f0 <memchr>
 8006368:	b108      	cbz	r0, 800636e <_printf_i+0x1f2>
 800636a:	1b40      	subs	r0, r0, r5
 800636c:	6060      	str	r0, [r4, #4]
 800636e:	6863      	ldr	r3, [r4, #4]
 8006370:	6123      	str	r3, [r4, #16]
 8006372:	2300      	movs	r3, #0
 8006374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006378:	e7a8      	b.n	80062cc <_printf_i+0x150>
 800637a:	6923      	ldr	r3, [r4, #16]
 800637c:	462a      	mov	r2, r5
 800637e:	4649      	mov	r1, r9
 8006380:	4640      	mov	r0, r8
 8006382:	47d0      	blx	sl
 8006384:	3001      	adds	r0, #1
 8006386:	d0ab      	beq.n	80062e0 <_printf_i+0x164>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	079b      	lsls	r3, r3, #30
 800638c:	d413      	bmi.n	80063b6 <_printf_i+0x23a>
 800638e:	68e0      	ldr	r0, [r4, #12]
 8006390:	9b03      	ldr	r3, [sp, #12]
 8006392:	4298      	cmp	r0, r3
 8006394:	bfb8      	it	lt
 8006396:	4618      	movlt	r0, r3
 8006398:	e7a4      	b.n	80062e4 <_printf_i+0x168>
 800639a:	2301      	movs	r3, #1
 800639c:	4632      	mov	r2, r6
 800639e:	4649      	mov	r1, r9
 80063a0:	4640      	mov	r0, r8
 80063a2:	47d0      	blx	sl
 80063a4:	3001      	adds	r0, #1
 80063a6:	d09b      	beq.n	80062e0 <_printf_i+0x164>
 80063a8:	3501      	adds	r5, #1
 80063aa:	68e3      	ldr	r3, [r4, #12]
 80063ac:	9903      	ldr	r1, [sp, #12]
 80063ae:	1a5b      	subs	r3, r3, r1
 80063b0:	42ab      	cmp	r3, r5
 80063b2:	dcf2      	bgt.n	800639a <_printf_i+0x21e>
 80063b4:	e7eb      	b.n	800638e <_printf_i+0x212>
 80063b6:	2500      	movs	r5, #0
 80063b8:	f104 0619 	add.w	r6, r4, #25
 80063bc:	e7f5      	b.n	80063aa <_printf_i+0x22e>
 80063be:	bf00      	nop
 80063c0:	0800a4c2 	.word	0x0800a4c2
 80063c4:	0800a4d3 	.word	0x0800a4d3

080063c8 <_scanf_float>:
 80063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	b087      	sub	sp, #28
 80063ce:	4617      	mov	r7, r2
 80063d0:	9303      	str	r3, [sp, #12]
 80063d2:	688b      	ldr	r3, [r1, #8]
 80063d4:	1e5a      	subs	r2, r3, #1
 80063d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80063da:	bf83      	ittte	hi
 80063dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80063e0:	195b      	addhi	r3, r3, r5
 80063e2:	9302      	strhi	r3, [sp, #8]
 80063e4:	2300      	movls	r3, #0
 80063e6:	bf86      	itte	hi
 80063e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80063ec:	608b      	strhi	r3, [r1, #8]
 80063ee:	9302      	strls	r3, [sp, #8]
 80063f0:	680b      	ldr	r3, [r1, #0]
 80063f2:	468b      	mov	fp, r1
 80063f4:	2500      	movs	r5, #0
 80063f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80063fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80063fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006402:	4680      	mov	r8, r0
 8006404:	460c      	mov	r4, r1
 8006406:	465e      	mov	r6, fp
 8006408:	46aa      	mov	sl, r5
 800640a:	46a9      	mov	r9, r5
 800640c:	9501      	str	r5, [sp, #4]
 800640e:	68a2      	ldr	r2, [r4, #8]
 8006410:	b152      	cbz	r2, 8006428 <_scanf_float+0x60>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b4e      	cmp	r3, #78	; 0x4e
 8006418:	d864      	bhi.n	80064e4 <_scanf_float+0x11c>
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d83c      	bhi.n	8006498 <_scanf_float+0xd0>
 800641e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006422:	b2c8      	uxtb	r0, r1
 8006424:	280e      	cmp	r0, #14
 8006426:	d93a      	bls.n	800649e <_scanf_float+0xd6>
 8006428:	f1b9 0f00 	cmp.w	r9, #0
 800642c:	d003      	beq.n	8006436 <_scanf_float+0x6e>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	f10a 3aff 	add.w	sl, sl, #4294967295
 800643a:	f1ba 0f01 	cmp.w	sl, #1
 800643e:	f200 8113 	bhi.w	8006668 <_scanf_float+0x2a0>
 8006442:	455e      	cmp	r6, fp
 8006444:	f200 8105 	bhi.w	8006652 <_scanf_float+0x28a>
 8006448:	2501      	movs	r5, #1
 800644a:	4628      	mov	r0, r5
 800644c:	b007      	add	sp, #28
 800644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006452:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006456:	2a0d      	cmp	r2, #13
 8006458:	d8e6      	bhi.n	8006428 <_scanf_float+0x60>
 800645a:	a101      	add	r1, pc, #4	; (adr r1, 8006460 <_scanf_float+0x98>)
 800645c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006460:	0800659f 	.word	0x0800659f
 8006464:	08006429 	.word	0x08006429
 8006468:	08006429 	.word	0x08006429
 800646c:	08006429 	.word	0x08006429
 8006470:	080065ff 	.word	0x080065ff
 8006474:	080065d7 	.word	0x080065d7
 8006478:	08006429 	.word	0x08006429
 800647c:	08006429 	.word	0x08006429
 8006480:	080065ad 	.word	0x080065ad
 8006484:	08006429 	.word	0x08006429
 8006488:	08006429 	.word	0x08006429
 800648c:	08006429 	.word	0x08006429
 8006490:	08006429 	.word	0x08006429
 8006494:	08006565 	.word	0x08006565
 8006498:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800649c:	e7db      	b.n	8006456 <_scanf_float+0x8e>
 800649e:	290e      	cmp	r1, #14
 80064a0:	d8c2      	bhi.n	8006428 <_scanf_float+0x60>
 80064a2:	a001      	add	r0, pc, #4	; (adr r0, 80064a8 <_scanf_float+0xe0>)
 80064a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80064a8:	08006557 	.word	0x08006557
 80064ac:	08006429 	.word	0x08006429
 80064b0:	08006557 	.word	0x08006557
 80064b4:	080065eb 	.word	0x080065eb
 80064b8:	08006429 	.word	0x08006429
 80064bc:	08006505 	.word	0x08006505
 80064c0:	08006541 	.word	0x08006541
 80064c4:	08006541 	.word	0x08006541
 80064c8:	08006541 	.word	0x08006541
 80064cc:	08006541 	.word	0x08006541
 80064d0:	08006541 	.word	0x08006541
 80064d4:	08006541 	.word	0x08006541
 80064d8:	08006541 	.word	0x08006541
 80064dc:	08006541 	.word	0x08006541
 80064e0:	08006541 	.word	0x08006541
 80064e4:	2b6e      	cmp	r3, #110	; 0x6e
 80064e6:	d809      	bhi.n	80064fc <_scanf_float+0x134>
 80064e8:	2b60      	cmp	r3, #96	; 0x60
 80064ea:	d8b2      	bhi.n	8006452 <_scanf_float+0x8a>
 80064ec:	2b54      	cmp	r3, #84	; 0x54
 80064ee:	d077      	beq.n	80065e0 <_scanf_float+0x218>
 80064f0:	2b59      	cmp	r3, #89	; 0x59
 80064f2:	d199      	bne.n	8006428 <_scanf_float+0x60>
 80064f4:	2d07      	cmp	r5, #7
 80064f6:	d197      	bne.n	8006428 <_scanf_float+0x60>
 80064f8:	2508      	movs	r5, #8
 80064fa:	e029      	b.n	8006550 <_scanf_float+0x188>
 80064fc:	2b74      	cmp	r3, #116	; 0x74
 80064fe:	d06f      	beq.n	80065e0 <_scanf_float+0x218>
 8006500:	2b79      	cmp	r3, #121	; 0x79
 8006502:	e7f6      	b.n	80064f2 <_scanf_float+0x12a>
 8006504:	6821      	ldr	r1, [r4, #0]
 8006506:	05c8      	lsls	r0, r1, #23
 8006508:	d51a      	bpl.n	8006540 <_scanf_float+0x178>
 800650a:	9b02      	ldr	r3, [sp, #8]
 800650c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006510:	6021      	str	r1, [r4, #0]
 8006512:	f109 0901 	add.w	r9, r9, #1
 8006516:	b11b      	cbz	r3, 8006520 <_scanf_float+0x158>
 8006518:	3b01      	subs	r3, #1
 800651a:	3201      	adds	r2, #1
 800651c:	9302      	str	r3, [sp, #8]
 800651e:	60a2      	str	r2, [r4, #8]
 8006520:	68a3      	ldr	r3, [r4, #8]
 8006522:	3b01      	subs	r3, #1
 8006524:	60a3      	str	r3, [r4, #8]
 8006526:	6923      	ldr	r3, [r4, #16]
 8006528:	3301      	adds	r3, #1
 800652a:	6123      	str	r3, [r4, #16]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3b01      	subs	r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	607b      	str	r3, [r7, #4]
 8006534:	f340 8084 	ble.w	8006640 <_scanf_float+0x278>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	3301      	adds	r3, #1
 800653c:	603b      	str	r3, [r7, #0]
 800653e:	e766      	b.n	800640e <_scanf_float+0x46>
 8006540:	eb1a 0f05 	cmn.w	sl, r5
 8006544:	f47f af70 	bne.w	8006428 <_scanf_float+0x60>
 8006548:	6822      	ldr	r2, [r4, #0]
 800654a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800654e:	6022      	str	r2, [r4, #0]
 8006550:	f806 3b01 	strb.w	r3, [r6], #1
 8006554:	e7e4      	b.n	8006520 <_scanf_float+0x158>
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	0610      	lsls	r0, r2, #24
 800655a:	f57f af65 	bpl.w	8006428 <_scanf_float+0x60>
 800655e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006562:	e7f4      	b.n	800654e <_scanf_float+0x186>
 8006564:	f1ba 0f00 	cmp.w	sl, #0
 8006568:	d10e      	bne.n	8006588 <_scanf_float+0x1c0>
 800656a:	f1b9 0f00 	cmp.w	r9, #0
 800656e:	d10e      	bne.n	800658e <_scanf_float+0x1c6>
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006576:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800657a:	d108      	bne.n	800658e <_scanf_float+0x1c6>
 800657c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006580:	6022      	str	r2, [r4, #0]
 8006582:	f04f 0a01 	mov.w	sl, #1
 8006586:	e7e3      	b.n	8006550 <_scanf_float+0x188>
 8006588:	f1ba 0f02 	cmp.w	sl, #2
 800658c:	d055      	beq.n	800663a <_scanf_float+0x272>
 800658e:	2d01      	cmp	r5, #1
 8006590:	d002      	beq.n	8006598 <_scanf_float+0x1d0>
 8006592:	2d04      	cmp	r5, #4
 8006594:	f47f af48 	bne.w	8006428 <_scanf_float+0x60>
 8006598:	3501      	adds	r5, #1
 800659a:	b2ed      	uxtb	r5, r5
 800659c:	e7d8      	b.n	8006550 <_scanf_float+0x188>
 800659e:	f1ba 0f01 	cmp.w	sl, #1
 80065a2:	f47f af41 	bne.w	8006428 <_scanf_float+0x60>
 80065a6:	f04f 0a02 	mov.w	sl, #2
 80065aa:	e7d1      	b.n	8006550 <_scanf_float+0x188>
 80065ac:	b97d      	cbnz	r5, 80065ce <_scanf_float+0x206>
 80065ae:	f1b9 0f00 	cmp.w	r9, #0
 80065b2:	f47f af3c 	bne.w	800642e <_scanf_float+0x66>
 80065b6:	6822      	ldr	r2, [r4, #0]
 80065b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80065bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80065c0:	f47f af39 	bne.w	8006436 <_scanf_float+0x6e>
 80065c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065c8:	6022      	str	r2, [r4, #0]
 80065ca:	2501      	movs	r5, #1
 80065cc:	e7c0      	b.n	8006550 <_scanf_float+0x188>
 80065ce:	2d03      	cmp	r5, #3
 80065d0:	d0e2      	beq.n	8006598 <_scanf_float+0x1d0>
 80065d2:	2d05      	cmp	r5, #5
 80065d4:	e7de      	b.n	8006594 <_scanf_float+0x1cc>
 80065d6:	2d02      	cmp	r5, #2
 80065d8:	f47f af26 	bne.w	8006428 <_scanf_float+0x60>
 80065dc:	2503      	movs	r5, #3
 80065de:	e7b7      	b.n	8006550 <_scanf_float+0x188>
 80065e0:	2d06      	cmp	r5, #6
 80065e2:	f47f af21 	bne.w	8006428 <_scanf_float+0x60>
 80065e6:	2507      	movs	r5, #7
 80065e8:	e7b2      	b.n	8006550 <_scanf_float+0x188>
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	0591      	lsls	r1, r2, #22
 80065ee:	f57f af1b 	bpl.w	8006428 <_scanf_float+0x60>
 80065f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80065f6:	6022      	str	r2, [r4, #0]
 80065f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80065fc:	e7a8      	b.n	8006550 <_scanf_float+0x188>
 80065fe:	6822      	ldr	r2, [r4, #0]
 8006600:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006604:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006608:	d006      	beq.n	8006618 <_scanf_float+0x250>
 800660a:	0550      	lsls	r0, r2, #21
 800660c:	f57f af0c 	bpl.w	8006428 <_scanf_float+0x60>
 8006610:	f1b9 0f00 	cmp.w	r9, #0
 8006614:	f43f af0f 	beq.w	8006436 <_scanf_float+0x6e>
 8006618:	0591      	lsls	r1, r2, #22
 800661a:	bf58      	it	pl
 800661c:	9901      	ldrpl	r1, [sp, #4]
 800661e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006622:	bf58      	it	pl
 8006624:	eba9 0101 	subpl.w	r1, r9, r1
 8006628:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800662c:	bf58      	it	pl
 800662e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006632:	6022      	str	r2, [r4, #0]
 8006634:	f04f 0900 	mov.w	r9, #0
 8006638:	e78a      	b.n	8006550 <_scanf_float+0x188>
 800663a:	f04f 0a03 	mov.w	sl, #3
 800663e:	e787      	b.n	8006550 <_scanf_float+0x188>
 8006640:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006644:	4639      	mov	r1, r7
 8006646:	4640      	mov	r0, r8
 8006648:	4798      	blx	r3
 800664a:	2800      	cmp	r0, #0
 800664c:	f43f aedf 	beq.w	800640e <_scanf_float+0x46>
 8006650:	e6ea      	b.n	8006428 <_scanf_float+0x60>
 8006652:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006656:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800665a:	463a      	mov	r2, r7
 800665c:	4640      	mov	r0, r8
 800665e:	4798      	blx	r3
 8006660:	6923      	ldr	r3, [r4, #16]
 8006662:	3b01      	subs	r3, #1
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	e6ec      	b.n	8006442 <_scanf_float+0x7a>
 8006668:	1e6b      	subs	r3, r5, #1
 800666a:	2b06      	cmp	r3, #6
 800666c:	d825      	bhi.n	80066ba <_scanf_float+0x2f2>
 800666e:	2d02      	cmp	r5, #2
 8006670:	d836      	bhi.n	80066e0 <_scanf_float+0x318>
 8006672:	455e      	cmp	r6, fp
 8006674:	f67f aee8 	bls.w	8006448 <_scanf_float+0x80>
 8006678:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800667c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006680:	463a      	mov	r2, r7
 8006682:	4640      	mov	r0, r8
 8006684:	4798      	blx	r3
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	3b01      	subs	r3, #1
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	e7f1      	b.n	8006672 <_scanf_float+0x2aa>
 800668e:	9802      	ldr	r0, [sp, #8]
 8006690:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006694:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006698:	9002      	str	r0, [sp, #8]
 800669a:	463a      	mov	r2, r7
 800669c:	4640      	mov	r0, r8
 800669e:	4798      	blx	r3
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	6123      	str	r3, [r4, #16]
 80066a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066aa:	fa5f fa8a 	uxtb.w	sl, sl
 80066ae:	f1ba 0f02 	cmp.w	sl, #2
 80066b2:	d1ec      	bne.n	800668e <_scanf_float+0x2c6>
 80066b4:	3d03      	subs	r5, #3
 80066b6:	b2ed      	uxtb	r5, r5
 80066b8:	1b76      	subs	r6, r6, r5
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	05da      	lsls	r2, r3, #23
 80066be:	d52f      	bpl.n	8006720 <_scanf_float+0x358>
 80066c0:	055b      	lsls	r3, r3, #21
 80066c2:	d510      	bpl.n	80066e6 <_scanf_float+0x31e>
 80066c4:	455e      	cmp	r6, fp
 80066c6:	f67f aebf 	bls.w	8006448 <_scanf_float+0x80>
 80066ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066d2:	463a      	mov	r2, r7
 80066d4:	4640      	mov	r0, r8
 80066d6:	4798      	blx	r3
 80066d8:	6923      	ldr	r3, [r4, #16]
 80066da:	3b01      	subs	r3, #1
 80066dc:	6123      	str	r3, [r4, #16]
 80066de:	e7f1      	b.n	80066c4 <_scanf_float+0x2fc>
 80066e0:	46aa      	mov	sl, r5
 80066e2:	9602      	str	r6, [sp, #8]
 80066e4:	e7df      	b.n	80066a6 <_scanf_float+0x2de>
 80066e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80066ea:	6923      	ldr	r3, [r4, #16]
 80066ec:	2965      	cmp	r1, #101	; 0x65
 80066ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80066f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80066f6:	6123      	str	r3, [r4, #16]
 80066f8:	d00c      	beq.n	8006714 <_scanf_float+0x34c>
 80066fa:	2945      	cmp	r1, #69	; 0x45
 80066fc:	d00a      	beq.n	8006714 <_scanf_float+0x34c>
 80066fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006702:	463a      	mov	r2, r7
 8006704:	4640      	mov	r0, r8
 8006706:	4798      	blx	r3
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800670e:	3b01      	subs	r3, #1
 8006710:	1eb5      	subs	r5, r6, #2
 8006712:	6123      	str	r3, [r4, #16]
 8006714:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006718:	463a      	mov	r2, r7
 800671a:	4640      	mov	r0, r8
 800671c:	4798      	blx	r3
 800671e:	462e      	mov	r6, r5
 8006720:	6825      	ldr	r5, [r4, #0]
 8006722:	f015 0510 	ands.w	r5, r5, #16
 8006726:	d159      	bne.n	80067dc <_scanf_float+0x414>
 8006728:	7035      	strb	r5, [r6, #0]
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006734:	d11b      	bne.n	800676e <_scanf_float+0x3a6>
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	454b      	cmp	r3, r9
 800673a:	eba3 0209 	sub.w	r2, r3, r9
 800673e:	d123      	bne.n	8006788 <_scanf_float+0x3c0>
 8006740:	2200      	movs	r2, #0
 8006742:	4659      	mov	r1, fp
 8006744:	4640      	mov	r0, r8
 8006746:	f000 fe99 	bl	800747c <_strtod_r>
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	f012 0f02 	tst.w	r2, #2
 8006752:	ec57 6b10 	vmov	r6, r7, d0
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	d021      	beq.n	800679e <_scanf_float+0x3d6>
 800675a:	9903      	ldr	r1, [sp, #12]
 800675c:	1d1a      	adds	r2, r3, #4
 800675e:	600a      	str	r2, [r1, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	e9c3 6700 	strd	r6, r7, [r3]
 8006766:	68e3      	ldr	r3, [r4, #12]
 8006768:	3301      	adds	r3, #1
 800676a:	60e3      	str	r3, [r4, #12]
 800676c:	e66d      	b.n	800644a <_scanf_float+0x82>
 800676e:	9b04      	ldr	r3, [sp, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0e5      	beq.n	8006740 <_scanf_float+0x378>
 8006774:	9905      	ldr	r1, [sp, #20]
 8006776:	230a      	movs	r3, #10
 8006778:	462a      	mov	r2, r5
 800677a:	3101      	adds	r1, #1
 800677c:	4640      	mov	r0, r8
 800677e:	f000 ff05 	bl	800758c <_strtol_r>
 8006782:	9b04      	ldr	r3, [sp, #16]
 8006784:	9e05      	ldr	r6, [sp, #20]
 8006786:	1ac2      	subs	r2, r0, r3
 8006788:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800678c:	429e      	cmp	r6, r3
 800678e:	bf28      	it	cs
 8006790:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006794:	4912      	ldr	r1, [pc, #72]	; (80067e0 <_scanf_float+0x418>)
 8006796:	4630      	mov	r0, r6
 8006798:	f000 f82c 	bl	80067f4 <siprintf>
 800679c:	e7d0      	b.n	8006740 <_scanf_float+0x378>
 800679e:	9903      	ldr	r1, [sp, #12]
 80067a0:	f012 0f04 	tst.w	r2, #4
 80067a4:	f103 0204 	add.w	r2, r3, #4
 80067a8:	600a      	str	r2, [r1, #0]
 80067aa:	d1d9      	bne.n	8006760 <_scanf_float+0x398>
 80067ac:	f8d3 8000 	ldr.w	r8, [r3]
 80067b0:	ee10 2a10 	vmov	r2, s0
 80067b4:	ee10 0a10 	vmov	r0, s0
 80067b8:	463b      	mov	r3, r7
 80067ba:	4639      	mov	r1, r7
 80067bc:	f7fa f9be 	bl	8000b3c <__aeabi_dcmpun>
 80067c0:	b128      	cbz	r0, 80067ce <_scanf_float+0x406>
 80067c2:	4808      	ldr	r0, [pc, #32]	; (80067e4 <_scanf_float+0x41c>)
 80067c4:	f000 f810 	bl	80067e8 <nanf>
 80067c8:	ed88 0a00 	vstr	s0, [r8]
 80067cc:	e7cb      	b.n	8006766 <_scanf_float+0x39e>
 80067ce:	4630      	mov	r0, r6
 80067d0:	4639      	mov	r1, r7
 80067d2:	f7fa fa11 	bl	8000bf8 <__aeabi_d2f>
 80067d6:	f8c8 0000 	str.w	r0, [r8]
 80067da:	e7c4      	b.n	8006766 <_scanf_float+0x39e>
 80067dc:	2500      	movs	r5, #0
 80067de:	e634      	b.n	800644a <_scanf_float+0x82>
 80067e0:	0800a4e4 	.word	0x0800a4e4
 80067e4:	0800a8f0 	.word	0x0800a8f0

080067e8 <nanf>:
 80067e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80067f0 <nanf+0x8>
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	7fc00000 	.word	0x7fc00000

080067f4 <siprintf>:
 80067f4:	b40e      	push	{r1, r2, r3}
 80067f6:	b500      	push	{lr}
 80067f8:	b09c      	sub	sp, #112	; 0x70
 80067fa:	ab1d      	add	r3, sp, #116	; 0x74
 80067fc:	9002      	str	r0, [sp, #8]
 80067fe:	9006      	str	r0, [sp, #24]
 8006800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006804:	4809      	ldr	r0, [pc, #36]	; (800682c <siprintf+0x38>)
 8006806:	9107      	str	r1, [sp, #28]
 8006808:	9104      	str	r1, [sp, #16]
 800680a:	4909      	ldr	r1, [pc, #36]	; (8006830 <siprintf+0x3c>)
 800680c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006810:	9105      	str	r1, [sp, #20]
 8006812:	6800      	ldr	r0, [r0, #0]
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	a902      	add	r1, sp, #8
 8006818:	f002 fee4 	bl	80095e4 <_svfiprintf_r>
 800681c:	9b02      	ldr	r3, [sp, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	b01c      	add	sp, #112	; 0x70
 8006824:	f85d eb04 	ldr.w	lr, [sp], #4
 8006828:	b003      	add	sp, #12
 800682a:	4770      	bx	lr
 800682c:	2000001c 	.word	0x2000001c
 8006830:	ffff0208 	.word	0xffff0208

08006834 <sulp>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4604      	mov	r4, r0
 8006838:	460d      	mov	r5, r1
 800683a:	ec45 4b10 	vmov	d0, r4, r5
 800683e:	4616      	mov	r6, r2
 8006840:	f002 fc2e 	bl	80090a0 <__ulp>
 8006844:	ec51 0b10 	vmov	r0, r1, d0
 8006848:	b17e      	cbz	r6, 800686a <sulp+0x36>
 800684a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800684e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006852:	2b00      	cmp	r3, #0
 8006854:	dd09      	ble.n	800686a <sulp+0x36>
 8006856:	051b      	lsls	r3, r3, #20
 8006858:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800685c:	2400      	movs	r4, #0
 800685e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006862:	4622      	mov	r2, r4
 8006864:	462b      	mov	r3, r5
 8006866:	f7f9 fecf 	bl	8000608 <__aeabi_dmul>
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	0000      	movs	r0, r0
	...

08006870 <_strtod_l>:
 8006870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	ed2d 8b02 	vpush	{d8}
 8006878:	b09d      	sub	sp, #116	; 0x74
 800687a:	461f      	mov	r7, r3
 800687c:	2300      	movs	r3, #0
 800687e:	9318      	str	r3, [sp, #96]	; 0x60
 8006880:	4ba2      	ldr	r3, [pc, #648]	; (8006b0c <_strtod_l+0x29c>)
 8006882:	9213      	str	r2, [sp, #76]	; 0x4c
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	9305      	str	r3, [sp, #20]
 8006888:	4604      	mov	r4, r0
 800688a:	4618      	mov	r0, r3
 800688c:	4688      	mov	r8, r1
 800688e:	f7f9 fca7 	bl	80001e0 <strlen>
 8006892:	f04f 0a00 	mov.w	sl, #0
 8006896:	4605      	mov	r5, r0
 8006898:	f04f 0b00 	mov.w	fp, #0
 800689c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80068a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068a2:	781a      	ldrb	r2, [r3, #0]
 80068a4:	2a2b      	cmp	r2, #43	; 0x2b
 80068a6:	d04e      	beq.n	8006946 <_strtod_l+0xd6>
 80068a8:	d83b      	bhi.n	8006922 <_strtod_l+0xb2>
 80068aa:	2a0d      	cmp	r2, #13
 80068ac:	d834      	bhi.n	8006918 <_strtod_l+0xa8>
 80068ae:	2a08      	cmp	r2, #8
 80068b0:	d834      	bhi.n	800691c <_strtod_l+0xac>
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	d03e      	beq.n	8006934 <_strtod_l+0xc4>
 80068b6:	2300      	movs	r3, #0
 80068b8:	930a      	str	r3, [sp, #40]	; 0x28
 80068ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80068bc:	7833      	ldrb	r3, [r6, #0]
 80068be:	2b30      	cmp	r3, #48	; 0x30
 80068c0:	f040 80b0 	bne.w	8006a24 <_strtod_l+0x1b4>
 80068c4:	7873      	ldrb	r3, [r6, #1]
 80068c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80068ca:	2b58      	cmp	r3, #88	; 0x58
 80068cc:	d168      	bne.n	80069a0 <_strtod_l+0x130>
 80068ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	ab18      	add	r3, sp, #96	; 0x60
 80068d4:	9702      	str	r7, [sp, #8]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	4a8d      	ldr	r2, [pc, #564]	; (8006b10 <_strtod_l+0x2a0>)
 80068da:	ab19      	add	r3, sp, #100	; 0x64
 80068dc:	a917      	add	r1, sp, #92	; 0x5c
 80068de:	4620      	mov	r0, r4
 80068e0:	f001 fd38 	bl	8008354 <__gethex>
 80068e4:	f010 0707 	ands.w	r7, r0, #7
 80068e8:	4605      	mov	r5, r0
 80068ea:	d005      	beq.n	80068f8 <_strtod_l+0x88>
 80068ec:	2f06      	cmp	r7, #6
 80068ee:	d12c      	bne.n	800694a <_strtod_l+0xda>
 80068f0:	3601      	adds	r6, #1
 80068f2:	2300      	movs	r3, #0
 80068f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80068f6:	930a      	str	r3, [sp, #40]	; 0x28
 80068f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f040 8590 	bne.w	8007420 <_strtod_l+0xbb0>
 8006900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006902:	b1eb      	cbz	r3, 8006940 <_strtod_l+0xd0>
 8006904:	4652      	mov	r2, sl
 8006906:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800690a:	ec43 2b10 	vmov	d0, r2, r3
 800690e:	b01d      	add	sp, #116	; 0x74
 8006910:	ecbd 8b02 	vpop	{d8}
 8006914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006918:	2a20      	cmp	r2, #32
 800691a:	d1cc      	bne.n	80068b6 <_strtod_l+0x46>
 800691c:	3301      	adds	r3, #1
 800691e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006920:	e7be      	b.n	80068a0 <_strtod_l+0x30>
 8006922:	2a2d      	cmp	r2, #45	; 0x2d
 8006924:	d1c7      	bne.n	80068b6 <_strtod_l+0x46>
 8006926:	2201      	movs	r2, #1
 8006928:	920a      	str	r2, [sp, #40]	; 0x28
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	9217      	str	r2, [sp, #92]	; 0x5c
 800692e:	785b      	ldrb	r3, [r3, #1]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1c2      	bne.n	80068ba <_strtod_l+0x4a>
 8006934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006936:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800693a:	2b00      	cmp	r3, #0
 800693c:	f040 856e 	bne.w	800741c <_strtod_l+0xbac>
 8006940:	4652      	mov	r2, sl
 8006942:	465b      	mov	r3, fp
 8006944:	e7e1      	b.n	800690a <_strtod_l+0x9a>
 8006946:	2200      	movs	r2, #0
 8006948:	e7ee      	b.n	8006928 <_strtod_l+0xb8>
 800694a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800694c:	b13a      	cbz	r2, 800695e <_strtod_l+0xee>
 800694e:	2135      	movs	r1, #53	; 0x35
 8006950:	a81a      	add	r0, sp, #104	; 0x68
 8006952:	f002 fcb0 	bl	80092b6 <__copybits>
 8006956:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006958:	4620      	mov	r0, r4
 800695a:	f002 f86f 	bl	8008a3c <_Bfree>
 800695e:	3f01      	subs	r7, #1
 8006960:	2f04      	cmp	r7, #4
 8006962:	d806      	bhi.n	8006972 <_strtod_l+0x102>
 8006964:	e8df f007 	tbb	[pc, r7]
 8006968:	1714030a 	.word	0x1714030a
 800696c:	0a          	.byte	0x0a
 800696d:	00          	.byte	0x00
 800696e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006972:	0728      	lsls	r0, r5, #28
 8006974:	d5c0      	bpl.n	80068f8 <_strtod_l+0x88>
 8006976:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800697a:	e7bd      	b.n	80068f8 <_strtod_l+0x88>
 800697c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006980:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006982:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006986:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800698a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800698e:	e7f0      	b.n	8006972 <_strtod_l+0x102>
 8006990:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006b14 <_strtod_l+0x2a4>
 8006994:	e7ed      	b.n	8006972 <_strtod_l+0x102>
 8006996:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800699a:	f04f 3aff 	mov.w	sl, #4294967295
 800699e:	e7e8      	b.n	8006972 <_strtod_l+0x102>
 80069a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80069a6:	785b      	ldrb	r3, [r3, #1]
 80069a8:	2b30      	cmp	r3, #48	; 0x30
 80069aa:	d0f9      	beq.n	80069a0 <_strtod_l+0x130>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0a3      	beq.n	80068f8 <_strtod_l+0x88>
 80069b0:	2301      	movs	r3, #1
 80069b2:	f04f 0900 	mov.w	r9, #0
 80069b6:	9304      	str	r3, [sp, #16]
 80069b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069ba:	9308      	str	r3, [sp, #32]
 80069bc:	f8cd 901c 	str.w	r9, [sp, #28]
 80069c0:	464f      	mov	r7, r9
 80069c2:	220a      	movs	r2, #10
 80069c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80069c6:	7806      	ldrb	r6, [r0, #0]
 80069c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80069cc:	b2d9      	uxtb	r1, r3
 80069ce:	2909      	cmp	r1, #9
 80069d0:	d92a      	bls.n	8006a28 <_strtod_l+0x1b8>
 80069d2:	9905      	ldr	r1, [sp, #20]
 80069d4:	462a      	mov	r2, r5
 80069d6:	f002 ff1f 	bl	8009818 <strncmp>
 80069da:	b398      	cbz	r0, 8006a44 <_strtod_l+0x1d4>
 80069dc:	2000      	movs	r0, #0
 80069de:	4632      	mov	r2, r6
 80069e0:	463d      	mov	r5, r7
 80069e2:	9005      	str	r0, [sp, #20]
 80069e4:	4603      	mov	r3, r0
 80069e6:	2a65      	cmp	r2, #101	; 0x65
 80069e8:	d001      	beq.n	80069ee <_strtod_l+0x17e>
 80069ea:	2a45      	cmp	r2, #69	; 0x45
 80069ec:	d118      	bne.n	8006a20 <_strtod_l+0x1b0>
 80069ee:	b91d      	cbnz	r5, 80069f8 <_strtod_l+0x188>
 80069f0:	9a04      	ldr	r2, [sp, #16]
 80069f2:	4302      	orrs	r2, r0
 80069f4:	d09e      	beq.n	8006934 <_strtod_l+0xc4>
 80069f6:	2500      	movs	r5, #0
 80069f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80069fc:	f108 0201 	add.w	r2, r8, #1
 8006a00:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a02:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006a06:	2a2b      	cmp	r2, #43	; 0x2b
 8006a08:	d075      	beq.n	8006af6 <_strtod_l+0x286>
 8006a0a:	2a2d      	cmp	r2, #45	; 0x2d
 8006a0c:	d07b      	beq.n	8006b06 <_strtod_l+0x296>
 8006a0e:	f04f 0c00 	mov.w	ip, #0
 8006a12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006a16:	2909      	cmp	r1, #9
 8006a18:	f240 8082 	bls.w	8006b20 <_strtod_l+0x2b0>
 8006a1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006a20:	2600      	movs	r6, #0
 8006a22:	e09d      	b.n	8006b60 <_strtod_l+0x2f0>
 8006a24:	2300      	movs	r3, #0
 8006a26:	e7c4      	b.n	80069b2 <_strtod_l+0x142>
 8006a28:	2f08      	cmp	r7, #8
 8006a2a:	bfd8      	it	le
 8006a2c:	9907      	ldrle	r1, [sp, #28]
 8006a2e:	f100 0001 	add.w	r0, r0, #1
 8006a32:	bfda      	itte	le
 8006a34:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a38:	9307      	strle	r3, [sp, #28]
 8006a3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006a3e:	3701      	adds	r7, #1
 8006a40:	9017      	str	r0, [sp, #92]	; 0x5c
 8006a42:	e7bf      	b.n	80069c4 <_strtod_l+0x154>
 8006a44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a46:	195a      	adds	r2, r3, r5
 8006a48:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a4a:	5d5a      	ldrb	r2, [r3, r5]
 8006a4c:	2f00      	cmp	r7, #0
 8006a4e:	d037      	beq.n	8006ac0 <_strtod_l+0x250>
 8006a50:	9005      	str	r0, [sp, #20]
 8006a52:	463d      	mov	r5, r7
 8006a54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006a58:	2b09      	cmp	r3, #9
 8006a5a:	d912      	bls.n	8006a82 <_strtod_l+0x212>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e7c2      	b.n	80069e6 <_strtod_l+0x176>
 8006a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a66:	785a      	ldrb	r2, [r3, #1]
 8006a68:	3001      	adds	r0, #1
 8006a6a:	2a30      	cmp	r2, #48	; 0x30
 8006a6c:	d0f8      	beq.n	8006a60 <_strtod_l+0x1f0>
 8006a6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	f200 84d9 	bhi.w	800742a <_strtod_l+0xbba>
 8006a78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a7a:	9005      	str	r0, [sp, #20]
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	9308      	str	r3, [sp, #32]
 8006a80:	4605      	mov	r5, r0
 8006a82:	3a30      	subs	r2, #48	; 0x30
 8006a84:	f100 0301 	add.w	r3, r0, #1
 8006a88:	d014      	beq.n	8006ab4 <_strtod_l+0x244>
 8006a8a:	9905      	ldr	r1, [sp, #20]
 8006a8c:	4419      	add	r1, r3
 8006a8e:	9105      	str	r1, [sp, #20]
 8006a90:	462b      	mov	r3, r5
 8006a92:	eb00 0e05 	add.w	lr, r0, r5
 8006a96:	210a      	movs	r1, #10
 8006a98:	4573      	cmp	r3, lr
 8006a9a:	d113      	bne.n	8006ac4 <_strtod_l+0x254>
 8006a9c:	182b      	adds	r3, r5, r0
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	f105 0501 	add.w	r5, r5, #1
 8006aa4:	4405      	add	r5, r0
 8006aa6:	dc1c      	bgt.n	8006ae2 <_strtod_l+0x272>
 8006aa8:	9907      	ldr	r1, [sp, #28]
 8006aaa:	230a      	movs	r3, #10
 8006aac:	fb03 2301 	mla	r3, r3, r1, r2
 8006ab0:	9307      	str	r3, [sp, #28]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ab6:	1c51      	adds	r1, r2, #1
 8006ab8:	9117      	str	r1, [sp, #92]	; 0x5c
 8006aba:	7852      	ldrb	r2, [r2, #1]
 8006abc:	4618      	mov	r0, r3
 8006abe:	e7c9      	b.n	8006a54 <_strtod_l+0x1e4>
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	e7d2      	b.n	8006a6a <_strtod_l+0x1fa>
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	dc04      	bgt.n	8006ad2 <_strtod_l+0x262>
 8006ac8:	9e07      	ldr	r6, [sp, #28]
 8006aca:	434e      	muls	r6, r1
 8006acc:	9607      	str	r6, [sp, #28]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	e7e2      	b.n	8006a98 <_strtod_l+0x228>
 8006ad2:	f103 0c01 	add.w	ip, r3, #1
 8006ad6:	f1bc 0f10 	cmp.w	ip, #16
 8006ada:	bfd8      	it	le
 8006adc:	fb01 f909 	mulle.w	r9, r1, r9
 8006ae0:	e7f5      	b.n	8006ace <_strtod_l+0x25e>
 8006ae2:	2d10      	cmp	r5, #16
 8006ae4:	bfdc      	itt	le
 8006ae6:	230a      	movle	r3, #10
 8006ae8:	fb03 2909 	mlale	r9, r3, r9, r2
 8006aec:	e7e1      	b.n	8006ab2 <_strtod_l+0x242>
 8006aee:	2300      	movs	r3, #0
 8006af0:	9305      	str	r3, [sp, #20]
 8006af2:	2301      	movs	r3, #1
 8006af4:	e77c      	b.n	80069f0 <_strtod_l+0x180>
 8006af6:	f04f 0c00 	mov.w	ip, #0
 8006afa:	f108 0202 	add.w	r2, r8, #2
 8006afe:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b00:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006b04:	e785      	b.n	8006a12 <_strtod_l+0x1a2>
 8006b06:	f04f 0c01 	mov.w	ip, #1
 8006b0a:	e7f6      	b.n	8006afa <_strtod_l+0x28a>
 8006b0c:	0800a738 	.word	0x0800a738
 8006b10:	0800a4ec 	.word	0x0800a4ec
 8006b14:	7ff00000 	.word	0x7ff00000
 8006b18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b1a:	1c51      	adds	r1, r2, #1
 8006b1c:	9117      	str	r1, [sp, #92]	; 0x5c
 8006b1e:	7852      	ldrb	r2, [r2, #1]
 8006b20:	2a30      	cmp	r2, #48	; 0x30
 8006b22:	d0f9      	beq.n	8006b18 <_strtod_l+0x2a8>
 8006b24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006b28:	2908      	cmp	r1, #8
 8006b2a:	f63f af79 	bhi.w	8006a20 <_strtod_l+0x1b0>
 8006b2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006b32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b34:	9206      	str	r2, [sp, #24]
 8006b36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b38:	1c51      	adds	r1, r2, #1
 8006b3a:	9117      	str	r1, [sp, #92]	; 0x5c
 8006b3c:	7852      	ldrb	r2, [r2, #1]
 8006b3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006b42:	2e09      	cmp	r6, #9
 8006b44:	d937      	bls.n	8006bb6 <_strtod_l+0x346>
 8006b46:	9e06      	ldr	r6, [sp, #24]
 8006b48:	1b89      	subs	r1, r1, r6
 8006b4a:	2908      	cmp	r1, #8
 8006b4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006b50:	dc02      	bgt.n	8006b58 <_strtod_l+0x2e8>
 8006b52:	4576      	cmp	r6, lr
 8006b54:	bfa8      	it	ge
 8006b56:	4676      	movge	r6, lr
 8006b58:	f1bc 0f00 	cmp.w	ip, #0
 8006b5c:	d000      	beq.n	8006b60 <_strtod_l+0x2f0>
 8006b5e:	4276      	negs	r6, r6
 8006b60:	2d00      	cmp	r5, #0
 8006b62:	d14d      	bne.n	8006c00 <_strtod_l+0x390>
 8006b64:	9904      	ldr	r1, [sp, #16]
 8006b66:	4301      	orrs	r1, r0
 8006b68:	f47f aec6 	bne.w	80068f8 <_strtod_l+0x88>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f47f aee1 	bne.w	8006934 <_strtod_l+0xc4>
 8006b72:	2a69      	cmp	r2, #105	; 0x69
 8006b74:	d027      	beq.n	8006bc6 <_strtod_l+0x356>
 8006b76:	dc24      	bgt.n	8006bc2 <_strtod_l+0x352>
 8006b78:	2a49      	cmp	r2, #73	; 0x49
 8006b7a:	d024      	beq.n	8006bc6 <_strtod_l+0x356>
 8006b7c:	2a4e      	cmp	r2, #78	; 0x4e
 8006b7e:	f47f aed9 	bne.w	8006934 <_strtod_l+0xc4>
 8006b82:	499f      	ldr	r1, [pc, #636]	; (8006e00 <_strtod_l+0x590>)
 8006b84:	a817      	add	r0, sp, #92	; 0x5c
 8006b86:	f001 fe3d 	bl	8008804 <__match>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	f43f aed2 	beq.w	8006934 <_strtod_l+0xc4>
 8006b90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b28      	cmp	r3, #40	; 0x28
 8006b96:	d12d      	bne.n	8006bf4 <_strtod_l+0x384>
 8006b98:	499a      	ldr	r1, [pc, #616]	; (8006e04 <_strtod_l+0x594>)
 8006b9a:	aa1a      	add	r2, sp, #104	; 0x68
 8006b9c:	a817      	add	r0, sp, #92	; 0x5c
 8006b9e:	f001 fe45 	bl	800882c <__hexnan>
 8006ba2:	2805      	cmp	r0, #5
 8006ba4:	d126      	bne.n	8006bf4 <_strtod_l+0x384>
 8006ba6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ba8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006bac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006bb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006bb4:	e6a0      	b.n	80068f8 <_strtod_l+0x88>
 8006bb6:	210a      	movs	r1, #10
 8006bb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006bbc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006bc0:	e7b9      	b.n	8006b36 <_strtod_l+0x2c6>
 8006bc2:	2a6e      	cmp	r2, #110	; 0x6e
 8006bc4:	e7db      	b.n	8006b7e <_strtod_l+0x30e>
 8006bc6:	4990      	ldr	r1, [pc, #576]	; (8006e08 <_strtod_l+0x598>)
 8006bc8:	a817      	add	r0, sp, #92	; 0x5c
 8006bca:	f001 fe1b 	bl	8008804 <__match>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f43f aeb0 	beq.w	8006934 <_strtod_l+0xc4>
 8006bd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bd6:	498d      	ldr	r1, [pc, #564]	; (8006e0c <_strtod_l+0x59c>)
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	a817      	add	r0, sp, #92	; 0x5c
 8006bdc:	9317      	str	r3, [sp, #92]	; 0x5c
 8006bde:	f001 fe11 	bl	8008804 <__match>
 8006be2:	b910      	cbnz	r0, 8006bea <_strtod_l+0x37a>
 8006be4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006be6:	3301      	adds	r3, #1
 8006be8:	9317      	str	r3, [sp, #92]	; 0x5c
 8006bea:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006e1c <_strtod_l+0x5ac>
 8006bee:	f04f 0a00 	mov.w	sl, #0
 8006bf2:	e681      	b.n	80068f8 <_strtod_l+0x88>
 8006bf4:	4886      	ldr	r0, [pc, #536]	; (8006e10 <_strtod_l+0x5a0>)
 8006bf6:	f002 fdf7 	bl	80097e8 <nan>
 8006bfa:	ec5b ab10 	vmov	sl, fp, d0
 8006bfe:	e67b      	b.n	80068f8 <_strtod_l+0x88>
 8006c00:	9b05      	ldr	r3, [sp, #20]
 8006c02:	9807      	ldr	r0, [sp, #28]
 8006c04:	1af3      	subs	r3, r6, r3
 8006c06:	2f00      	cmp	r7, #0
 8006c08:	bf08      	it	eq
 8006c0a:	462f      	moveq	r7, r5
 8006c0c:	2d10      	cmp	r5, #16
 8006c0e:	9306      	str	r3, [sp, #24]
 8006c10:	46a8      	mov	r8, r5
 8006c12:	bfa8      	it	ge
 8006c14:	f04f 0810 	movge.w	r8, #16
 8006c18:	f7f9 fc7c 	bl	8000514 <__aeabi_ui2d>
 8006c1c:	2d09      	cmp	r5, #9
 8006c1e:	4682      	mov	sl, r0
 8006c20:	468b      	mov	fp, r1
 8006c22:	dd13      	ble.n	8006c4c <_strtod_l+0x3dc>
 8006c24:	4b7b      	ldr	r3, [pc, #492]	; (8006e14 <_strtod_l+0x5a4>)
 8006c26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006c2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c2e:	f7f9 fceb 	bl	8000608 <__aeabi_dmul>
 8006c32:	4682      	mov	sl, r0
 8006c34:	4648      	mov	r0, r9
 8006c36:	468b      	mov	fp, r1
 8006c38:	f7f9 fc6c 	bl	8000514 <__aeabi_ui2d>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4650      	mov	r0, sl
 8006c42:	4659      	mov	r1, fp
 8006c44:	f7f9 fb2a 	bl	800029c <__adddf3>
 8006c48:	4682      	mov	sl, r0
 8006c4a:	468b      	mov	fp, r1
 8006c4c:	2d0f      	cmp	r5, #15
 8006c4e:	dc38      	bgt.n	8006cc2 <_strtod_l+0x452>
 8006c50:	9b06      	ldr	r3, [sp, #24]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f43f ae50 	beq.w	80068f8 <_strtod_l+0x88>
 8006c58:	dd24      	ble.n	8006ca4 <_strtod_l+0x434>
 8006c5a:	2b16      	cmp	r3, #22
 8006c5c:	dc0b      	bgt.n	8006c76 <_strtod_l+0x406>
 8006c5e:	496d      	ldr	r1, [pc, #436]	; (8006e14 <_strtod_l+0x5a4>)
 8006c60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c68:	4652      	mov	r2, sl
 8006c6a:	465b      	mov	r3, fp
 8006c6c:	f7f9 fccc 	bl	8000608 <__aeabi_dmul>
 8006c70:	4682      	mov	sl, r0
 8006c72:	468b      	mov	fp, r1
 8006c74:	e640      	b.n	80068f8 <_strtod_l+0x88>
 8006c76:	9a06      	ldr	r2, [sp, #24]
 8006c78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	db20      	blt.n	8006cc2 <_strtod_l+0x452>
 8006c80:	4c64      	ldr	r4, [pc, #400]	; (8006e14 <_strtod_l+0x5a4>)
 8006c82:	f1c5 050f 	rsb	r5, r5, #15
 8006c86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c92:	f7f9 fcb9 	bl	8000608 <__aeabi_dmul>
 8006c96:	9b06      	ldr	r3, [sp, #24]
 8006c98:	1b5d      	subs	r5, r3, r5
 8006c9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006c9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ca2:	e7e3      	b.n	8006c6c <_strtod_l+0x3fc>
 8006ca4:	9b06      	ldr	r3, [sp, #24]
 8006ca6:	3316      	adds	r3, #22
 8006ca8:	db0b      	blt.n	8006cc2 <_strtod_l+0x452>
 8006caa:	9b05      	ldr	r3, [sp, #20]
 8006cac:	1b9e      	subs	r6, r3, r6
 8006cae:	4b59      	ldr	r3, [pc, #356]	; (8006e14 <_strtod_l+0x5a4>)
 8006cb0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006cb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cb8:	4650      	mov	r0, sl
 8006cba:	4659      	mov	r1, fp
 8006cbc:	f7f9 fdce 	bl	800085c <__aeabi_ddiv>
 8006cc0:	e7d6      	b.n	8006c70 <_strtod_l+0x400>
 8006cc2:	9b06      	ldr	r3, [sp, #24]
 8006cc4:	eba5 0808 	sub.w	r8, r5, r8
 8006cc8:	4498      	add	r8, r3
 8006cca:	f1b8 0f00 	cmp.w	r8, #0
 8006cce:	dd74      	ble.n	8006dba <_strtod_l+0x54a>
 8006cd0:	f018 030f 	ands.w	r3, r8, #15
 8006cd4:	d00a      	beq.n	8006cec <_strtod_l+0x47c>
 8006cd6:	494f      	ldr	r1, [pc, #316]	; (8006e14 <_strtod_l+0x5a4>)
 8006cd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cdc:	4652      	mov	r2, sl
 8006cde:	465b      	mov	r3, fp
 8006ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ce4:	f7f9 fc90 	bl	8000608 <__aeabi_dmul>
 8006ce8:	4682      	mov	sl, r0
 8006cea:	468b      	mov	fp, r1
 8006cec:	f038 080f 	bics.w	r8, r8, #15
 8006cf0:	d04f      	beq.n	8006d92 <_strtod_l+0x522>
 8006cf2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006cf6:	dd22      	ble.n	8006d3e <_strtod_l+0x4ce>
 8006cf8:	2500      	movs	r5, #0
 8006cfa:	462e      	mov	r6, r5
 8006cfc:	9507      	str	r5, [sp, #28]
 8006cfe:	9505      	str	r5, [sp, #20]
 8006d00:	2322      	movs	r3, #34	; 0x22
 8006d02:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006e1c <_strtod_l+0x5ac>
 8006d06:	6023      	str	r3, [r4, #0]
 8006d08:	f04f 0a00 	mov.w	sl, #0
 8006d0c:	9b07      	ldr	r3, [sp, #28]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f43f adf2 	beq.w	80068f8 <_strtod_l+0x88>
 8006d14:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d16:	4620      	mov	r0, r4
 8006d18:	f001 fe90 	bl	8008a3c <_Bfree>
 8006d1c:	9905      	ldr	r1, [sp, #20]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f001 fe8c 	bl	8008a3c <_Bfree>
 8006d24:	4631      	mov	r1, r6
 8006d26:	4620      	mov	r0, r4
 8006d28:	f001 fe88 	bl	8008a3c <_Bfree>
 8006d2c:	9907      	ldr	r1, [sp, #28]
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f001 fe84 	bl	8008a3c <_Bfree>
 8006d34:	4629      	mov	r1, r5
 8006d36:	4620      	mov	r0, r4
 8006d38:	f001 fe80 	bl	8008a3c <_Bfree>
 8006d3c:	e5dc      	b.n	80068f8 <_strtod_l+0x88>
 8006d3e:	4b36      	ldr	r3, [pc, #216]	; (8006e18 <_strtod_l+0x5a8>)
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	2300      	movs	r3, #0
 8006d44:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006d48:	4650      	mov	r0, sl
 8006d4a:	4659      	mov	r1, fp
 8006d4c:	4699      	mov	r9, r3
 8006d4e:	f1b8 0f01 	cmp.w	r8, #1
 8006d52:	dc21      	bgt.n	8006d98 <_strtod_l+0x528>
 8006d54:	b10b      	cbz	r3, 8006d5a <_strtod_l+0x4ea>
 8006d56:	4682      	mov	sl, r0
 8006d58:	468b      	mov	fp, r1
 8006d5a:	4b2f      	ldr	r3, [pc, #188]	; (8006e18 <_strtod_l+0x5a8>)
 8006d5c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006d60:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006d64:	4652      	mov	r2, sl
 8006d66:	465b      	mov	r3, fp
 8006d68:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006d6c:	f7f9 fc4c 	bl	8000608 <__aeabi_dmul>
 8006d70:	4b2a      	ldr	r3, [pc, #168]	; (8006e1c <_strtod_l+0x5ac>)
 8006d72:	460a      	mov	r2, r1
 8006d74:	400b      	ands	r3, r1
 8006d76:	492a      	ldr	r1, [pc, #168]	; (8006e20 <_strtod_l+0x5b0>)
 8006d78:	428b      	cmp	r3, r1
 8006d7a:	4682      	mov	sl, r0
 8006d7c:	d8bc      	bhi.n	8006cf8 <_strtod_l+0x488>
 8006d7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006d82:	428b      	cmp	r3, r1
 8006d84:	bf86      	itte	hi
 8006d86:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006e24 <_strtod_l+0x5b4>
 8006d8a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006d8e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006d92:	2300      	movs	r3, #0
 8006d94:	9304      	str	r3, [sp, #16]
 8006d96:	e084      	b.n	8006ea2 <_strtod_l+0x632>
 8006d98:	f018 0f01 	tst.w	r8, #1
 8006d9c:	d005      	beq.n	8006daa <_strtod_l+0x53a>
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	f7f9 fc30 	bl	8000608 <__aeabi_dmul>
 8006da8:	2301      	movs	r3, #1
 8006daa:	9a04      	ldr	r2, [sp, #16]
 8006dac:	3208      	adds	r2, #8
 8006dae:	f109 0901 	add.w	r9, r9, #1
 8006db2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006db6:	9204      	str	r2, [sp, #16]
 8006db8:	e7c9      	b.n	8006d4e <_strtod_l+0x4de>
 8006dba:	d0ea      	beq.n	8006d92 <_strtod_l+0x522>
 8006dbc:	f1c8 0800 	rsb	r8, r8, #0
 8006dc0:	f018 020f 	ands.w	r2, r8, #15
 8006dc4:	d00a      	beq.n	8006ddc <_strtod_l+0x56c>
 8006dc6:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <_strtod_l+0x5a4>)
 8006dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dcc:	4650      	mov	r0, sl
 8006dce:	4659      	mov	r1, fp
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f7f9 fd42 	bl	800085c <__aeabi_ddiv>
 8006dd8:	4682      	mov	sl, r0
 8006dda:	468b      	mov	fp, r1
 8006ddc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006de0:	d0d7      	beq.n	8006d92 <_strtod_l+0x522>
 8006de2:	f1b8 0f1f 	cmp.w	r8, #31
 8006de6:	dd1f      	ble.n	8006e28 <_strtod_l+0x5b8>
 8006de8:	2500      	movs	r5, #0
 8006dea:	462e      	mov	r6, r5
 8006dec:	9507      	str	r5, [sp, #28]
 8006dee:	9505      	str	r5, [sp, #20]
 8006df0:	2322      	movs	r3, #34	; 0x22
 8006df2:	f04f 0a00 	mov.w	sl, #0
 8006df6:	f04f 0b00 	mov.w	fp, #0
 8006dfa:	6023      	str	r3, [r4, #0]
 8006dfc:	e786      	b.n	8006d0c <_strtod_l+0x49c>
 8006dfe:	bf00      	nop
 8006e00:	0800a4bd 	.word	0x0800a4bd
 8006e04:	0800a500 	.word	0x0800a500
 8006e08:	0800a4b5 	.word	0x0800a4b5
 8006e0c:	0800a644 	.word	0x0800a644
 8006e10:	0800a8f0 	.word	0x0800a8f0
 8006e14:	0800a7d0 	.word	0x0800a7d0
 8006e18:	0800a7a8 	.word	0x0800a7a8
 8006e1c:	7ff00000 	.word	0x7ff00000
 8006e20:	7ca00000 	.word	0x7ca00000
 8006e24:	7fefffff 	.word	0x7fefffff
 8006e28:	f018 0310 	ands.w	r3, r8, #16
 8006e2c:	bf18      	it	ne
 8006e2e:	236a      	movne	r3, #106	; 0x6a
 8006e30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80071e0 <_strtod_l+0x970>
 8006e34:	9304      	str	r3, [sp, #16]
 8006e36:	4650      	mov	r0, sl
 8006e38:	4659      	mov	r1, fp
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f018 0f01 	tst.w	r8, #1
 8006e40:	d004      	beq.n	8006e4c <_strtod_l+0x5dc>
 8006e42:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006e46:	f7f9 fbdf 	bl	8000608 <__aeabi_dmul>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006e50:	f109 0908 	add.w	r9, r9, #8
 8006e54:	d1f2      	bne.n	8006e3c <_strtod_l+0x5cc>
 8006e56:	b10b      	cbz	r3, 8006e5c <_strtod_l+0x5ec>
 8006e58:	4682      	mov	sl, r0
 8006e5a:	468b      	mov	fp, r1
 8006e5c:	9b04      	ldr	r3, [sp, #16]
 8006e5e:	b1c3      	cbz	r3, 8006e92 <_strtod_l+0x622>
 8006e60:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006e64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	4659      	mov	r1, fp
 8006e6c:	dd11      	ble.n	8006e92 <_strtod_l+0x622>
 8006e6e:	2b1f      	cmp	r3, #31
 8006e70:	f340 8124 	ble.w	80070bc <_strtod_l+0x84c>
 8006e74:	2b34      	cmp	r3, #52	; 0x34
 8006e76:	bfde      	ittt	le
 8006e78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006e7c:	f04f 33ff 	movle.w	r3, #4294967295
 8006e80:	fa03 f202 	lslle.w	r2, r3, r2
 8006e84:	f04f 0a00 	mov.w	sl, #0
 8006e88:	bfcc      	ite	gt
 8006e8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006e8e:	ea02 0b01 	andle.w	fp, r2, r1
 8006e92:	2200      	movs	r2, #0
 8006e94:	2300      	movs	r3, #0
 8006e96:	4650      	mov	r0, sl
 8006e98:	4659      	mov	r1, fp
 8006e9a:	f7f9 fe1d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d1a2      	bne.n	8006de8 <_strtod_l+0x578>
 8006ea2:	9b07      	ldr	r3, [sp, #28]
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	9908      	ldr	r1, [sp, #32]
 8006ea8:	462b      	mov	r3, r5
 8006eaa:	463a      	mov	r2, r7
 8006eac:	4620      	mov	r0, r4
 8006eae:	f001 fe2d 	bl	8008b0c <__s2b>
 8006eb2:	9007      	str	r0, [sp, #28]
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f43f af1f 	beq.w	8006cf8 <_strtod_l+0x488>
 8006eba:	9b05      	ldr	r3, [sp, #20]
 8006ebc:	1b9e      	subs	r6, r3, r6
 8006ebe:	9b06      	ldr	r3, [sp, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	bfb4      	ite	lt
 8006ec4:	4633      	movlt	r3, r6
 8006ec6:	2300      	movge	r3, #0
 8006ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8006eca:	9b06      	ldr	r3, [sp, #24]
 8006ecc:	2500      	movs	r5, #0
 8006ece:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ed2:	9312      	str	r3, [sp, #72]	; 0x48
 8006ed4:	462e      	mov	r6, r5
 8006ed6:	9b07      	ldr	r3, [sp, #28]
 8006ed8:	4620      	mov	r0, r4
 8006eda:	6859      	ldr	r1, [r3, #4]
 8006edc:	f001 fd6e 	bl	80089bc <_Balloc>
 8006ee0:	9005      	str	r0, [sp, #20]
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	f43f af0c 	beq.w	8006d00 <_strtod_l+0x490>
 8006ee8:	9b07      	ldr	r3, [sp, #28]
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	3202      	adds	r2, #2
 8006eee:	f103 010c 	add.w	r1, r3, #12
 8006ef2:	0092      	lsls	r2, r2, #2
 8006ef4:	300c      	adds	r0, #12
 8006ef6:	f001 fd53 	bl	80089a0 <memcpy>
 8006efa:	ec4b ab10 	vmov	d0, sl, fp
 8006efe:	aa1a      	add	r2, sp, #104	; 0x68
 8006f00:	a919      	add	r1, sp, #100	; 0x64
 8006f02:	4620      	mov	r0, r4
 8006f04:	f002 f948 	bl	8009198 <__d2b>
 8006f08:	ec4b ab18 	vmov	d8, sl, fp
 8006f0c:	9018      	str	r0, [sp, #96]	; 0x60
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	f43f aef6 	beq.w	8006d00 <_strtod_l+0x490>
 8006f14:	2101      	movs	r1, #1
 8006f16:	4620      	mov	r0, r4
 8006f18:	f001 fe92 	bl	8008c40 <__i2b>
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f43f aeee 	beq.w	8006d00 <_strtod_l+0x490>
 8006f24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f26:	9904      	ldr	r1, [sp, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bfab      	itete	ge
 8006f2c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006f2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006f30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006f32:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006f36:	bfac      	ite	ge
 8006f38:	eb03 0902 	addge.w	r9, r3, r2
 8006f3c:	1ad7      	sublt	r7, r2, r3
 8006f3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006f40:	eba3 0801 	sub.w	r8, r3, r1
 8006f44:	4490      	add	r8, r2
 8006f46:	4ba1      	ldr	r3, [pc, #644]	; (80071cc <_strtod_l+0x95c>)
 8006f48:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f4c:	4598      	cmp	r8, r3
 8006f4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f52:	f280 80c7 	bge.w	80070e4 <_strtod_l+0x874>
 8006f56:	eba3 0308 	sub.w	r3, r3, r8
 8006f5a:	2b1f      	cmp	r3, #31
 8006f5c:	eba2 0203 	sub.w	r2, r2, r3
 8006f60:	f04f 0101 	mov.w	r1, #1
 8006f64:	f300 80b1 	bgt.w	80070ca <_strtod_l+0x85a>
 8006f68:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8006f6e:	2300      	movs	r3, #0
 8006f70:	9308      	str	r3, [sp, #32]
 8006f72:	eb09 0802 	add.w	r8, r9, r2
 8006f76:	9b04      	ldr	r3, [sp, #16]
 8006f78:	45c1      	cmp	r9, r8
 8006f7a:	4417      	add	r7, r2
 8006f7c:	441f      	add	r7, r3
 8006f7e:	464b      	mov	r3, r9
 8006f80:	bfa8      	it	ge
 8006f82:	4643      	movge	r3, r8
 8006f84:	42bb      	cmp	r3, r7
 8006f86:	bfa8      	it	ge
 8006f88:	463b      	movge	r3, r7
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bfc2      	ittt	gt
 8006f8e:	eba8 0803 	subgt.w	r8, r8, r3
 8006f92:	1aff      	subgt	r7, r7, r3
 8006f94:	eba9 0903 	subgt.w	r9, r9, r3
 8006f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	dd17      	ble.n	8006fce <_strtod_l+0x75e>
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f001 ff0c 	bl	8008dc0 <__pow5mult>
 8006fa8:	4606      	mov	r6, r0
 8006faa:	2800      	cmp	r0, #0
 8006fac:	f43f aea8 	beq.w	8006d00 <_strtod_l+0x490>
 8006fb0:	4601      	mov	r1, r0
 8006fb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f001 fe59 	bl	8008c6c <__multiply>
 8006fba:	900b      	str	r0, [sp, #44]	; 0x2c
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f43f ae9f 	beq.w	8006d00 <_strtod_l+0x490>
 8006fc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f001 fd39 	bl	8008a3c <_Bfree>
 8006fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fcc:	9318      	str	r3, [sp, #96]	; 0x60
 8006fce:	f1b8 0f00 	cmp.w	r8, #0
 8006fd2:	f300 808c 	bgt.w	80070ee <_strtod_l+0x87e>
 8006fd6:	9b06      	ldr	r3, [sp, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	dd08      	ble.n	8006fee <_strtod_l+0x77e>
 8006fdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fde:	9905      	ldr	r1, [sp, #20]
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f001 feed 	bl	8008dc0 <__pow5mult>
 8006fe6:	9005      	str	r0, [sp, #20]
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f43f ae89 	beq.w	8006d00 <_strtod_l+0x490>
 8006fee:	2f00      	cmp	r7, #0
 8006ff0:	dd08      	ble.n	8007004 <_strtod_l+0x794>
 8006ff2:	9905      	ldr	r1, [sp, #20]
 8006ff4:	463a      	mov	r2, r7
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f001 ff3c 	bl	8008e74 <__lshift>
 8006ffc:	9005      	str	r0, [sp, #20]
 8006ffe:	2800      	cmp	r0, #0
 8007000:	f43f ae7e 	beq.w	8006d00 <_strtod_l+0x490>
 8007004:	f1b9 0f00 	cmp.w	r9, #0
 8007008:	dd08      	ble.n	800701c <_strtod_l+0x7ac>
 800700a:	4631      	mov	r1, r6
 800700c:	464a      	mov	r2, r9
 800700e:	4620      	mov	r0, r4
 8007010:	f001 ff30 	bl	8008e74 <__lshift>
 8007014:	4606      	mov	r6, r0
 8007016:	2800      	cmp	r0, #0
 8007018:	f43f ae72 	beq.w	8006d00 <_strtod_l+0x490>
 800701c:	9a05      	ldr	r2, [sp, #20]
 800701e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007020:	4620      	mov	r0, r4
 8007022:	f001 ffb3 	bl	8008f8c <__mdiff>
 8007026:	4605      	mov	r5, r0
 8007028:	2800      	cmp	r0, #0
 800702a:	f43f ae69 	beq.w	8006d00 <_strtod_l+0x490>
 800702e:	68c3      	ldr	r3, [r0, #12]
 8007030:	930b      	str	r3, [sp, #44]	; 0x2c
 8007032:	2300      	movs	r3, #0
 8007034:	60c3      	str	r3, [r0, #12]
 8007036:	4631      	mov	r1, r6
 8007038:	f001 ff8c 	bl	8008f54 <__mcmp>
 800703c:	2800      	cmp	r0, #0
 800703e:	da60      	bge.n	8007102 <_strtod_l+0x892>
 8007040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007042:	ea53 030a 	orrs.w	r3, r3, sl
 8007046:	f040 8082 	bne.w	800714e <_strtod_l+0x8de>
 800704a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800704e:	2b00      	cmp	r3, #0
 8007050:	d17d      	bne.n	800714e <_strtod_l+0x8de>
 8007052:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007056:	0d1b      	lsrs	r3, r3, #20
 8007058:	051b      	lsls	r3, r3, #20
 800705a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800705e:	d976      	bls.n	800714e <_strtod_l+0x8de>
 8007060:	696b      	ldr	r3, [r5, #20]
 8007062:	b913      	cbnz	r3, 800706a <_strtod_l+0x7fa>
 8007064:	692b      	ldr	r3, [r5, #16]
 8007066:	2b01      	cmp	r3, #1
 8007068:	dd71      	ble.n	800714e <_strtod_l+0x8de>
 800706a:	4629      	mov	r1, r5
 800706c:	2201      	movs	r2, #1
 800706e:	4620      	mov	r0, r4
 8007070:	f001 ff00 	bl	8008e74 <__lshift>
 8007074:	4631      	mov	r1, r6
 8007076:	4605      	mov	r5, r0
 8007078:	f001 ff6c 	bl	8008f54 <__mcmp>
 800707c:	2800      	cmp	r0, #0
 800707e:	dd66      	ble.n	800714e <_strtod_l+0x8de>
 8007080:	9904      	ldr	r1, [sp, #16]
 8007082:	4a53      	ldr	r2, [pc, #332]	; (80071d0 <_strtod_l+0x960>)
 8007084:	465b      	mov	r3, fp
 8007086:	2900      	cmp	r1, #0
 8007088:	f000 8081 	beq.w	800718e <_strtod_l+0x91e>
 800708c:	ea02 010b 	and.w	r1, r2, fp
 8007090:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007094:	dc7b      	bgt.n	800718e <_strtod_l+0x91e>
 8007096:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800709a:	f77f aea9 	ble.w	8006df0 <_strtod_l+0x580>
 800709e:	4b4d      	ldr	r3, [pc, #308]	; (80071d4 <_strtod_l+0x964>)
 80070a0:	4650      	mov	r0, sl
 80070a2:	4659      	mov	r1, fp
 80070a4:	2200      	movs	r2, #0
 80070a6:	f7f9 faaf 	bl	8000608 <__aeabi_dmul>
 80070aa:	460b      	mov	r3, r1
 80070ac:	4303      	orrs	r3, r0
 80070ae:	bf08      	it	eq
 80070b0:	2322      	moveq	r3, #34	; 0x22
 80070b2:	4682      	mov	sl, r0
 80070b4:	468b      	mov	fp, r1
 80070b6:	bf08      	it	eq
 80070b8:	6023      	streq	r3, [r4, #0]
 80070ba:	e62b      	b.n	8006d14 <_strtod_l+0x4a4>
 80070bc:	f04f 32ff 	mov.w	r2, #4294967295
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	ea03 0a0a 	and.w	sl, r3, sl
 80070c8:	e6e3      	b.n	8006e92 <_strtod_l+0x622>
 80070ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80070ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80070d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80070d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80070da:	fa01 f308 	lsl.w	r3, r1, r8
 80070de:	9308      	str	r3, [sp, #32]
 80070e0:	910d      	str	r1, [sp, #52]	; 0x34
 80070e2:	e746      	b.n	8006f72 <_strtod_l+0x702>
 80070e4:	2300      	movs	r3, #0
 80070e6:	9308      	str	r3, [sp, #32]
 80070e8:	2301      	movs	r3, #1
 80070ea:	930d      	str	r3, [sp, #52]	; 0x34
 80070ec:	e741      	b.n	8006f72 <_strtod_l+0x702>
 80070ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070f0:	4642      	mov	r2, r8
 80070f2:	4620      	mov	r0, r4
 80070f4:	f001 febe 	bl	8008e74 <__lshift>
 80070f8:	9018      	str	r0, [sp, #96]	; 0x60
 80070fa:	2800      	cmp	r0, #0
 80070fc:	f47f af6b 	bne.w	8006fd6 <_strtod_l+0x766>
 8007100:	e5fe      	b.n	8006d00 <_strtod_l+0x490>
 8007102:	465f      	mov	r7, fp
 8007104:	d16e      	bne.n	80071e4 <_strtod_l+0x974>
 8007106:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800710c:	b342      	cbz	r2, 8007160 <_strtod_l+0x8f0>
 800710e:	4a32      	ldr	r2, [pc, #200]	; (80071d8 <_strtod_l+0x968>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d128      	bne.n	8007166 <_strtod_l+0x8f6>
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	4651      	mov	r1, sl
 8007118:	b1eb      	cbz	r3, 8007156 <_strtod_l+0x8e6>
 800711a:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <_strtod_l+0x960>)
 800711c:	403b      	ands	r3, r7
 800711e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007122:	f04f 32ff 	mov.w	r2, #4294967295
 8007126:	d819      	bhi.n	800715c <_strtod_l+0x8ec>
 8007128:	0d1b      	lsrs	r3, r3, #20
 800712a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800712e:	fa02 f303 	lsl.w	r3, r2, r3
 8007132:	4299      	cmp	r1, r3
 8007134:	d117      	bne.n	8007166 <_strtod_l+0x8f6>
 8007136:	4b29      	ldr	r3, [pc, #164]	; (80071dc <_strtod_l+0x96c>)
 8007138:	429f      	cmp	r7, r3
 800713a:	d102      	bne.n	8007142 <_strtod_l+0x8d2>
 800713c:	3101      	adds	r1, #1
 800713e:	f43f addf 	beq.w	8006d00 <_strtod_l+0x490>
 8007142:	4b23      	ldr	r3, [pc, #140]	; (80071d0 <_strtod_l+0x960>)
 8007144:	403b      	ands	r3, r7
 8007146:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800714a:	f04f 0a00 	mov.w	sl, #0
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1a4      	bne.n	800709e <_strtod_l+0x82e>
 8007154:	e5de      	b.n	8006d14 <_strtod_l+0x4a4>
 8007156:	f04f 33ff 	mov.w	r3, #4294967295
 800715a:	e7ea      	b.n	8007132 <_strtod_l+0x8c2>
 800715c:	4613      	mov	r3, r2
 800715e:	e7e8      	b.n	8007132 <_strtod_l+0x8c2>
 8007160:	ea53 030a 	orrs.w	r3, r3, sl
 8007164:	d08c      	beq.n	8007080 <_strtod_l+0x810>
 8007166:	9b08      	ldr	r3, [sp, #32]
 8007168:	b1db      	cbz	r3, 80071a2 <_strtod_l+0x932>
 800716a:	423b      	tst	r3, r7
 800716c:	d0ef      	beq.n	800714e <_strtod_l+0x8de>
 800716e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007170:	9a04      	ldr	r2, [sp, #16]
 8007172:	4650      	mov	r0, sl
 8007174:	4659      	mov	r1, fp
 8007176:	b1c3      	cbz	r3, 80071aa <_strtod_l+0x93a>
 8007178:	f7ff fb5c 	bl	8006834 <sulp>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	ec51 0b18 	vmov	r0, r1, d8
 8007184:	f7f9 f88a 	bl	800029c <__adddf3>
 8007188:	4682      	mov	sl, r0
 800718a:	468b      	mov	fp, r1
 800718c:	e7df      	b.n	800714e <_strtod_l+0x8de>
 800718e:	4013      	ands	r3, r2
 8007190:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007194:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007198:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800719c:	f04f 3aff 	mov.w	sl, #4294967295
 80071a0:	e7d5      	b.n	800714e <_strtod_l+0x8de>
 80071a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071a4:	ea13 0f0a 	tst.w	r3, sl
 80071a8:	e7e0      	b.n	800716c <_strtod_l+0x8fc>
 80071aa:	f7ff fb43 	bl	8006834 <sulp>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	ec51 0b18 	vmov	r0, r1, d8
 80071b6:	f7f9 f86f 	bl	8000298 <__aeabi_dsub>
 80071ba:	2200      	movs	r2, #0
 80071bc:	2300      	movs	r3, #0
 80071be:	4682      	mov	sl, r0
 80071c0:	468b      	mov	fp, r1
 80071c2:	f7f9 fc89 	bl	8000ad8 <__aeabi_dcmpeq>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d0c1      	beq.n	800714e <_strtod_l+0x8de>
 80071ca:	e611      	b.n	8006df0 <_strtod_l+0x580>
 80071cc:	fffffc02 	.word	0xfffffc02
 80071d0:	7ff00000 	.word	0x7ff00000
 80071d4:	39500000 	.word	0x39500000
 80071d8:	000fffff 	.word	0x000fffff
 80071dc:	7fefffff 	.word	0x7fefffff
 80071e0:	0800a518 	.word	0x0800a518
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	f002 f832 	bl	8009250 <__ratio>
 80071ec:	ec59 8b10 	vmov	r8, r9, d0
 80071f0:	ee10 0a10 	vmov	r0, s0
 80071f4:	2200      	movs	r2, #0
 80071f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071fa:	4649      	mov	r1, r9
 80071fc:	f7f9 fc80 	bl	8000b00 <__aeabi_dcmple>
 8007200:	2800      	cmp	r0, #0
 8007202:	d07a      	beq.n	80072fa <_strtod_l+0xa8a>
 8007204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d04a      	beq.n	80072a0 <_strtod_l+0xa30>
 800720a:	4b95      	ldr	r3, [pc, #596]	; (8007460 <_strtod_l+0xbf0>)
 800720c:	2200      	movs	r2, #0
 800720e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007212:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007460 <_strtod_l+0xbf0>
 8007216:	f04f 0800 	mov.w	r8, #0
 800721a:	4b92      	ldr	r3, [pc, #584]	; (8007464 <_strtod_l+0xbf4>)
 800721c:	403b      	ands	r3, r7
 800721e:	930d      	str	r3, [sp, #52]	; 0x34
 8007220:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007222:	4b91      	ldr	r3, [pc, #580]	; (8007468 <_strtod_l+0xbf8>)
 8007224:	429a      	cmp	r2, r3
 8007226:	f040 80b0 	bne.w	800738a <_strtod_l+0xb1a>
 800722a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800722e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007232:	ec4b ab10 	vmov	d0, sl, fp
 8007236:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800723a:	f001 ff31 	bl	80090a0 <__ulp>
 800723e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007242:	ec53 2b10 	vmov	r2, r3, d0
 8007246:	f7f9 f9df 	bl	8000608 <__aeabi_dmul>
 800724a:	4652      	mov	r2, sl
 800724c:	465b      	mov	r3, fp
 800724e:	f7f9 f825 	bl	800029c <__adddf3>
 8007252:	460b      	mov	r3, r1
 8007254:	4983      	ldr	r1, [pc, #524]	; (8007464 <_strtod_l+0xbf4>)
 8007256:	4a85      	ldr	r2, [pc, #532]	; (800746c <_strtod_l+0xbfc>)
 8007258:	4019      	ands	r1, r3
 800725a:	4291      	cmp	r1, r2
 800725c:	4682      	mov	sl, r0
 800725e:	d960      	bls.n	8007322 <_strtod_l+0xab2>
 8007260:	ee18 3a90 	vmov	r3, s17
 8007264:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007268:	4293      	cmp	r3, r2
 800726a:	d104      	bne.n	8007276 <_strtod_l+0xa06>
 800726c:	ee18 3a10 	vmov	r3, s16
 8007270:	3301      	adds	r3, #1
 8007272:	f43f ad45 	beq.w	8006d00 <_strtod_l+0x490>
 8007276:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007478 <_strtod_l+0xc08>
 800727a:	f04f 3aff 	mov.w	sl, #4294967295
 800727e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007280:	4620      	mov	r0, r4
 8007282:	f001 fbdb 	bl	8008a3c <_Bfree>
 8007286:	9905      	ldr	r1, [sp, #20]
 8007288:	4620      	mov	r0, r4
 800728a:	f001 fbd7 	bl	8008a3c <_Bfree>
 800728e:	4631      	mov	r1, r6
 8007290:	4620      	mov	r0, r4
 8007292:	f001 fbd3 	bl	8008a3c <_Bfree>
 8007296:	4629      	mov	r1, r5
 8007298:	4620      	mov	r0, r4
 800729a:	f001 fbcf 	bl	8008a3c <_Bfree>
 800729e:	e61a      	b.n	8006ed6 <_strtod_l+0x666>
 80072a0:	f1ba 0f00 	cmp.w	sl, #0
 80072a4:	d11b      	bne.n	80072de <_strtod_l+0xa6e>
 80072a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072aa:	b9f3      	cbnz	r3, 80072ea <_strtod_l+0xa7a>
 80072ac:	4b6c      	ldr	r3, [pc, #432]	; (8007460 <_strtod_l+0xbf0>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	4640      	mov	r0, r8
 80072b2:	4649      	mov	r1, r9
 80072b4:	f7f9 fc1a 	bl	8000aec <__aeabi_dcmplt>
 80072b8:	b9d0      	cbnz	r0, 80072f0 <_strtod_l+0xa80>
 80072ba:	4640      	mov	r0, r8
 80072bc:	4649      	mov	r1, r9
 80072be:	4b6c      	ldr	r3, [pc, #432]	; (8007470 <_strtod_l+0xc00>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	f7f9 f9a1 	bl	8000608 <__aeabi_dmul>
 80072c6:	4680      	mov	r8, r0
 80072c8:	4689      	mov	r9, r1
 80072ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80072ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80072d2:	9315      	str	r3, [sp, #84]	; 0x54
 80072d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80072d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072dc:	e79d      	b.n	800721a <_strtod_l+0x9aa>
 80072de:	f1ba 0f01 	cmp.w	sl, #1
 80072e2:	d102      	bne.n	80072ea <_strtod_l+0xa7a>
 80072e4:	2f00      	cmp	r7, #0
 80072e6:	f43f ad83 	beq.w	8006df0 <_strtod_l+0x580>
 80072ea:	4b62      	ldr	r3, [pc, #392]	; (8007474 <_strtod_l+0xc04>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	e78e      	b.n	800720e <_strtod_l+0x99e>
 80072f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007470 <_strtod_l+0xc00>
 80072f4:	f04f 0800 	mov.w	r8, #0
 80072f8:	e7e7      	b.n	80072ca <_strtod_l+0xa5a>
 80072fa:	4b5d      	ldr	r3, [pc, #372]	; (8007470 <_strtod_l+0xc00>)
 80072fc:	4640      	mov	r0, r8
 80072fe:	4649      	mov	r1, r9
 8007300:	2200      	movs	r2, #0
 8007302:	f7f9 f981 	bl	8000608 <__aeabi_dmul>
 8007306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007308:	4680      	mov	r8, r0
 800730a:	4689      	mov	r9, r1
 800730c:	b933      	cbnz	r3, 800731c <_strtod_l+0xaac>
 800730e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007312:	900e      	str	r0, [sp, #56]	; 0x38
 8007314:	930f      	str	r3, [sp, #60]	; 0x3c
 8007316:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800731a:	e7dd      	b.n	80072d8 <_strtod_l+0xa68>
 800731c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007320:	e7f9      	b.n	8007316 <_strtod_l+0xaa6>
 8007322:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007326:	9b04      	ldr	r3, [sp, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1a8      	bne.n	800727e <_strtod_l+0xa0e>
 800732c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007330:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007332:	0d1b      	lsrs	r3, r3, #20
 8007334:	051b      	lsls	r3, r3, #20
 8007336:	429a      	cmp	r2, r3
 8007338:	d1a1      	bne.n	800727e <_strtod_l+0xa0e>
 800733a:	4640      	mov	r0, r8
 800733c:	4649      	mov	r1, r9
 800733e:	f7f9 fcc3 	bl	8000cc8 <__aeabi_d2lz>
 8007342:	f7f9 f933 	bl	80005ac <__aeabi_l2d>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4640      	mov	r0, r8
 800734c:	4649      	mov	r1, r9
 800734e:	f7f8 ffa3 	bl	8000298 <__aeabi_dsub>
 8007352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007354:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007358:	ea43 030a 	orr.w	r3, r3, sl
 800735c:	4313      	orrs	r3, r2
 800735e:	4680      	mov	r8, r0
 8007360:	4689      	mov	r9, r1
 8007362:	d055      	beq.n	8007410 <_strtod_l+0xba0>
 8007364:	a336      	add	r3, pc, #216	; (adr r3, 8007440 <_strtod_l+0xbd0>)
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f7f9 fbbf 	bl	8000aec <__aeabi_dcmplt>
 800736e:	2800      	cmp	r0, #0
 8007370:	f47f acd0 	bne.w	8006d14 <_strtod_l+0x4a4>
 8007374:	a334      	add	r3, pc, #208	; (adr r3, 8007448 <_strtod_l+0xbd8>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	4640      	mov	r0, r8
 800737c:	4649      	mov	r1, r9
 800737e:	f7f9 fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 8007382:	2800      	cmp	r0, #0
 8007384:	f43f af7b 	beq.w	800727e <_strtod_l+0xa0e>
 8007388:	e4c4      	b.n	8006d14 <_strtod_l+0x4a4>
 800738a:	9b04      	ldr	r3, [sp, #16]
 800738c:	b333      	cbz	r3, 80073dc <_strtod_l+0xb6c>
 800738e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007390:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007394:	d822      	bhi.n	80073dc <_strtod_l+0xb6c>
 8007396:	a32e      	add	r3, pc, #184	; (adr r3, 8007450 <_strtod_l+0xbe0>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	4640      	mov	r0, r8
 800739e:	4649      	mov	r1, r9
 80073a0:	f7f9 fbae 	bl	8000b00 <__aeabi_dcmple>
 80073a4:	b1a0      	cbz	r0, 80073d0 <_strtod_l+0xb60>
 80073a6:	4649      	mov	r1, r9
 80073a8:	4640      	mov	r0, r8
 80073aa:	f7f9 fc05 	bl	8000bb8 <__aeabi_d2uiz>
 80073ae:	2801      	cmp	r0, #1
 80073b0:	bf38      	it	cc
 80073b2:	2001      	movcc	r0, #1
 80073b4:	f7f9 f8ae 	bl	8000514 <__aeabi_ui2d>
 80073b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ba:	4680      	mov	r8, r0
 80073bc:	4689      	mov	r9, r1
 80073be:	bb23      	cbnz	r3, 800740a <_strtod_l+0xb9a>
 80073c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073c4:	9010      	str	r0, [sp, #64]	; 0x40
 80073c6:	9311      	str	r3, [sp, #68]	; 0x44
 80073c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80073d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80073d8:	1a9b      	subs	r3, r3, r2
 80073da:	9309      	str	r3, [sp, #36]	; 0x24
 80073dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073e0:	eeb0 0a48 	vmov.f32	s0, s16
 80073e4:	eef0 0a68 	vmov.f32	s1, s17
 80073e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80073ec:	f001 fe58 	bl	80090a0 <__ulp>
 80073f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073f4:	ec53 2b10 	vmov	r2, r3, d0
 80073f8:	f7f9 f906 	bl	8000608 <__aeabi_dmul>
 80073fc:	ec53 2b18 	vmov	r2, r3, d8
 8007400:	f7f8 ff4c 	bl	800029c <__adddf3>
 8007404:	4682      	mov	sl, r0
 8007406:	468b      	mov	fp, r1
 8007408:	e78d      	b.n	8007326 <_strtod_l+0xab6>
 800740a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800740e:	e7db      	b.n	80073c8 <_strtod_l+0xb58>
 8007410:	a311      	add	r3, pc, #68	; (adr r3, 8007458 <_strtod_l+0xbe8>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f9 fb69 	bl	8000aec <__aeabi_dcmplt>
 800741a:	e7b2      	b.n	8007382 <_strtod_l+0xb12>
 800741c:	2300      	movs	r3, #0
 800741e:	930a      	str	r3, [sp, #40]	; 0x28
 8007420:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007422:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	f7ff ba6b 	b.w	8006900 <_strtod_l+0x90>
 800742a:	2a65      	cmp	r2, #101	; 0x65
 800742c:	f43f ab5f 	beq.w	8006aee <_strtod_l+0x27e>
 8007430:	2a45      	cmp	r2, #69	; 0x45
 8007432:	f43f ab5c 	beq.w	8006aee <_strtod_l+0x27e>
 8007436:	2301      	movs	r3, #1
 8007438:	f7ff bb94 	b.w	8006b64 <_strtod_l+0x2f4>
 800743c:	f3af 8000 	nop.w
 8007440:	94a03595 	.word	0x94a03595
 8007444:	3fdfffff 	.word	0x3fdfffff
 8007448:	35afe535 	.word	0x35afe535
 800744c:	3fe00000 	.word	0x3fe00000
 8007450:	ffc00000 	.word	0xffc00000
 8007454:	41dfffff 	.word	0x41dfffff
 8007458:	94a03595 	.word	0x94a03595
 800745c:	3fcfffff 	.word	0x3fcfffff
 8007460:	3ff00000 	.word	0x3ff00000
 8007464:	7ff00000 	.word	0x7ff00000
 8007468:	7fe00000 	.word	0x7fe00000
 800746c:	7c9fffff 	.word	0x7c9fffff
 8007470:	3fe00000 	.word	0x3fe00000
 8007474:	bff00000 	.word	0xbff00000
 8007478:	7fefffff 	.word	0x7fefffff

0800747c <_strtod_r>:
 800747c:	4b01      	ldr	r3, [pc, #4]	; (8007484 <_strtod_r+0x8>)
 800747e:	f7ff b9f7 	b.w	8006870 <_strtod_l>
 8007482:	bf00      	nop
 8007484:	20000084 	.word	0x20000084

08007488 <_strtol_l.constprop.0>:
 8007488:	2b01      	cmp	r3, #1
 800748a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748e:	d001      	beq.n	8007494 <_strtol_l.constprop.0+0xc>
 8007490:	2b24      	cmp	r3, #36	; 0x24
 8007492:	d906      	bls.n	80074a2 <_strtol_l.constprop.0+0x1a>
 8007494:	f7fe fafc 	bl	8005a90 <__errno>
 8007498:	2316      	movs	r3, #22
 800749a:	6003      	str	r3, [r0, #0]
 800749c:	2000      	movs	r0, #0
 800749e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007588 <_strtol_l.constprop.0+0x100>
 80074a6:	460d      	mov	r5, r1
 80074a8:	462e      	mov	r6, r5
 80074aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80074b2:	f017 0708 	ands.w	r7, r7, #8
 80074b6:	d1f7      	bne.n	80074a8 <_strtol_l.constprop.0+0x20>
 80074b8:	2c2d      	cmp	r4, #45	; 0x2d
 80074ba:	d132      	bne.n	8007522 <_strtol_l.constprop.0+0x9a>
 80074bc:	782c      	ldrb	r4, [r5, #0]
 80074be:	2701      	movs	r7, #1
 80074c0:	1cb5      	adds	r5, r6, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d05b      	beq.n	800757e <_strtol_l.constprop.0+0xf6>
 80074c6:	2b10      	cmp	r3, #16
 80074c8:	d109      	bne.n	80074de <_strtol_l.constprop.0+0x56>
 80074ca:	2c30      	cmp	r4, #48	; 0x30
 80074cc:	d107      	bne.n	80074de <_strtol_l.constprop.0+0x56>
 80074ce:	782c      	ldrb	r4, [r5, #0]
 80074d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80074d4:	2c58      	cmp	r4, #88	; 0x58
 80074d6:	d14d      	bne.n	8007574 <_strtol_l.constprop.0+0xec>
 80074d8:	786c      	ldrb	r4, [r5, #1]
 80074da:	2310      	movs	r3, #16
 80074dc:	3502      	adds	r5, #2
 80074de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80074e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80074e6:	f04f 0c00 	mov.w	ip, #0
 80074ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80074ee:	4666      	mov	r6, ip
 80074f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80074f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80074f8:	f1be 0f09 	cmp.w	lr, #9
 80074fc:	d816      	bhi.n	800752c <_strtol_l.constprop.0+0xa4>
 80074fe:	4674      	mov	r4, lr
 8007500:	42a3      	cmp	r3, r4
 8007502:	dd24      	ble.n	800754e <_strtol_l.constprop.0+0xc6>
 8007504:	f1bc 0f00 	cmp.w	ip, #0
 8007508:	db1e      	blt.n	8007548 <_strtol_l.constprop.0+0xc0>
 800750a:	45b1      	cmp	r9, r6
 800750c:	d31c      	bcc.n	8007548 <_strtol_l.constprop.0+0xc0>
 800750e:	d101      	bne.n	8007514 <_strtol_l.constprop.0+0x8c>
 8007510:	45a2      	cmp	sl, r4
 8007512:	db19      	blt.n	8007548 <_strtol_l.constprop.0+0xc0>
 8007514:	fb06 4603 	mla	r6, r6, r3, r4
 8007518:	f04f 0c01 	mov.w	ip, #1
 800751c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007520:	e7e8      	b.n	80074f4 <_strtol_l.constprop.0+0x6c>
 8007522:	2c2b      	cmp	r4, #43	; 0x2b
 8007524:	bf04      	itt	eq
 8007526:	782c      	ldrbeq	r4, [r5, #0]
 8007528:	1cb5      	addeq	r5, r6, #2
 800752a:	e7ca      	b.n	80074c2 <_strtol_l.constprop.0+0x3a>
 800752c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007530:	f1be 0f19 	cmp.w	lr, #25
 8007534:	d801      	bhi.n	800753a <_strtol_l.constprop.0+0xb2>
 8007536:	3c37      	subs	r4, #55	; 0x37
 8007538:	e7e2      	b.n	8007500 <_strtol_l.constprop.0+0x78>
 800753a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800753e:	f1be 0f19 	cmp.w	lr, #25
 8007542:	d804      	bhi.n	800754e <_strtol_l.constprop.0+0xc6>
 8007544:	3c57      	subs	r4, #87	; 0x57
 8007546:	e7db      	b.n	8007500 <_strtol_l.constprop.0+0x78>
 8007548:	f04f 3cff 	mov.w	ip, #4294967295
 800754c:	e7e6      	b.n	800751c <_strtol_l.constprop.0+0x94>
 800754e:	f1bc 0f00 	cmp.w	ip, #0
 8007552:	da05      	bge.n	8007560 <_strtol_l.constprop.0+0xd8>
 8007554:	2322      	movs	r3, #34	; 0x22
 8007556:	6003      	str	r3, [r0, #0]
 8007558:	4646      	mov	r6, r8
 800755a:	b942      	cbnz	r2, 800756e <_strtol_l.constprop.0+0xe6>
 800755c:	4630      	mov	r0, r6
 800755e:	e79e      	b.n	800749e <_strtol_l.constprop.0+0x16>
 8007560:	b107      	cbz	r7, 8007564 <_strtol_l.constprop.0+0xdc>
 8007562:	4276      	negs	r6, r6
 8007564:	2a00      	cmp	r2, #0
 8007566:	d0f9      	beq.n	800755c <_strtol_l.constprop.0+0xd4>
 8007568:	f1bc 0f00 	cmp.w	ip, #0
 800756c:	d000      	beq.n	8007570 <_strtol_l.constprop.0+0xe8>
 800756e:	1e69      	subs	r1, r5, #1
 8007570:	6011      	str	r1, [r2, #0]
 8007572:	e7f3      	b.n	800755c <_strtol_l.constprop.0+0xd4>
 8007574:	2430      	movs	r4, #48	; 0x30
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1b1      	bne.n	80074de <_strtol_l.constprop.0+0x56>
 800757a:	2308      	movs	r3, #8
 800757c:	e7af      	b.n	80074de <_strtol_l.constprop.0+0x56>
 800757e:	2c30      	cmp	r4, #48	; 0x30
 8007580:	d0a5      	beq.n	80074ce <_strtol_l.constprop.0+0x46>
 8007582:	230a      	movs	r3, #10
 8007584:	e7ab      	b.n	80074de <_strtol_l.constprop.0+0x56>
 8007586:	bf00      	nop
 8007588:	0800a541 	.word	0x0800a541

0800758c <_strtol_r>:
 800758c:	f7ff bf7c 	b.w	8007488 <_strtol_l.constprop.0>

08007590 <quorem>:
 8007590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	6903      	ldr	r3, [r0, #16]
 8007596:	690c      	ldr	r4, [r1, #16]
 8007598:	42a3      	cmp	r3, r4
 800759a:	4607      	mov	r7, r0
 800759c:	f2c0 8081 	blt.w	80076a2 <quorem+0x112>
 80075a0:	3c01      	subs	r4, #1
 80075a2:	f101 0814 	add.w	r8, r1, #20
 80075a6:	f100 0514 	add.w	r5, r0, #20
 80075aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075b8:	3301      	adds	r3, #1
 80075ba:	429a      	cmp	r2, r3
 80075bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80075c8:	d331      	bcc.n	800762e <quorem+0x9e>
 80075ca:	f04f 0e00 	mov.w	lr, #0
 80075ce:	4640      	mov	r0, r8
 80075d0:	46ac      	mov	ip, r5
 80075d2:	46f2      	mov	sl, lr
 80075d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80075d8:	b293      	uxth	r3, r2
 80075da:	fb06 e303 	mla	r3, r6, r3, lr
 80075de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	ebaa 0303 	sub.w	r3, sl, r3
 80075e8:	f8dc a000 	ldr.w	sl, [ip]
 80075ec:	0c12      	lsrs	r2, r2, #16
 80075ee:	fa13 f38a 	uxtah	r3, r3, sl
 80075f2:	fb06 e202 	mla	r2, r6, r2, lr
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	9b00      	ldr	r3, [sp, #0]
 80075fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075fe:	b292      	uxth	r2, r2
 8007600:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007604:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007608:	f8bd 3000 	ldrh.w	r3, [sp]
 800760c:	4581      	cmp	r9, r0
 800760e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007612:	f84c 3b04 	str.w	r3, [ip], #4
 8007616:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800761a:	d2db      	bcs.n	80075d4 <quorem+0x44>
 800761c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007620:	b92b      	cbnz	r3, 800762e <quorem+0x9e>
 8007622:	9b01      	ldr	r3, [sp, #4]
 8007624:	3b04      	subs	r3, #4
 8007626:	429d      	cmp	r5, r3
 8007628:	461a      	mov	r2, r3
 800762a:	d32e      	bcc.n	800768a <quorem+0xfa>
 800762c:	613c      	str	r4, [r7, #16]
 800762e:	4638      	mov	r0, r7
 8007630:	f001 fc90 	bl	8008f54 <__mcmp>
 8007634:	2800      	cmp	r0, #0
 8007636:	db24      	blt.n	8007682 <quorem+0xf2>
 8007638:	3601      	adds	r6, #1
 800763a:	4628      	mov	r0, r5
 800763c:	f04f 0c00 	mov.w	ip, #0
 8007640:	f858 2b04 	ldr.w	r2, [r8], #4
 8007644:	f8d0 e000 	ldr.w	lr, [r0]
 8007648:	b293      	uxth	r3, r2
 800764a:	ebac 0303 	sub.w	r3, ip, r3
 800764e:	0c12      	lsrs	r2, r2, #16
 8007650:	fa13 f38e 	uxtah	r3, r3, lr
 8007654:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007658:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800765c:	b29b      	uxth	r3, r3
 800765e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007662:	45c1      	cmp	r9, r8
 8007664:	f840 3b04 	str.w	r3, [r0], #4
 8007668:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800766c:	d2e8      	bcs.n	8007640 <quorem+0xb0>
 800766e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007676:	b922      	cbnz	r2, 8007682 <quorem+0xf2>
 8007678:	3b04      	subs	r3, #4
 800767a:	429d      	cmp	r5, r3
 800767c:	461a      	mov	r2, r3
 800767e:	d30a      	bcc.n	8007696 <quorem+0x106>
 8007680:	613c      	str	r4, [r7, #16]
 8007682:	4630      	mov	r0, r6
 8007684:	b003      	add	sp, #12
 8007686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768a:	6812      	ldr	r2, [r2, #0]
 800768c:	3b04      	subs	r3, #4
 800768e:	2a00      	cmp	r2, #0
 8007690:	d1cc      	bne.n	800762c <quorem+0x9c>
 8007692:	3c01      	subs	r4, #1
 8007694:	e7c7      	b.n	8007626 <quorem+0x96>
 8007696:	6812      	ldr	r2, [r2, #0]
 8007698:	3b04      	subs	r3, #4
 800769a:	2a00      	cmp	r2, #0
 800769c:	d1f0      	bne.n	8007680 <quorem+0xf0>
 800769e:	3c01      	subs	r4, #1
 80076a0:	e7eb      	b.n	800767a <quorem+0xea>
 80076a2:	2000      	movs	r0, #0
 80076a4:	e7ee      	b.n	8007684 <quorem+0xf4>
	...

080076a8 <_dtoa_r>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	ed2d 8b04 	vpush	{d8-d9}
 80076b0:	ec57 6b10 	vmov	r6, r7, d0
 80076b4:	b093      	sub	sp, #76	; 0x4c
 80076b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076bc:	9106      	str	r1, [sp, #24]
 80076be:	ee10 aa10 	vmov	sl, s0
 80076c2:	4604      	mov	r4, r0
 80076c4:	9209      	str	r2, [sp, #36]	; 0x24
 80076c6:	930c      	str	r3, [sp, #48]	; 0x30
 80076c8:	46bb      	mov	fp, r7
 80076ca:	b975      	cbnz	r5, 80076ea <_dtoa_r+0x42>
 80076cc:	2010      	movs	r0, #16
 80076ce:	f001 f94d 	bl	800896c <malloc>
 80076d2:	4602      	mov	r2, r0
 80076d4:	6260      	str	r0, [r4, #36]	; 0x24
 80076d6:	b920      	cbnz	r0, 80076e2 <_dtoa_r+0x3a>
 80076d8:	4ba7      	ldr	r3, [pc, #668]	; (8007978 <_dtoa_r+0x2d0>)
 80076da:	21ea      	movs	r1, #234	; 0xea
 80076dc:	48a7      	ldr	r0, [pc, #668]	; (800797c <_dtoa_r+0x2d4>)
 80076de:	f002 f8bd 	bl	800985c <__assert_func>
 80076e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076e6:	6005      	str	r5, [r0, #0]
 80076e8:	60c5      	str	r5, [r0, #12]
 80076ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076ec:	6819      	ldr	r1, [r3, #0]
 80076ee:	b151      	cbz	r1, 8007706 <_dtoa_r+0x5e>
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	604a      	str	r2, [r1, #4]
 80076f4:	2301      	movs	r3, #1
 80076f6:	4093      	lsls	r3, r2
 80076f8:	608b      	str	r3, [r1, #8]
 80076fa:	4620      	mov	r0, r4
 80076fc:	f001 f99e 	bl	8008a3c <_Bfree>
 8007700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	1e3b      	subs	r3, r7, #0
 8007708:	bfaa      	itet	ge
 800770a:	2300      	movge	r3, #0
 800770c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007710:	f8c8 3000 	strge.w	r3, [r8]
 8007714:	4b9a      	ldr	r3, [pc, #616]	; (8007980 <_dtoa_r+0x2d8>)
 8007716:	bfbc      	itt	lt
 8007718:	2201      	movlt	r2, #1
 800771a:	f8c8 2000 	strlt.w	r2, [r8]
 800771e:	ea33 030b 	bics.w	r3, r3, fp
 8007722:	d11b      	bne.n	800775c <_dtoa_r+0xb4>
 8007724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007726:	f242 730f 	movw	r3, #9999	; 0x270f
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007730:	4333      	orrs	r3, r6
 8007732:	f000 8592 	beq.w	800825a <_dtoa_r+0xbb2>
 8007736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007738:	b963      	cbnz	r3, 8007754 <_dtoa_r+0xac>
 800773a:	4b92      	ldr	r3, [pc, #584]	; (8007984 <_dtoa_r+0x2dc>)
 800773c:	e022      	b.n	8007784 <_dtoa_r+0xdc>
 800773e:	4b92      	ldr	r3, [pc, #584]	; (8007988 <_dtoa_r+0x2e0>)
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	3308      	adds	r3, #8
 8007744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	9801      	ldr	r0, [sp, #4]
 800774a:	b013      	add	sp, #76	; 0x4c
 800774c:	ecbd 8b04 	vpop	{d8-d9}
 8007750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007754:	4b8b      	ldr	r3, [pc, #556]	; (8007984 <_dtoa_r+0x2dc>)
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	3303      	adds	r3, #3
 800775a:	e7f3      	b.n	8007744 <_dtoa_r+0x9c>
 800775c:	2200      	movs	r2, #0
 800775e:	2300      	movs	r3, #0
 8007760:	4650      	mov	r0, sl
 8007762:	4659      	mov	r1, fp
 8007764:	f7f9 f9b8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007768:	ec4b ab19 	vmov	d9, sl, fp
 800776c:	4680      	mov	r8, r0
 800776e:	b158      	cbz	r0, 8007788 <_dtoa_r+0xe0>
 8007770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007772:	2301      	movs	r3, #1
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 856b 	beq.w	8008254 <_dtoa_r+0xbac>
 800777e:	4883      	ldr	r0, [pc, #524]	; (800798c <_dtoa_r+0x2e4>)
 8007780:	6018      	str	r0, [r3, #0]
 8007782:	1e43      	subs	r3, r0, #1
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	e7df      	b.n	8007748 <_dtoa_r+0xa0>
 8007788:	ec4b ab10 	vmov	d0, sl, fp
 800778c:	aa10      	add	r2, sp, #64	; 0x40
 800778e:	a911      	add	r1, sp, #68	; 0x44
 8007790:	4620      	mov	r0, r4
 8007792:	f001 fd01 	bl	8009198 <__d2b>
 8007796:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800779a:	ee08 0a10 	vmov	s16, r0
 800779e:	2d00      	cmp	r5, #0
 80077a0:	f000 8084 	beq.w	80078ac <_dtoa_r+0x204>
 80077a4:	ee19 3a90 	vmov	r3, s19
 80077a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80077b0:	4656      	mov	r6, sl
 80077b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80077b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80077be:	4b74      	ldr	r3, [pc, #464]	; (8007990 <_dtoa_r+0x2e8>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	4630      	mov	r0, r6
 80077c4:	4639      	mov	r1, r7
 80077c6:	f7f8 fd67 	bl	8000298 <__aeabi_dsub>
 80077ca:	a365      	add	r3, pc, #404	; (adr r3, 8007960 <_dtoa_r+0x2b8>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f7f8 ff1a 	bl	8000608 <__aeabi_dmul>
 80077d4:	a364      	add	r3, pc, #400	; (adr r3, 8007968 <_dtoa_r+0x2c0>)
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	f7f8 fd5f 	bl	800029c <__adddf3>
 80077de:	4606      	mov	r6, r0
 80077e0:	4628      	mov	r0, r5
 80077e2:	460f      	mov	r7, r1
 80077e4:	f7f8 fea6 	bl	8000534 <__aeabi_i2d>
 80077e8:	a361      	add	r3, pc, #388	; (adr r3, 8007970 <_dtoa_r+0x2c8>)
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	f7f8 ff0b 	bl	8000608 <__aeabi_dmul>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4630      	mov	r0, r6
 80077f8:	4639      	mov	r1, r7
 80077fa:	f7f8 fd4f 	bl	800029c <__adddf3>
 80077fe:	4606      	mov	r6, r0
 8007800:	460f      	mov	r7, r1
 8007802:	f7f9 f9b1 	bl	8000b68 <__aeabi_d2iz>
 8007806:	2200      	movs	r2, #0
 8007808:	9000      	str	r0, [sp, #0]
 800780a:	2300      	movs	r3, #0
 800780c:	4630      	mov	r0, r6
 800780e:	4639      	mov	r1, r7
 8007810:	f7f9 f96c 	bl	8000aec <__aeabi_dcmplt>
 8007814:	b150      	cbz	r0, 800782c <_dtoa_r+0x184>
 8007816:	9800      	ldr	r0, [sp, #0]
 8007818:	f7f8 fe8c 	bl	8000534 <__aeabi_i2d>
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	f7f9 f95a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007824:	b910      	cbnz	r0, 800782c <_dtoa_r+0x184>
 8007826:	9b00      	ldr	r3, [sp, #0]
 8007828:	3b01      	subs	r3, #1
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	9b00      	ldr	r3, [sp, #0]
 800782e:	2b16      	cmp	r3, #22
 8007830:	d85a      	bhi.n	80078e8 <_dtoa_r+0x240>
 8007832:	9a00      	ldr	r2, [sp, #0]
 8007834:	4b57      	ldr	r3, [pc, #348]	; (8007994 <_dtoa_r+0x2ec>)
 8007836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	ec51 0b19 	vmov	r0, r1, d9
 8007842:	f7f9 f953 	bl	8000aec <__aeabi_dcmplt>
 8007846:	2800      	cmp	r0, #0
 8007848:	d050      	beq.n	80078ec <_dtoa_r+0x244>
 800784a:	9b00      	ldr	r3, [sp, #0]
 800784c:	3b01      	subs	r3, #1
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	2300      	movs	r3, #0
 8007852:	930b      	str	r3, [sp, #44]	; 0x2c
 8007854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007856:	1b5d      	subs	r5, r3, r5
 8007858:	1e6b      	subs	r3, r5, #1
 800785a:	9305      	str	r3, [sp, #20]
 800785c:	bf45      	ittet	mi
 800785e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007862:	9304      	strmi	r3, [sp, #16]
 8007864:	2300      	movpl	r3, #0
 8007866:	2300      	movmi	r3, #0
 8007868:	bf4c      	ite	mi
 800786a:	9305      	strmi	r3, [sp, #20]
 800786c:	9304      	strpl	r3, [sp, #16]
 800786e:	9b00      	ldr	r3, [sp, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	db3d      	blt.n	80078f0 <_dtoa_r+0x248>
 8007874:	9b05      	ldr	r3, [sp, #20]
 8007876:	9a00      	ldr	r2, [sp, #0]
 8007878:	920a      	str	r2, [sp, #40]	; 0x28
 800787a:	4413      	add	r3, r2
 800787c:	9305      	str	r3, [sp, #20]
 800787e:	2300      	movs	r3, #0
 8007880:	9307      	str	r3, [sp, #28]
 8007882:	9b06      	ldr	r3, [sp, #24]
 8007884:	2b09      	cmp	r3, #9
 8007886:	f200 8089 	bhi.w	800799c <_dtoa_r+0x2f4>
 800788a:	2b05      	cmp	r3, #5
 800788c:	bfc4      	itt	gt
 800788e:	3b04      	subgt	r3, #4
 8007890:	9306      	strgt	r3, [sp, #24]
 8007892:	9b06      	ldr	r3, [sp, #24]
 8007894:	f1a3 0302 	sub.w	r3, r3, #2
 8007898:	bfcc      	ite	gt
 800789a:	2500      	movgt	r5, #0
 800789c:	2501      	movle	r5, #1
 800789e:	2b03      	cmp	r3, #3
 80078a0:	f200 8087 	bhi.w	80079b2 <_dtoa_r+0x30a>
 80078a4:	e8df f003 	tbb	[pc, r3]
 80078a8:	59383a2d 	.word	0x59383a2d
 80078ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80078b0:	441d      	add	r5, r3
 80078b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	bfc1      	itttt	gt
 80078ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80078c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078ca:	bfda      	itte	le
 80078cc:	f1c3 0320 	rsble	r3, r3, #32
 80078d0:	fa06 f003 	lslle.w	r0, r6, r3
 80078d4:	4318      	orrgt	r0, r3
 80078d6:	f7f8 fe1d 	bl	8000514 <__aeabi_ui2d>
 80078da:	2301      	movs	r3, #1
 80078dc:	4606      	mov	r6, r0
 80078de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078e2:	3d01      	subs	r5, #1
 80078e4:	930e      	str	r3, [sp, #56]	; 0x38
 80078e6:	e76a      	b.n	80077be <_dtoa_r+0x116>
 80078e8:	2301      	movs	r3, #1
 80078ea:	e7b2      	b.n	8007852 <_dtoa_r+0x1aa>
 80078ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80078ee:	e7b1      	b.n	8007854 <_dtoa_r+0x1ac>
 80078f0:	9b04      	ldr	r3, [sp, #16]
 80078f2:	9a00      	ldr	r2, [sp, #0]
 80078f4:	1a9b      	subs	r3, r3, r2
 80078f6:	9304      	str	r3, [sp, #16]
 80078f8:	4253      	negs	r3, r2
 80078fa:	9307      	str	r3, [sp, #28]
 80078fc:	2300      	movs	r3, #0
 80078fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007900:	e7bf      	b.n	8007882 <_dtoa_r+0x1da>
 8007902:	2300      	movs	r3, #0
 8007904:	9308      	str	r3, [sp, #32]
 8007906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	dc55      	bgt.n	80079b8 <_dtoa_r+0x310>
 800790c:	2301      	movs	r3, #1
 800790e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007912:	461a      	mov	r2, r3
 8007914:	9209      	str	r2, [sp, #36]	; 0x24
 8007916:	e00c      	b.n	8007932 <_dtoa_r+0x28a>
 8007918:	2301      	movs	r3, #1
 800791a:	e7f3      	b.n	8007904 <_dtoa_r+0x25c>
 800791c:	2300      	movs	r3, #0
 800791e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007920:	9308      	str	r3, [sp, #32]
 8007922:	9b00      	ldr	r3, [sp, #0]
 8007924:	4413      	add	r3, r2
 8007926:	9302      	str	r3, [sp, #8]
 8007928:	3301      	adds	r3, #1
 800792a:	2b01      	cmp	r3, #1
 800792c:	9303      	str	r3, [sp, #12]
 800792e:	bfb8      	it	lt
 8007930:	2301      	movlt	r3, #1
 8007932:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007934:	2200      	movs	r2, #0
 8007936:	6042      	str	r2, [r0, #4]
 8007938:	2204      	movs	r2, #4
 800793a:	f102 0614 	add.w	r6, r2, #20
 800793e:	429e      	cmp	r6, r3
 8007940:	6841      	ldr	r1, [r0, #4]
 8007942:	d93d      	bls.n	80079c0 <_dtoa_r+0x318>
 8007944:	4620      	mov	r0, r4
 8007946:	f001 f839 	bl	80089bc <_Balloc>
 800794a:	9001      	str	r0, [sp, #4]
 800794c:	2800      	cmp	r0, #0
 800794e:	d13b      	bne.n	80079c8 <_dtoa_r+0x320>
 8007950:	4b11      	ldr	r3, [pc, #68]	; (8007998 <_dtoa_r+0x2f0>)
 8007952:	4602      	mov	r2, r0
 8007954:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007958:	e6c0      	b.n	80076dc <_dtoa_r+0x34>
 800795a:	2301      	movs	r3, #1
 800795c:	e7df      	b.n	800791e <_dtoa_r+0x276>
 800795e:	bf00      	nop
 8007960:	636f4361 	.word	0x636f4361
 8007964:	3fd287a7 	.word	0x3fd287a7
 8007968:	8b60c8b3 	.word	0x8b60c8b3
 800796c:	3fc68a28 	.word	0x3fc68a28
 8007970:	509f79fb 	.word	0x509f79fb
 8007974:	3fd34413 	.word	0x3fd34413
 8007978:	0800a64e 	.word	0x0800a64e
 800797c:	0800a665 	.word	0x0800a665
 8007980:	7ff00000 	.word	0x7ff00000
 8007984:	0800a64a 	.word	0x0800a64a
 8007988:	0800a641 	.word	0x0800a641
 800798c:	0800a4c1 	.word	0x0800a4c1
 8007990:	3ff80000 	.word	0x3ff80000
 8007994:	0800a7d0 	.word	0x0800a7d0
 8007998:	0800a6c0 	.word	0x0800a6c0
 800799c:	2501      	movs	r5, #1
 800799e:	2300      	movs	r3, #0
 80079a0:	9306      	str	r3, [sp, #24]
 80079a2:	9508      	str	r5, [sp, #32]
 80079a4:	f04f 33ff 	mov.w	r3, #4294967295
 80079a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079ac:	2200      	movs	r2, #0
 80079ae:	2312      	movs	r3, #18
 80079b0:	e7b0      	b.n	8007914 <_dtoa_r+0x26c>
 80079b2:	2301      	movs	r3, #1
 80079b4:	9308      	str	r3, [sp, #32]
 80079b6:	e7f5      	b.n	80079a4 <_dtoa_r+0x2fc>
 80079b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079be:	e7b8      	b.n	8007932 <_dtoa_r+0x28a>
 80079c0:	3101      	adds	r1, #1
 80079c2:	6041      	str	r1, [r0, #4]
 80079c4:	0052      	lsls	r2, r2, #1
 80079c6:	e7b8      	b.n	800793a <_dtoa_r+0x292>
 80079c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ca:	9a01      	ldr	r2, [sp, #4]
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	2b0e      	cmp	r3, #14
 80079d2:	f200 809d 	bhi.w	8007b10 <_dtoa_r+0x468>
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	f000 809a 	beq.w	8007b10 <_dtoa_r+0x468>
 80079dc:	9b00      	ldr	r3, [sp, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	dd32      	ble.n	8007a48 <_dtoa_r+0x3a0>
 80079e2:	4ab7      	ldr	r2, [pc, #732]	; (8007cc0 <_dtoa_r+0x618>)
 80079e4:	f003 030f 	and.w	r3, r3, #15
 80079e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079f0:	9b00      	ldr	r3, [sp, #0]
 80079f2:	05d8      	lsls	r0, r3, #23
 80079f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80079f8:	d516      	bpl.n	8007a28 <_dtoa_r+0x380>
 80079fa:	4bb2      	ldr	r3, [pc, #712]	; (8007cc4 <_dtoa_r+0x61c>)
 80079fc:	ec51 0b19 	vmov	r0, r1, d9
 8007a00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a04:	f7f8 ff2a 	bl	800085c <__aeabi_ddiv>
 8007a08:	f007 070f 	and.w	r7, r7, #15
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	468b      	mov	fp, r1
 8007a10:	2503      	movs	r5, #3
 8007a12:	4eac      	ldr	r6, [pc, #688]	; (8007cc4 <_dtoa_r+0x61c>)
 8007a14:	b957      	cbnz	r7, 8007a2c <_dtoa_r+0x384>
 8007a16:	4642      	mov	r2, r8
 8007a18:	464b      	mov	r3, r9
 8007a1a:	4650      	mov	r0, sl
 8007a1c:	4659      	mov	r1, fp
 8007a1e:	f7f8 ff1d 	bl	800085c <__aeabi_ddiv>
 8007a22:	4682      	mov	sl, r0
 8007a24:	468b      	mov	fp, r1
 8007a26:	e028      	b.n	8007a7a <_dtoa_r+0x3d2>
 8007a28:	2502      	movs	r5, #2
 8007a2a:	e7f2      	b.n	8007a12 <_dtoa_r+0x36a>
 8007a2c:	07f9      	lsls	r1, r7, #31
 8007a2e:	d508      	bpl.n	8007a42 <_dtoa_r+0x39a>
 8007a30:	4640      	mov	r0, r8
 8007a32:	4649      	mov	r1, r9
 8007a34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a38:	f7f8 fde6 	bl	8000608 <__aeabi_dmul>
 8007a3c:	3501      	adds	r5, #1
 8007a3e:	4680      	mov	r8, r0
 8007a40:	4689      	mov	r9, r1
 8007a42:	107f      	asrs	r7, r7, #1
 8007a44:	3608      	adds	r6, #8
 8007a46:	e7e5      	b.n	8007a14 <_dtoa_r+0x36c>
 8007a48:	f000 809b 	beq.w	8007b82 <_dtoa_r+0x4da>
 8007a4c:	9b00      	ldr	r3, [sp, #0]
 8007a4e:	4f9d      	ldr	r7, [pc, #628]	; (8007cc4 <_dtoa_r+0x61c>)
 8007a50:	425e      	negs	r6, r3
 8007a52:	4b9b      	ldr	r3, [pc, #620]	; (8007cc0 <_dtoa_r+0x618>)
 8007a54:	f006 020f 	and.w	r2, r6, #15
 8007a58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	ec51 0b19 	vmov	r0, r1, d9
 8007a64:	f7f8 fdd0 	bl	8000608 <__aeabi_dmul>
 8007a68:	1136      	asrs	r6, r6, #4
 8007a6a:	4682      	mov	sl, r0
 8007a6c:	468b      	mov	fp, r1
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2502      	movs	r5, #2
 8007a72:	2e00      	cmp	r6, #0
 8007a74:	d17a      	bne.n	8007b6c <_dtoa_r+0x4c4>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1d3      	bne.n	8007a22 <_dtoa_r+0x37a>
 8007a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 8082 	beq.w	8007b86 <_dtoa_r+0x4de>
 8007a82:	4b91      	ldr	r3, [pc, #580]	; (8007cc8 <_dtoa_r+0x620>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	4650      	mov	r0, sl
 8007a88:	4659      	mov	r1, fp
 8007a8a:	f7f9 f82f 	bl	8000aec <__aeabi_dcmplt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d079      	beq.n	8007b86 <_dtoa_r+0x4de>
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d076      	beq.n	8007b86 <_dtoa_r+0x4de>
 8007a98:	9b02      	ldr	r3, [sp, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dd36      	ble.n	8007b0c <_dtoa_r+0x464>
 8007a9e:	9b00      	ldr	r3, [sp, #0]
 8007aa0:	4650      	mov	r0, sl
 8007aa2:	4659      	mov	r1, fp
 8007aa4:	1e5f      	subs	r7, r3, #1
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	4b88      	ldr	r3, [pc, #544]	; (8007ccc <_dtoa_r+0x624>)
 8007aaa:	f7f8 fdad 	bl	8000608 <__aeabi_dmul>
 8007aae:	9e02      	ldr	r6, [sp, #8]
 8007ab0:	4682      	mov	sl, r0
 8007ab2:	468b      	mov	fp, r1
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f7f8 fd3c 	bl	8000534 <__aeabi_i2d>
 8007abc:	4652      	mov	r2, sl
 8007abe:	465b      	mov	r3, fp
 8007ac0:	f7f8 fda2 	bl	8000608 <__aeabi_dmul>
 8007ac4:	4b82      	ldr	r3, [pc, #520]	; (8007cd0 <_dtoa_r+0x628>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f7f8 fbe8 	bl	800029c <__adddf3>
 8007acc:	46d0      	mov	r8, sl
 8007ace:	46d9      	mov	r9, fp
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ad6:	2e00      	cmp	r6, #0
 8007ad8:	d158      	bne.n	8007b8c <_dtoa_r+0x4e4>
 8007ada:	4b7e      	ldr	r3, [pc, #504]	; (8007cd4 <_dtoa_r+0x62c>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	f7f8 fbd9 	bl	8000298 <__aeabi_dsub>
 8007ae6:	4652      	mov	r2, sl
 8007ae8:	465b      	mov	r3, fp
 8007aea:	4680      	mov	r8, r0
 8007aec:	4689      	mov	r9, r1
 8007aee:	f7f9 f81b 	bl	8000b28 <__aeabi_dcmpgt>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f040 8295 	bne.w	8008022 <_dtoa_r+0x97a>
 8007af8:	4652      	mov	r2, sl
 8007afa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007afe:	4640      	mov	r0, r8
 8007b00:	4649      	mov	r1, r9
 8007b02:	f7f8 fff3 	bl	8000aec <__aeabi_dcmplt>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f040 8289 	bne.w	800801e <_dtoa_r+0x976>
 8007b0c:	ec5b ab19 	vmov	sl, fp, d9
 8007b10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f2c0 8148 	blt.w	8007da8 <_dtoa_r+0x700>
 8007b18:	9a00      	ldr	r2, [sp, #0]
 8007b1a:	2a0e      	cmp	r2, #14
 8007b1c:	f300 8144 	bgt.w	8007da8 <_dtoa_r+0x700>
 8007b20:	4b67      	ldr	r3, [pc, #412]	; (8007cc0 <_dtoa_r+0x618>)
 8007b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f280 80d5 	bge.w	8007cdc <_dtoa_r+0x634>
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f300 80d1 	bgt.w	8007cdc <_dtoa_r+0x634>
 8007b3a:	f040 826f 	bne.w	800801c <_dtoa_r+0x974>
 8007b3e:	4b65      	ldr	r3, [pc, #404]	; (8007cd4 <_dtoa_r+0x62c>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	4640      	mov	r0, r8
 8007b44:	4649      	mov	r1, r9
 8007b46:	f7f8 fd5f 	bl	8000608 <__aeabi_dmul>
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	f7f8 ffe1 	bl	8000b14 <__aeabi_dcmpge>
 8007b52:	9e03      	ldr	r6, [sp, #12]
 8007b54:	4637      	mov	r7, r6
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f040 8245 	bne.w	8007fe6 <_dtoa_r+0x93e>
 8007b5c:	9d01      	ldr	r5, [sp, #4]
 8007b5e:	2331      	movs	r3, #49	; 0x31
 8007b60:	f805 3b01 	strb.w	r3, [r5], #1
 8007b64:	9b00      	ldr	r3, [sp, #0]
 8007b66:	3301      	adds	r3, #1
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	e240      	b.n	8007fee <_dtoa_r+0x946>
 8007b6c:	07f2      	lsls	r2, r6, #31
 8007b6e:	d505      	bpl.n	8007b7c <_dtoa_r+0x4d4>
 8007b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b74:	f7f8 fd48 	bl	8000608 <__aeabi_dmul>
 8007b78:	3501      	adds	r5, #1
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	1076      	asrs	r6, r6, #1
 8007b7e:	3708      	adds	r7, #8
 8007b80:	e777      	b.n	8007a72 <_dtoa_r+0x3ca>
 8007b82:	2502      	movs	r5, #2
 8007b84:	e779      	b.n	8007a7a <_dtoa_r+0x3d2>
 8007b86:	9f00      	ldr	r7, [sp, #0]
 8007b88:	9e03      	ldr	r6, [sp, #12]
 8007b8a:	e794      	b.n	8007ab6 <_dtoa_r+0x40e>
 8007b8c:	9901      	ldr	r1, [sp, #4]
 8007b8e:	4b4c      	ldr	r3, [pc, #304]	; (8007cc0 <_dtoa_r+0x618>)
 8007b90:	4431      	add	r1, r6
 8007b92:	910d      	str	r1, [sp, #52]	; 0x34
 8007b94:	9908      	ldr	r1, [sp, #32]
 8007b96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	d043      	beq.n	8007c2a <_dtoa_r+0x582>
 8007ba2:	494d      	ldr	r1, [pc, #308]	; (8007cd8 <_dtoa_r+0x630>)
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	f7f8 fe59 	bl	800085c <__aeabi_ddiv>
 8007baa:	4652      	mov	r2, sl
 8007bac:	465b      	mov	r3, fp
 8007bae:	f7f8 fb73 	bl	8000298 <__aeabi_dsub>
 8007bb2:	9d01      	ldr	r5, [sp, #4]
 8007bb4:	4682      	mov	sl, r0
 8007bb6:	468b      	mov	fp, r1
 8007bb8:	4649      	mov	r1, r9
 8007bba:	4640      	mov	r0, r8
 8007bbc:	f7f8 ffd4 	bl	8000b68 <__aeabi_d2iz>
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	f7f8 fcb7 	bl	8000534 <__aeabi_i2d>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4640      	mov	r0, r8
 8007bcc:	4649      	mov	r1, r9
 8007bce:	f7f8 fb63 	bl	8000298 <__aeabi_dsub>
 8007bd2:	3630      	adds	r6, #48	; 0x30
 8007bd4:	f805 6b01 	strb.w	r6, [r5], #1
 8007bd8:	4652      	mov	r2, sl
 8007bda:	465b      	mov	r3, fp
 8007bdc:	4680      	mov	r8, r0
 8007bde:	4689      	mov	r9, r1
 8007be0:	f7f8 ff84 	bl	8000aec <__aeabi_dcmplt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d163      	bne.n	8007cb0 <_dtoa_r+0x608>
 8007be8:	4642      	mov	r2, r8
 8007bea:	464b      	mov	r3, r9
 8007bec:	4936      	ldr	r1, [pc, #216]	; (8007cc8 <_dtoa_r+0x620>)
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f7f8 fb52 	bl	8000298 <__aeabi_dsub>
 8007bf4:	4652      	mov	r2, sl
 8007bf6:	465b      	mov	r3, fp
 8007bf8:	f7f8 ff78 	bl	8000aec <__aeabi_dcmplt>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f040 80b5 	bne.w	8007d6c <_dtoa_r+0x6c4>
 8007c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c04:	429d      	cmp	r5, r3
 8007c06:	d081      	beq.n	8007b0c <_dtoa_r+0x464>
 8007c08:	4b30      	ldr	r3, [pc, #192]	; (8007ccc <_dtoa_r+0x624>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4650      	mov	r0, sl
 8007c0e:	4659      	mov	r1, fp
 8007c10:	f7f8 fcfa 	bl	8000608 <__aeabi_dmul>
 8007c14:	4b2d      	ldr	r3, [pc, #180]	; (8007ccc <_dtoa_r+0x624>)
 8007c16:	4682      	mov	sl, r0
 8007c18:	468b      	mov	fp, r1
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f7f8 fcf2 	bl	8000608 <__aeabi_dmul>
 8007c24:	4680      	mov	r8, r0
 8007c26:	4689      	mov	r9, r1
 8007c28:	e7c6      	b.n	8007bb8 <_dtoa_r+0x510>
 8007c2a:	4650      	mov	r0, sl
 8007c2c:	4659      	mov	r1, fp
 8007c2e:	f7f8 fceb 	bl	8000608 <__aeabi_dmul>
 8007c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c34:	9d01      	ldr	r5, [sp, #4]
 8007c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c38:	4682      	mov	sl, r0
 8007c3a:	468b      	mov	fp, r1
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	4640      	mov	r0, r8
 8007c40:	f7f8 ff92 	bl	8000b68 <__aeabi_d2iz>
 8007c44:	4606      	mov	r6, r0
 8007c46:	f7f8 fc75 	bl	8000534 <__aeabi_i2d>
 8007c4a:	3630      	adds	r6, #48	; 0x30
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4640      	mov	r0, r8
 8007c52:	4649      	mov	r1, r9
 8007c54:	f7f8 fb20 	bl	8000298 <__aeabi_dsub>
 8007c58:	f805 6b01 	strb.w	r6, [r5], #1
 8007c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c5e:	429d      	cmp	r5, r3
 8007c60:	4680      	mov	r8, r0
 8007c62:	4689      	mov	r9, r1
 8007c64:	f04f 0200 	mov.w	r2, #0
 8007c68:	d124      	bne.n	8007cb4 <_dtoa_r+0x60c>
 8007c6a:	4b1b      	ldr	r3, [pc, #108]	; (8007cd8 <_dtoa_r+0x630>)
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	4659      	mov	r1, fp
 8007c70:	f7f8 fb14 	bl	800029c <__adddf3>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4640      	mov	r0, r8
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	f7f8 ff54 	bl	8000b28 <__aeabi_dcmpgt>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d173      	bne.n	8007d6c <_dtoa_r+0x6c4>
 8007c84:	4652      	mov	r2, sl
 8007c86:	465b      	mov	r3, fp
 8007c88:	4913      	ldr	r1, [pc, #76]	; (8007cd8 <_dtoa_r+0x630>)
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	f7f8 fb04 	bl	8000298 <__aeabi_dsub>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4640      	mov	r0, r8
 8007c96:	4649      	mov	r1, r9
 8007c98:	f7f8 ff28 	bl	8000aec <__aeabi_dcmplt>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	f43f af35 	beq.w	8007b0c <_dtoa_r+0x464>
 8007ca2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ca4:	1e6b      	subs	r3, r5, #1
 8007ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ca8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cac:	2b30      	cmp	r3, #48	; 0x30
 8007cae:	d0f8      	beq.n	8007ca2 <_dtoa_r+0x5fa>
 8007cb0:	9700      	str	r7, [sp, #0]
 8007cb2:	e049      	b.n	8007d48 <_dtoa_r+0x6a0>
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <_dtoa_r+0x624>)
 8007cb6:	f7f8 fca7 	bl	8000608 <__aeabi_dmul>
 8007cba:	4680      	mov	r8, r0
 8007cbc:	4689      	mov	r9, r1
 8007cbe:	e7bd      	b.n	8007c3c <_dtoa_r+0x594>
 8007cc0:	0800a7d0 	.word	0x0800a7d0
 8007cc4:	0800a7a8 	.word	0x0800a7a8
 8007cc8:	3ff00000 	.word	0x3ff00000
 8007ccc:	40240000 	.word	0x40240000
 8007cd0:	401c0000 	.word	0x401c0000
 8007cd4:	40140000 	.word	0x40140000
 8007cd8:	3fe00000 	.word	0x3fe00000
 8007cdc:	9d01      	ldr	r5, [sp, #4]
 8007cde:	4656      	mov	r6, sl
 8007ce0:	465f      	mov	r7, fp
 8007ce2:	4642      	mov	r2, r8
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4639      	mov	r1, r7
 8007cea:	f7f8 fdb7 	bl	800085c <__aeabi_ddiv>
 8007cee:	f7f8 ff3b 	bl	8000b68 <__aeabi_d2iz>
 8007cf2:	4682      	mov	sl, r0
 8007cf4:	f7f8 fc1e 	bl	8000534 <__aeabi_i2d>
 8007cf8:	4642      	mov	r2, r8
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	f7f8 fc84 	bl	8000608 <__aeabi_dmul>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4630      	mov	r0, r6
 8007d06:	4639      	mov	r1, r7
 8007d08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007d0c:	f7f8 fac4 	bl	8000298 <__aeabi_dsub>
 8007d10:	f805 6b01 	strb.w	r6, [r5], #1
 8007d14:	9e01      	ldr	r6, [sp, #4]
 8007d16:	9f03      	ldr	r7, [sp, #12]
 8007d18:	1bae      	subs	r6, r5, r6
 8007d1a:	42b7      	cmp	r7, r6
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	d135      	bne.n	8007d8e <_dtoa_r+0x6e6>
 8007d22:	f7f8 fabb 	bl	800029c <__adddf3>
 8007d26:	4642      	mov	r2, r8
 8007d28:	464b      	mov	r3, r9
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	460f      	mov	r7, r1
 8007d2e:	f7f8 fefb 	bl	8000b28 <__aeabi_dcmpgt>
 8007d32:	b9d0      	cbnz	r0, 8007d6a <_dtoa_r+0x6c2>
 8007d34:	4642      	mov	r2, r8
 8007d36:	464b      	mov	r3, r9
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 fecc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d40:	b110      	cbz	r0, 8007d48 <_dtoa_r+0x6a0>
 8007d42:	f01a 0f01 	tst.w	sl, #1
 8007d46:	d110      	bne.n	8007d6a <_dtoa_r+0x6c2>
 8007d48:	4620      	mov	r0, r4
 8007d4a:	ee18 1a10 	vmov	r1, s16
 8007d4e:	f000 fe75 	bl	8008a3c <_Bfree>
 8007d52:	2300      	movs	r3, #0
 8007d54:	9800      	ldr	r0, [sp, #0]
 8007d56:	702b      	strb	r3, [r5, #0]
 8007d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	6018      	str	r0, [r3, #0]
 8007d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f43f acf1 	beq.w	8007748 <_dtoa_r+0xa0>
 8007d66:	601d      	str	r5, [r3, #0]
 8007d68:	e4ee      	b.n	8007748 <_dtoa_r+0xa0>
 8007d6a:	9f00      	ldr	r7, [sp, #0]
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	461d      	mov	r5, r3
 8007d70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d74:	2a39      	cmp	r2, #57	; 0x39
 8007d76:	d106      	bne.n	8007d86 <_dtoa_r+0x6de>
 8007d78:	9a01      	ldr	r2, [sp, #4]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d1f7      	bne.n	8007d6e <_dtoa_r+0x6c6>
 8007d7e:	9901      	ldr	r1, [sp, #4]
 8007d80:	2230      	movs	r2, #48	; 0x30
 8007d82:	3701      	adds	r7, #1
 8007d84:	700a      	strb	r2, [r1, #0]
 8007d86:	781a      	ldrb	r2, [r3, #0]
 8007d88:	3201      	adds	r2, #1
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	e790      	b.n	8007cb0 <_dtoa_r+0x608>
 8007d8e:	4ba6      	ldr	r3, [pc, #664]	; (8008028 <_dtoa_r+0x980>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	f7f8 fc39 	bl	8000608 <__aeabi_dmul>
 8007d96:	2200      	movs	r2, #0
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	460f      	mov	r7, r1
 8007d9e:	f7f8 fe9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d09d      	beq.n	8007ce2 <_dtoa_r+0x63a>
 8007da6:	e7cf      	b.n	8007d48 <_dtoa_r+0x6a0>
 8007da8:	9a08      	ldr	r2, [sp, #32]
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	f000 80d7 	beq.w	8007f5e <_dtoa_r+0x8b6>
 8007db0:	9a06      	ldr	r2, [sp, #24]
 8007db2:	2a01      	cmp	r2, #1
 8007db4:	f300 80ba 	bgt.w	8007f2c <_dtoa_r+0x884>
 8007db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dba:	2a00      	cmp	r2, #0
 8007dbc:	f000 80b2 	beq.w	8007f24 <_dtoa_r+0x87c>
 8007dc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dc4:	9e07      	ldr	r6, [sp, #28]
 8007dc6:	9d04      	ldr	r5, [sp, #16]
 8007dc8:	9a04      	ldr	r2, [sp, #16]
 8007dca:	441a      	add	r2, r3
 8007dcc:	9204      	str	r2, [sp, #16]
 8007dce:	9a05      	ldr	r2, [sp, #20]
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	441a      	add	r2, r3
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	9205      	str	r2, [sp, #20]
 8007dd8:	f000 ff32 	bl	8008c40 <__i2b>
 8007ddc:	4607      	mov	r7, r0
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	dd0c      	ble.n	8007dfc <_dtoa_r+0x754>
 8007de2:	9b05      	ldr	r3, [sp, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dd09      	ble.n	8007dfc <_dtoa_r+0x754>
 8007de8:	42ab      	cmp	r3, r5
 8007dea:	9a04      	ldr	r2, [sp, #16]
 8007dec:	bfa8      	it	ge
 8007dee:	462b      	movge	r3, r5
 8007df0:	1ad2      	subs	r2, r2, r3
 8007df2:	9204      	str	r2, [sp, #16]
 8007df4:	9a05      	ldr	r2, [sp, #20]
 8007df6:	1aed      	subs	r5, r5, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	9305      	str	r3, [sp, #20]
 8007dfc:	9b07      	ldr	r3, [sp, #28]
 8007dfe:	b31b      	cbz	r3, 8007e48 <_dtoa_r+0x7a0>
 8007e00:	9b08      	ldr	r3, [sp, #32]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80af 	beq.w	8007f66 <_dtoa_r+0x8be>
 8007e08:	2e00      	cmp	r6, #0
 8007e0a:	dd13      	ble.n	8007e34 <_dtoa_r+0x78c>
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	4632      	mov	r2, r6
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 ffd5 	bl	8008dc0 <__pow5mult>
 8007e16:	ee18 2a10 	vmov	r2, s16
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	4607      	mov	r7, r0
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 ff24 	bl	8008c6c <__multiply>
 8007e24:	ee18 1a10 	vmov	r1, s16
 8007e28:	4680      	mov	r8, r0
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 fe06 	bl	8008a3c <_Bfree>
 8007e30:	ee08 8a10 	vmov	s16, r8
 8007e34:	9b07      	ldr	r3, [sp, #28]
 8007e36:	1b9a      	subs	r2, r3, r6
 8007e38:	d006      	beq.n	8007e48 <_dtoa_r+0x7a0>
 8007e3a:	ee18 1a10 	vmov	r1, s16
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 ffbe 	bl	8008dc0 <__pow5mult>
 8007e44:	ee08 0a10 	vmov	s16, r0
 8007e48:	2101      	movs	r1, #1
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 fef8 	bl	8008c40 <__i2b>
 8007e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	4606      	mov	r6, r0
 8007e56:	f340 8088 	ble.w	8007f6a <_dtoa_r+0x8c2>
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 ffae 	bl	8008dc0 <__pow5mult>
 8007e64:	9b06      	ldr	r3, [sp, #24]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	4606      	mov	r6, r0
 8007e6a:	f340 8081 	ble.w	8007f70 <_dtoa_r+0x8c8>
 8007e6e:	f04f 0800 	mov.w	r8, #0
 8007e72:	6933      	ldr	r3, [r6, #16]
 8007e74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e78:	6918      	ldr	r0, [r3, #16]
 8007e7a:	f000 fe91 	bl	8008ba0 <__hi0bits>
 8007e7e:	f1c0 0020 	rsb	r0, r0, #32
 8007e82:	9b05      	ldr	r3, [sp, #20]
 8007e84:	4418      	add	r0, r3
 8007e86:	f010 001f 	ands.w	r0, r0, #31
 8007e8a:	f000 8092 	beq.w	8007fb2 <_dtoa_r+0x90a>
 8007e8e:	f1c0 0320 	rsb	r3, r0, #32
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	f340 808a 	ble.w	8007fac <_dtoa_r+0x904>
 8007e98:	f1c0 001c 	rsb	r0, r0, #28
 8007e9c:	9b04      	ldr	r3, [sp, #16]
 8007e9e:	4403      	add	r3, r0
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	9b05      	ldr	r3, [sp, #20]
 8007ea4:	4403      	add	r3, r0
 8007ea6:	4405      	add	r5, r0
 8007ea8:	9305      	str	r3, [sp, #20]
 8007eaa:	9b04      	ldr	r3, [sp, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dd07      	ble.n	8007ec0 <_dtoa_r+0x818>
 8007eb0:	ee18 1a10 	vmov	r1, s16
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 ffdc 	bl	8008e74 <__lshift>
 8007ebc:	ee08 0a10 	vmov	s16, r0
 8007ec0:	9b05      	ldr	r3, [sp, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	dd05      	ble.n	8007ed2 <_dtoa_r+0x82a>
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 ffd2 	bl	8008e74 <__lshift>
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d06e      	beq.n	8007fb6 <_dtoa_r+0x90e>
 8007ed8:	ee18 0a10 	vmov	r0, s16
 8007edc:	4631      	mov	r1, r6
 8007ede:	f001 f839 	bl	8008f54 <__mcmp>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	da67      	bge.n	8007fb6 <_dtoa_r+0x90e>
 8007ee6:	9b00      	ldr	r3, [sp, #0]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	ee18 1a10 	vmov	r1, s16
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	220a      	movs	r2, #10
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 fdc3 	bl	8008a80 <__multadd>
 8007efa:	9b08      	ldr	r3, [sp, #32]
 8007efc:	ee08 0a10 	vmov	s16, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 81b1 	beq.w	8008268 <_dtoa_r+0xbc0>
 8007f06:	2300      	movs	r3, #0
 8007f08:	4639      	mov	r1, r7
 8007f0a:	220a      	movs	r2, #10
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f000 fdb7 	bl	8008a80 <__multadd>
 8007f12:	9b02      	ldr	r3, [sp, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	4607      	mov	r7, r0
 8007f18:	f300 808e 	bgt.w	8008038 <_dtoa_r+0x990>
 8007f1c:	9b06      	ldr	r3, [sp, #24]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	dc51      	bgt.n	8007fc6 <_dtoa_r+0x91e>
 8007f22:	e089      	b.n	8008038 <_dtoa_r+0x990>
 8007f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f2a:	e74b      	b.n	8007dc4 <_dtoa_r+0x71c>
 8007f2c:	9b03      	ldr	r3, [sp, #12]
 8007f2e:	1e5e      	subs	r6, r3, #1
 8007f30:	9b07      	ldr	r3, [sp, #28]
 8007f32:	42b3      	cmp	r3, r6
 8007f34:	bfbf      	itttt	lt
 8007f36:	9b07      	ldrlt	r3, [sp, #28]
 8007f38:	9607      	strlt	r6, [sp, #28]
 8007f3a:	1af2      	sublt	r2, r6, r3
 8007f3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f3e:	bfb6      	itet	lt
 8007f40:	189b      	addlt	r3, r3, r2
 8007f42:	1b9e      	subge	r6, r3, r6
 8007f44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f46:	9b03      	ldr	r3, [sp, #12]
 8007f48:	bfb8      	it	lt
 8007f4a:	2600      	movlt	r6, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bfb7      	itett	lt
 8007f50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007f54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007f58:	1a9d      	sublt	r5, r3, r2
 8007f5a:	2300      	movlt	r3, #0
 8007f5c:	e734      	b.n	8007dc8 <_dtoa_r+0x720>
 8007f5e:	9e07      	ldr	r6, [sp, #28]
 8007f60:	9d04      	ldr	r5, [sp, #16]
 8007f62:	9f08      	ldr	r7, [sp, #32]
 8007f64:	e73b      	b.n	8007dde <_dtoa_r+0x736>
 8007f66:	9a07      	ldr	r2, [sp, #28]
 8007f68:	e767      	b.n	8007e3a <_dtoa_r+0x792>
 8007f6a:	9b06      	ldr	r3, [sp, #24]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	dc18      	bgt.n	8007fa2 <_dtoa_r+0x8fa>
 8007f70:	f1ba 0f00 	cmp.w	sl, #0
 8007f74:	d115      	bne.n	8007fa2 <_dtoa_r+0x8fa>
 8007f76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f7a:	b993      	cbnz	r3, 8007fa2 <_dtoa_r+0x8fa>
 8007f7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f80:	0d1b      	lsrs	r3, r3, #20
 8007f82:	051b      	lsls	r3, r3, #20
 8007f84:	b183      	cbz	r3, 8007fa8 <_dtoa_r+0x900>
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	9b05      	ldr	r3, [sp, #20]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	9305      	str	r3, [sp, #20]
 8007f92:	f04f 0801 	mov.w	r8, #1
 8007f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f47f af6a 	bne.w	8007e72 <_dtoa_r+0x7ca>
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	e76f      	b.n	8007e82 <_dtoa_r+0x7da>
 8007fa2:	f04f 0800 	mov.w	r8, #0
 8007fa6:	e7f6      	b.n	8007f96 <_dtoa_r+0x8ee>
 8007fa8:	4698      	mov	r8, r3
 8007faa:	e7f4      	b.n	8007f96 <_dtoa_r+0x8ee>
 8007fac:	f43f af7d 	beq.w	8007eaa <_dtoa_r+0x802>
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	301c      	adds	r0, #28
 8007fb4:	e772      	b.n	8007e9c <_dtoa_r+0x7f4>
 8007fb6:	9b03      	ldr	r3, [sp, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dc37      	bgt.n	800802c <_dtoa_r+0x984>
 8007fbc:	9b06      	ldr	r3, [sp, #24]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	dd34      	ble.n	800802c <_dtoa_r+0x984>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	9302      	str	r3, [sp, #8]
 8007fc6:	9b02      	ldr	r3, [sp, #8]
 8007fc8:	b96b      	cbnz	r3, 8007fe6 <_dtoa_r+0x93e>
 8007fca:	4631      	mov	r1, r6
 8007fcc:	2205      	movs	r2, #5
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 fd56 	bl	8008a80 <__multadd>
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	ee18 0a10 	vmov	r0, s16
 8007fdc:	f000 ffba 	bl	8008f54 <__mcmp>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	f73f adbb 	bgt.w	8007b5c <_dtoa_r+0x4b4>
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	9d01      	ldr	r5, [sp, #4]
 8007fea:	43db      	mvns	r3, r3
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f000 fd21 	bl	8008a3c <_Bfree>
 8007ffa:	2f00      	cmp	r7, #0
 8007ffc:	f43f aea4 	beq.w	8007d48 <_dtoa_r+0x6a0>
 8008000:	f1b8 0f00 	cmp.w	r8, #0
 8008004:	d005      	beq.n	8008012 <_dtoa_r+0x96a>
 8008006:	45b8      	cmp	r8, r7
 8008008:	d003      	beq.n	8008012 <_dtoa_r+0x96a>
 800800a:	4641      	mov	r1, r8
 800800c:	4620      	mov	r0, r4
 800800e:	f000 fd15 	bl	8008a3c <_Bfree>
 8008012:	4639      	mov	r1, r7
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fd11 	bl	8008a3c <_Bfree>
 800801a:	e695      	b.n	8007d48 <_dtoa_r+0x6a0>
 800801c:	2600      	movs	r6, #0
 800801e:	4637      	mov	r7, r6
 8008020:	e7e1      	b.n	8007fe6 <_dtoa_r+0x93e>
 8008022:	9700      	str	r7, [sp, #0]
 8008024:	4637      	mov	r7, r6
 8008026:	e599      	b.n	8007b5c <_dtoa_r+0x4b4>
 8008028:	40240000 	.word	0x40240000
 800802c:	9b08      	ldr	r3, [sp, #32]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 80ca 	beq.w	80081c8 <_dtoa_r+0xb20>
 8008034:	9b03      	ldr	r3, [sp, #12]
 8008036:	9302      	str	r3, [sp, #8]
 8008038:	2d00      	cmp	r5, #0
 800803a:	dd05      	ble.n	8008048 <_dtoa_r+0x9a0>
 800803c:	4639      	mov	r1, r7
 800803e:	462a      	mov	r2, r5
 8008040:	4620      	mov	r0, r4
 8008042:	f000 ff17 	bl	8008e74 <__lshift>
 8008046:	4607      	mov	r7, r0
 8008048:	f1b8 0f00 	cmp.w	r8, #0
 800804c:	d05b      	beq.n	8008106 <_dtoa_r+0xa5e>
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4620      	mov	r0, r4
 8008052:	f000 fcb3 	bl	80089bc <_Balloc>
 8008056:	4605      	mov	r5, r0
 8008058:	b928      	cbnz	r0, 8008066 <_dtoa_r+0x9be>
 800805a:	4b87      	ldr	r3, [pc, #540]	; (8008278 <_dtoa_r+0xbd0>)
 800805c:	4602      	mov	r2, r0
 800805e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008062:	f7ff bb3b 	b.w	80076dc <_dtoa_r+0x34>
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	3202      	adds	r2, #2
 800806a:	0092      	lsls	r2, r2, #2
 800806c:	f107 010c 	add.w	r1, r7, #12
 8008070:	300c      	adds	r0, #12
 8008072:	f000 fc95 	bl	80089a0 <memcpy>
 8008076:	2201      	movs	r2, #1
 8008078:	4629      	mov	r1, r5
 800807a:	4620      	mov	r0, r4
 800807c:	f000 fefa 	bl	8008e74 <__lshift>
 8008080:	9b01      	ldr	r3, [sp, #4]
 8008082:	f103 0901 	add.w	r9, r3, #1
 8008086:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800808a:	4413      	add	r3, r2
 800808c:	9305      	str	r3, [sp, #20]
 800808e:	f00a 0301 	and.w	r3, sl, #1
 8008092:	46b8      	mov	r8, r7
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	4607      	mov	r7, r0
 8008098:	4631      	mov	r1, r6
 800809a:	ee18 0a10 	vmov	r0, s16
 800809e:	f7ff fa77 	bl	8007590 <quorem>
 80080a2:	4641      	mov	r1, r8
 80080a4:	9002      	str	r0, [sp, #8]
 80080a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080aa:	ee18 0a10 	vmov	r0, s16
 80080ae:	f000 ff51 	bl	8008f54 <__mcmp>
 80080b2:	463a      	mov	r2, r7
 80080b4:	9003      	str	r0, [sp, #12]
 80080b6:	4631      	mov	r1, r6
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 ff67 	bl	8008f8c <__mdiff>
 80080be:	68c2      	ldr	r2, [r0, #12]
 80080c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80080c4:	4605      	mov	r5, r0
 80080c6:	bb02      	cbnz	r2, 800810a <_dtoa_r+0xa62>
 80080c8:	4601      	mov	r1, r0
 80080ca:	ee18 0a10 	vmov	r0, s16
 80080ce:	f000 ff41 	bl	8008f54 <__mcmp>
 80080d2:	4602      	mov	r2, r0
 80080d4:	4629      	mov	r1, r5
 80080d6:	4620      	mov	r0, r4
 80080d8:	9207      	str	r2, [sp, #28]
 80080da:	f000 fcaf 	bl	8008a3c <_Bfree>
 80080de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80080e2:	ea43 0102 	orr.w	r1, r3, r2
 80080e6:	9b04      	ldr	r3, [sp, #16]
 80080e8:	430b      	orrs	r3, r1
 80080ea:	464d      	mov	r5, r9
 80080ec:	d10f      	bne.n	800810e <_dtoa_r+0xa66>
 80080ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080f2:	d02a      	beq.n	800814a <_dtoa_r+0xaa2>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	dd02      	ble.n	8008100 <_dtoa_r+0xa58>
 80080fa:	9b02      	ldr	r3, [sp, #8]
 80080fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008100:	f88b a000 	strb.w	sl, [fp]
 8008104:	e775      	b.n	8007ff2 <_dtoa_r+0x94a>
 8008106:	4638      	mov	r0, r7
 8008108:	e7ba      	b.n	8008080 <_dtoa_r+0x9d8>
 800810a:	2201      	movs	r2, #1
 800810c:	e7e2      	b.n	80080d4 <_dtoa_r+0xa2c>
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	db04      	blt.n	800811e <_dtoa_r+0xa76>
 8008114:	9906      	ldr	r1, [sp, #24]
 8008116:	430b      	orrs	r3, r1
 8008118:	9904      	ldr	r1, [sp, #16]
 800811a:	430b      	orrs	r3, r1
 800811c:	d122      	bne.n	8008164 <_dtoa_r+0xabc>
 800811e:	2a00      	cmp	r2, #0
 8008120:	ddee      	ble.n	8008100 <_dtoa_r+0xa58>
 8008122:	ee18 1a10 	vmov	r1, s16
 8008126:	2201      	movs	r2, #1
 8008128:	4620      	mov	r0, r4
 800812a:	f000 fea3 	bl	8008e74 <__lshift>
 800812e:	4631      	mov	r1, r6
 8008130:	ee08 0a10 	vmov	s16, r0
 8008134:	f000 ff0e 	bl	8008f54 <__mcmp>
 8008138:	2800      	cmp	r0, #0
 800813a:	dc03      	bgt.n	8008144 <_dtoa_r+0xa9c>
 800813c:	d1e0      	bne.n	8008100 <_dtoa_r+0xa58>
 800813e:	f01a 0f01 	tst.w	sl, #1
 8008142:	d0dd      	beq.n	8008100 <_dtoa_r+0xa58>
 8008144:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008148:	d1d7      	bne.n	80080fa <_dtoa_r+0xa52>
 800814a:	2339      	movs	r3, #57	; 0x39
 800814c:	f88b 3000 	strb.w	r3, [fp]
 8008150:	462b      	mov	r3, r5
 8008152:	461d      	mov	r5, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800815a:	2a39      	cmp	r2, #57	; 0x39
 800815c:	d071      	beq.n	8008242 <_dtoa_r+0xb9a>
 800815e:	3201      	adds	r2, #1
 8008160:	701a      	strb	r2, [r3, #0]
 8008162:	e746      	b.n	8007ff2 <_dtoa_r+0x94a>
 8008164:	2a00      	cmp	r2, #0
 8008166:	dd07      	ble.n	8008178 <_dtoa_r+0xad0>
 8008168:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800816c:	d0ed      	beq.n	800814a <_dtoa_r+0xaa2>
 800816e:	f10a 0301 	add.w	r3, sl, #1
 8008172:	f88b 3000 	strb.w	r3, [fp]
 8008176:	e73c      	b.n	8007ff2 <_dtoa_r+0x94a>
 8008178:	9b05      	ldr	r3, [sp, #20]
 800817a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800817e:	4599      	cmp	r9, r3
 8008180:	d047      	beq.n	8008212 <_dtoa_r+0xb6a>
 8008182:	ee18 1a10 	vmov	r1, s16
 8008186:	2300      	movs	r3, #0
 8008188:	220a      	movs	r2, #10
 800818a:	4620      	mov	r0, r4
 800818c:	f000 fc78 	bl	8008a80 <__multadd>
 8008190:	45b8      	cmp	r8, r7
 8008192:	ee08 0a10 	vmov	s16, r0
 8008196:	f04f 0300 	mov.w	r3, #0
 800819a:	f04f 020a 	mov.w	r2, #10
 800819e:	4641      	mov	r1, r8
 80081a0:	4620      	mov	r0, r4
 80081a2:	d106      	bne.n	80081b2 <_dtoa_r+0xb0a>
 80081a4:	f000 fc6c 	bl	8008a80 <__multadd>
 80081a8:	4680      	mov	r8, r0
 80081aa:	4607      	mov	r7, r0
 80081ac:	f109 0901 	add.w	r9, r9, #1
 80081b0:	e772      	b.n	8008098 <_dtoa_r+0x9f0>
 80081b2:	f000 fc65 	bl	8008a80 <__multadd>
 80081b6:	4639      	mov	r1, r7
 80081b8:	4680      	mov	r8, r0
 80081ba:	2300      	movs	r3, #0
 80081bc:	220a      	movs	r2, #10
 80081be:	4620      	mov	r0, r4
 80081c0:	f000 fc5e 	bl	8008a80 <__multadd>
 80081c4:	4607      	mov	r7, r0
 80081c6:	e7f1      	b.n	80081ac <_dtoa_r+0xb04>
 80081c8:	9b03      	ldr	r3, [sp, #12]
 80081ca:	9302      	str	r3, [sp, #8]
 80081cc:	9d01      	ldr	r5, [sp, #4]
 80081ce:	ee18 0a10 	vmov	r0, s16
 80081d2:	4631      	mov	r1, r6
 80081d4:	f7ff f9dc 	bl	8007590 <quorem>
 80081d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081dc:	9b01      	ldr	r3, [sp, #4]
 80081de:	f805 ab01 	strb.w	sl, [r5], #1
 80081e2:	1aea      	subs	r2, r5, r3
 80081e4:	9b02      	ldr	r3, [sp, #8]
 80081e6:	4293      	cmp	r3, r2
 80081e8:	dd09      	ble.n	80081fe <_dtoa_r+0xb56>
 80081ea:	ee18 1a10 	vmov	r1, s16
 80081ee:	2300      	movs	r3, #0
 80081f0:	220a      	movs	r2, #10
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 fc44 	bl	8008a80 <__multadd>
 80081f8:	ee08 0a10 	vmov	s16, r0
 80081fc:	e7e7      	b.n	80081ce <_dtoa_r+0xb26>
 80081fe:	9b02      	ldr	r3, [sp, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	bfc8      	it	gt
 8008204:	461d      	movgt	r5, r3
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	bfd8      	it	le
 800820a:	2501      	movle	r5, #1
 800820c:	441d      	add	r5, r3
 800820e:	f04f 0800 	mov.w	r8, #0
 8008212:	ee18 1a10 	vmov	r1, s16
 8008216:	2201      	movs	r2, #1
 8008218:	4620      	mov	r0, r4
 800821a:	f000 fe2b 	bl	8008e74 <__lshift>
 800821e:	4631      	mov	r1, r6
 8008220:	ee08 0a10 	vmov	s16, r0
 8008224:	f000 fe96 	bl	8008f54 <__mcmp>
 8008228:	2800      	cmp	r0, #0
 800822a:	dc91      	bgt.n	8008150 <_dtoa_r+0xaa8>
 800822c:	d102      	bne.n	8008234 <_dtoa_r+0xb8c>
 800822e:	f01a 0f01 	tst.w	sl, #1
 8008232:	d18d      	bne.n	8008150 <_dtoa_r+0xaa8>
 8008234:	462b      	mov	r3, r5
 8008236:	461d      	mov	r5, r3
 8008238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800823c:	2a30      	cmp	r2, #48	; 0x30
 800823e:	d0fa      	beq.n	8008236 <_dtoa_r+0xb8e>
 8008240:	e6d7      	b.n	8007ff2 <_dtoa_r+0x94a>
 8008242:	9a01      	ldr	r2, [sp, #4]
 8008244:	429a      	cmp	r2, r3
 8008246:	d184      	bne.n	8008152 <_dtoa_r+0xaaa>
 8008248:	9b00      	ldr	r3, [sp, #0]
 800824a:	3301      	adds	r3, #1
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	2331      	movs	r3, #49	; 0x31
 8008250:	7013      	strb	r3, [r2, #0]
 8008252:	e6ce      	b.n	8007ff2 <_dtoa_r+0x94a>
 8008254:	4b09      	ldr	r3, [pc, #36]	; (800827c <_dtoa_r+0xbd4>)
 8008256:	f7ff ba95 	b.w	8007784 <_dtoa_r+0xdc>
 800825a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800825c:	2b00      	cmp	r3, #0
 800825e:	f47f aa6e 	bne.w	800773e <_dtoa_r+0x96>
 8008262:	4b07      	ldr	r3, [pc, #28]	; (8008280 <_dtoa_r+0xbd8>)
 8008264:	f7ff ba8e 	b.w	8007784 <_dtoa_r+0xdc>
 8008268:	9b02      	ldr	r3, [sp, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	dcae      	bgt.n	80081cc <_dtoa_r+0xb24>
 800826e:	9b06      	ldr	r3, [sp, #24]
 8008270:	2b02      	cmp	r3, #2
 8008272:	f73f aea8 	bgt.w	8007fc6 <_dtoa_r+0x91e>
 8008276:	e7a9      	b.n	80081cc <_dtoa_r+0xb24>
 8008278:	0800a6c0 	.word	0x0800a6c0
 800827c:	0800a4c0 	.word	0x0800a4c0
 8008280:	0800a641 	.word	0x0800a641

08008284 <rshift>:
 8008284:	6903      	ldr	r3, [r0, #16]
 8008286:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800828a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800828e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008292:	f100 0414 	add.w	r4, r0, #20
 8008296:	dd45      	ble.n	8008324 <rshift+0xa0>
 8008298:	f011 011f 	ands.w	r1, r1, #31
 800829c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80082a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80082a4:	d10c      	bne.n	80082c0 <rshift+0x3c>
 80082a6:	f100 0710 	add.w	r7, r0, #16
 80082aa:	4629      	mov	r1, r5
 80082ac:	42b1      	cmp	r1, r6
 80082ae:	d334      	bcc.n	800831a <rshift+0x96>
 80082b0:	1a9b      	subs	r3, r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	1eea      	subs	r2, r5, #3
 80082b6:	4296      	cmp	r6, r2
 80082b8:	bf38      	it	cc
 80082ba:	2300      	movcc	r3, #0
 80082bc:	4423      	add	r3, r4
 80082be:	e015      	b.n	80082ec <rshift+0x68>
 80082c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80082c4:	f1c1 0820 	rsb	r8, r1, #32
 80082c8:	40cf      	lsrs	r7, r1
 80082ca:	f105 0e04 	add.w	lr, r5, #4
 80082ce:	46a1      	mov	r9, r4
 80082d0:	4576      	cmp	r6, lr
 80082d2:	46f4      	mov	ip, lr
 80082d4:	d815      	bhi.n	8008302 <rshift+0x7e>
 80082d6:	1a9a      	subs	r2, r3, r2
 80082d8:	0092      	lsls	r2, r2, #2
 80082da:	3a04      	subs	r2, #4
 80082dc:	3501      	adds	r5, #1
 80082de:	42ae      	cmp	r6, r5
 80082e0:	bf38      	it	cc
 80082e2:	2200      	movcc	r2, #0
 80082e4:	18a3      	adds	r3, r4, r2
 80082e6:	50a7      	str	r7, [r4, r2]
 80082e8:	b107      	cbz	r7, 80082ec <rshift+0x68>
 80082ea:	3304      	adds	r3, #4
 80082ec:	1b1a      	subs	r2, r3, r4
 80082ee:	42a3      	cmp	r3, r4
 80082f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082f4:	bf08      	it	eq
 80082f6:	2300      	moveq	r3, #0
 80082f8:	6102      	str	r2, [r0, #16]
 80082fa:	bf08      	it	eq
 80082fc:	6143      	streq	r3, [r0, #20]
 80082fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008302:	f8dc c000 	ldr.w	ip, [ip]
 8008306:	fa0c fc08 	lsl.w	ip, ip, r8
 800830a:	ea4c 0707 	orr.w	r7, ip, r7
 800830e:	f849 7b04 	str.w	r7, [r9], #4
 8008312:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008316:	40cf      	lsrs	r7, r1
 8008318:	e7da      	b.n	80082d0 <rshift+0x4c>
 800831a:	f851 cb04 	ldr.w	ip, [r1], #4
 800831e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008322:	e7c3      	b.n	80082ac <rshift+0x28>
 8008324:	4623      	mov	r3, r4
 8008326:	e7e1      	b.n	80082ec <rshift+0x68>

08008328 <__hexdig_fun>:
 8008328:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800832c:	2b09      	cmp	r3, #9
 800832e:	d802      	bhi.n	8008336 <__hexdig_fun+0xe>
 8008330:	3820      	subs	r0, #32
 8008332:	b2c0      	uxtb	r0, r0
 8008334:	4770      	bx	lr
 8008336:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800833a:	2b05      	cmp	r3, #5
 800833c:	d801      	bhi.n	8008342 <__hexdig_fun+0x1a>
 800833e:	3847      	subs	r0, #71	; 0x47
 8008340:	e7f7      	b.n	8008332 <__hexdig_fun+0xa>
 8008342:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008346:	2b05      	cmp	r3, #5
 8008348:	d801      	bhi.n	800834e <__hexdig_fun+0x26>
 800834a:	3827      	subs	r0, #39	; 0x27
 800834c:	e7f1      	b.n	8008332 <__hexdig_fun+0xa>
 800834e:	2000      	movs	r0, #0
 8008350:	4770      	bx	lr
	...

08008354 <__gethex>:
 8008354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008358:	ed2d 8b02 	vpush	{d8}
 800835c:	b089      	sub	sp, #36	; 0x24
 800835e:	ee08 0a10 	vmov	s16, r0
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	4bb4      	ldr	r3, [pc, #720]	; (8008638 <__gethex+0x2e4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	4618      	mov	r0, r3
 800836c:	468b      	mov	fp, r1
 800836e:	4690      	mov	r8, r2
 8008370:	f7f7 ff36 	bl	80001e0 <strlen>
 8008374:	9b01      	ldr	r3, [sp, #4]
 8008376:	f8db 2000 	ldr.w	r2, [fp]
 800837a:	4403      	add	r3, r0
 800837c:	4682      	mov	sl, r0
 800837e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008382:	9305      	str	r3, [sp, #20]
 8008384:	1c93      	adds	r3, r2, #2
 8008386:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800838a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800838e:	32fe      	adds	r2, #254	; 0xfe
 8008390:	18d1      	adds	r1, r2, r3
 8008392:	461f      	mov	r7, r3
 8008394:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008398:	9100      	str	r1, [sp, #0]
 800839a:	2830      	cmp	r0, #48	; 0x30
 800839c:	d0f8      	beq.n	8008390 <__gethex+0x3c>
 800839e:	f7ff ffc3 	bl	8008328 <__hexdig_fun>
 80083a2:	4604      	mov	r4, r0
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d13a      	bne.n	800841e <__gethex+0xca>
 80083a8:	9901      	ldr	r1, [sp, #4]
 80083aa:	4652      	mov	r2, sl
 80083ac:	4638      	mov	r0, r7
 80083ae:	f001 fa33 	bl	8009818 <strncmp>
 80083b2:	4605      	mov	r5, r0
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d168      	bne.n	800848a <__gethex+0x136>
 80083b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80083bc:	eb07 060a 	add.w	r6, r7, sl
 80083c0:	f7ff ffb2 	bl	8008328 <__hexdig_fun>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d062      	beq.n	800848e <__gethex+0x13a>
 80083c8:	4633      	mov	r3, r6
 80083ca:	7818      	ldrb	r0, [r3, #0]
 80083cc:	2830      	cmp	r0, #48	; 0x30
 80083ce:	461f      	mov	r7, r3
 80083d0:	f103 0301 	add.w	r3, r3, #1
 80083d4:	d0f9      	beq.n	80083ca <__gethex+0x76>
 80083d6:	f7ff ffa7 	bl	8008328 <__hexdig_fun>
 80083da:	2301      	movs	r3, #1
 80083dc:	fab0 f480 	clz	r4, r0
 80083e0:	0964      	lsrs	r4, r4, #5
 80083e2:	4635      	mov	r5, r6
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	463a      	mov	r2, r7
 80083e8:	4616      	mov	r6, r2
 80083ea:	3201      	adds	r2, #1
 80083ec:	7830      	ldrb	r0, [r6, #0]
 80083ee:	f7ff ff9b 	bl	8008328 <__hexdig_fun>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d1f8      	bne.n	80083e8 <__gethex+0x94>
 80083f6:	9901      	ldr	r1, [sp, #4]
 80083f8:	4652      	mov	r2, sl
 80083fa:	4630      	mov	r0, r6
 80083fc:	f001 fa0c 	bl	8009818 <strncmp>
 8008400:	b980      	cbnz	r0, 8008424 <__gethex+0xd0>
 8008402:	b94d      	cbnz	r5, 8008418 <__gethex+0xc4>
 8008404:	eb06 050a 	add.w	r5, r6, sl
 8008408:	462a      	mov	r2, r5
 800840a:	4616      	mov	r6, r2
 800840c:	3201      	adds	r2, #1
 800840e:	7830      	ldrb	r0, [r6, #0]
 8008410:	f7ff ff8a 	bl	8008328 <__hexdig_fun>
 8008414:	2800      	cmp	r0, #0
 8008416:	d1f8      	bne.n	800840a <__gethex+0xb6>
 8008418:	1bad      	subs	r5, r5, r6
 800841a:	00ad      	lsls	r5, r5, #2
 800841c:	e004      	b.n	8008428 <__gethex+0xd4>
 800841e:	2400      	movs	r4, #0
 8008420:	4625      	mov	r5, r4
 8008422:	e7e0      	b.n	80083e6 <__gethex+0x92>
 8008424:	2d00      	cmp	r5, #0
 8008426:	d1f7      	bne.n	8008418 <__gethex+0xc4>
 8008428:	7833      	ldrb	r3, [r6, #0]
 800842a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800842e:	2b50      	cmp	r3, #80	; 0x50
 8008430:	d13b      	bne.n	80084aa <__gethex+0x156>
 8008432:	7873      	ldrb	r3, [r6, #1]
 8008434:	2b2b      	cmp	r3, #43	; 0x2b
 8008436:	d02c      	beq.n	8008492 <__gethex+0x13e>
 8008438:	2b2d      	cmp	r3, #45	; 0x2d
 800843a:	d02e      	beq.n	800849a <__gethex+0x146>
 800843c:	1c71      	adds	r1, r6, #1
 800843e:	f04f 0900 	mov.w	r9, #0
 8008442:	7808      	ldrb	r0, [r1, #0]
 8008444:	f7ff ff70 	bl	8008328 <__hexdig_fun>
 8008448:	1e43      	subs	r3, r0, #1
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b18      	cmp	r3, #24
 800844e:	d82c      	bhi.n	80084aa <__gethex+0x156>
 8008450:	f1a0 0210 	sub.w	r2, r0, #16
 8008454:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008458:	f7ff ff66 	bl	8008328 <__hexdig_fun>
 800845c:	1e43      	subs	r3, r0, #1
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b18      	cmp	r3, #24
 8008462:	d91d      	bls.n	80084a0 <__gethex+0x14c>
 8008464:	f1b9 0f00 	cmp.w	r9, #0
 8008468:	d000      	beq.n	800846c <__gethex+0x118>
 800846a:	4252      	negs	r2, r2
 800846c:	4415      	add	r5, r2
 800846e:	f8cb 1000 	str.w	r1, [fp]
 8008472:	b1e4      	cbz	r4, 80084ae <__gethex+0x15a>
 8008474:	9b00      	ldr	r3, [sp, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	bf14      	ite	ne
 800847a:	2700      	movne	r7, #0
 800847c:	2706      	moveq	r7, #6
 800847e:	4638      	mov	r0, r7
 8008480:	b009      	add	sp, #36	; 0x24
 8008482:	ecbd 8b02 	vpop	{d8}
 8008486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848a:	463e      	mov	r6, r7
 800848c:	4625      	mov	r5, r4
 800848e:	2401      	movs	r4, #1
 8008490:	e7ca      	b.n	8008428 <__gethex+0xd4>
 8008492:	f04f 0900 	mov.w	r9, #0
 8008496:	1cb1      	adds	r1, r6, #2
 8008498:	e7d3      	b.n	8008442 <__gethex+0xee>
 800849a:	f04f 0901 	mov.w	r9, #1
 800849e:	e7fa      	b.n	8008496 <__gethex+0x142>
 80084a0:	230a      	movs	r3, #10
 80084a2:	fb03 0202 	mla	r2, r3, r2, r0
 80084a6:	3a10      	subs	r2, #16
 80084a8:	e7d4      	b.n	8008454 <__gethex+0x100>
 80084aa:	4631      	mov	r1, r6
 80084ac:	e7df      	b.n	800846e <__gethex+0x11a>
 80084ae:	1bf3      	subs	r3, r6, r7
 80084b0:	3b01      	subs	r3, #1
 80084b2:	4621      	mov	r1, r4
 80084b4:	2b07      	cmp	r3, #7
 80084b6:	dc0b      	bgt.n	80084d0 <__gethex+0x17c>
 80084b8:	ee18 0a10 	vmov	r0, s16
 80084bc:	f000 fa7e 	bl	80089bc <_Balloc>
 80084c0:	4604      	mov	r4, r0
 80084c2:	b940      	cbnz	r0, 80084d6 <__gethex+0x182>
 80084c4:	4b5d      	ldr	r3, [pc, #372]	; (800863c <__gethex+0x2e8>)
 80084c6:	4602      	mov	r2, r0
 80084c8:	21de      	movs	r1, #222	; 0xde
 80084ca:	485d      	ldr	r0, [pc, #372]	; (8008640 <__gethex+0x2ec>)
 80084cc:	f001 f9c6 	bl	800985c <__assert_func>
 80084d0:	3101      	adds	r1, #1
 80084d2:	105b      	asrs	r3, r3, #1
 80084d4:	e7ee      	b.n	80084b4 <__gethex+0x160>
 80084d6:	f100 0914 	add.w	r9, r0, #20
 80084da:	f04f 0b00 	mov.w	fp, #0
 80084de:	f1ca 0301 	rsb	r3, sl, #1
 80084e2:	f8cd 9008 	str.w	r9, [sp, #8]
 80084e6:	f8cd b000 	str.w	fp, [sp]
 80084ea:	9306      	str	r3, [sp, #24]
 80084ec:	42b7      	cmp	r7, r6
 80084ee:	d340      	bcc.n	8008572 <__gethex+0x21e>
 80084f0:	9802      	ldr	r0, [sp, #8]
 80084f2:	9b00      	ldr	r3, [sp, #0]
 80084f4:	f840 3b04 	str.w	r3, [r0], #4
 80084f8:	eba0 0009 	sub.w	r0, r0, r9
 80084fc:	1080      	asrs	r0, r0, #2
 80084fe:	0146      	lsls	r6, r0, #5
 8008500:	6120      	str	r0, [r4, #16]
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fb4c 	bl	8008ba0 <__hi0bits>
 8008508:	1a30      	subs	r0, r6, r0
 800850a:	f8d8 6000 	ldr.w	r6, [r8]
 800850e:	42b0      	cmp	r0, r6
 8008510:	dd63      	ble.n	80085da <__gethex+0x286>
 8008512:	1b87      	subs	r7, r0, r6
 8008514:	4639      	mov	r1, r7
 8008516:	4620      	mov	r0, r4
 8008518:	f000 fef0 	bl	80092fc <__any_on>
 800851c:	4682      	mov	sl, r0
 800851e:	b1a8      	cbz	r0, 800854c <__gethex+0x1f8>
 8008520:	1e7b      	subs	r3, r7, #1
 8008522:	1159      	asrs	r1, r3, #5
 8008524:	f003 021f 	and.w	r2, r3, #31
 8008528:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800852c:	f04f 0a01 	mov.w	sl, #1
 8008530:	fa0a f202 	lsl.w	r2, sl, r2
 8008534:	420a      	tst	r2, r1
 8008536:	d009      	beq.n	800854c <__gethex+0x1f8>
 8008538:	4553      	cmp	r3, sl
 800853a:	dd05      	ble.n	8008548 <__gethex+0x1f4>
 800853c:	1eb9      	subs	r1, r7, #2
 800853e:	4620      	mov	r0, r4
 8008540:	f000 fedc 	bl	80092fc <__any_on>
 8008544:	2800      	cmp	r0, #0
 8008546:	d145      	bne.n	80085d4 <__gethex+0x280>
 8008548:	f04f 0a02 	mov.w	sl, #2
 800854c:	4639      	mov	r1, r7
 800854e:	4620      	mov	r0, r4
 8008550:	f7ff fe98 	bl	8008284 <rshift>
 8008554:	443d      	add	r5, r7
 8008556:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800855a:	42ab      	cmp	r3, r5
 800855c:	da4c      	bge.n	80085f8 <__gethex+0x2a4>
 800855e:	ee18 0a10 	vmov	r0, s16
 8008562:	4621      	mov	r1, r4
 8008564:	f000 fa6a 	bl	8008a3c <_Bfree>
 8008568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800856a:	2300      	movs	r3, #0
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	27a3      	movs	r7, #163	; 0xa3
 8008570:	e785      	b.n	800847e <__gethex+0x12a>
 8008572:	1e73      	subs	r3, r6, #1
 8008574:	9a05      	ldr	r2, [sp, #20]
 8008576:	9303      	str	r3, [sp, #12]
 8008578:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800857c:	4293      	cmp	r3, r2
 800857e:	d019      	beq.n	80085b4 <__gethex+0x260>
 8008580:	f1bb 0f20 	cmp.w	fp, #32
 8008584:	d107      	bne.n	8008596 <__gethex+0x242>
 8008586:	9b02      	ldr	r3, [sp, #8]
 8008588:	9a00      	ldr	r2, [sp, #0]
 800858a:	f843 2b04 	str.w	r2, [r3], #4
 800858e:	9302      	str	r3, [sp, #8]
 8008590:	2300      	movs	r3, #0
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	469b      	mov	fp, r3
 8008596:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800859a:	f7ff fec5 	bl	8008328 <__hexdig_fun>
 800859e:	9b00      	ldr	r3, [sp, #0]
 80085a0:	f000 000f 	and.w	r0, r0, #15
 80085a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80085a8:	4303      	orrs	r3, r0
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	f10b 0b04 	add.w	fp, fp, #4
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	e00d      	b.n	80085d0 <__gethex+0x27c>
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	9a06      	ldr	r2, [sp, #24]
 80085b8:	4413      	add	r3, r2
 80085ba:	42bb      	cmp	r3, r7
 80085bc:	d3e0      	bcc.n	8008580 <__gethex+0x22c>
 80085be:	4618      	mov	r0, r3
 80085c0:	9901      	ldr	r1, [sp, #4]
 80085c2:	9307      	str	r3, [sp, #28]
 80085c4:	4652      	mov	r2, sl
 80085c6:	f001 f927 	bl	8009818 <strncmp>
 80085ca:	9b07      	ldr	r3, [sp, #28]
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d1d7      	bne.n	8008580 <__gethex+0x22c>
 80085d0:	461e      	mov	r6, r3
 80085d2:	e78b      	b.n	80084ec <__gethex+0x198>
 80085d4:	f04f 0a03 	mov.w	sl, #3
 80085d8:	e7b8      	b.n	800854c <__gethex+0x1f8>
 80085da:	da0a      	bge.n	80085f2 <__gethex+0x29e>
 80085dc:	1a37      	subs	r7, r6, r0
 80085de:	4621      	mov	r1, r4
 80085e0:	ee18 0a10 	vmov	r0, s16
 80085e4:	463a      	mov	r2, r7
 80085e6:	f000 fc45 	bl	8008e74 <__lshift>
 80085ea:	1bed      	subs	r5, r5, r7
 80085ec:	4604      	mov	r4, r0
 80085ee:	f100 0914 	add.w	r9, r0, #20
 80085f2:	f04f 0a00 	mov.w	sl, #0
 80085f6:	e7ae      	b.n	8008556 <__gethex+0x202>
 80085f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085fc:	42a8      	cmp	r0, r5
 80085fe:	dd72      	ble.n	80086e6 <__gethex+0x392>
 8008600:	1b45      	subs	r5, r0, r5
 8008602:	42ae      	cmp	r6, r5
 8008604:	dc36      	bgt.n	8008674 <__gethex+0x320>
 8008606:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800860a:	2b02      	cmp	r3, #2
 800860c:	d02a      	beq.n	8008664 <__gethex+0x310>
 800860e:	2b03      	cmp	r3, #3
 8008610:	d02c      	beq.n	800866c <__gethex+0x318>
 8008612:	2b01      	cmp	r3, #1
 8008614:	d11c      	bne.n	8008650 <__gethex+0x2fc>
 8008616:	42ae      	cmp	r6, r5
 8008618:	d11a      	bne.n	8008650 <__gethex+0x2fc>
 800861a:	2e01      	cmp	r6, #1
 800861c:	d112      	bne.n	8008644 <__gethex+0x2f0>
 800861e:	9a04      	ldr	r2, [sp, #16]
 8008620:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	2301      	movs	r3, #1
 8008628:	6123      	str	r3, [r4, #16]
 800862a:	f8c9 3000 	str.w	r3, [r9]
 800862e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008630:	2762      	movs	r7, #98	; 0x62
 8008632:	601c      	str	r4, [r3, #0]
 8008634:	e723      	b.n	800847e <__gethex+0x12a>
 8008636:	bf00      	nop
 8008638:	0800a738 	.word	0x0800a738
 800863c:	0800a6c0 	.word	0x0800a6c0
 8008640:	0800a6d1 	.word	0x0800a6d1
 8008644:	1e71      	subs	r1, r6, #1
 8008646:	4620      	mov	r0, r4
 8008648:	f000 fe58 	bl	80092fc <__any_on>
 800864c:	2800      	cmp	r0, #0
 800864e:	d1e6      	bne.n	800861e <__gethex+0x2ca>
 8008650:	ee18 0a10 	vmov	r0, s16
 8008654:	4621      	mov	r1, r4
 8008656:	f000 f9f1 	bl	8008a3c <_Bfree>
 800865a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800865c:	2300      	movs	r3, #0
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	2750      	movs	r7, #80	; 0x50
 8008662:	e70c      	b.n	800847e <__gethex+0x12a>
 8008664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1f2      	bne.n	8008650 <__gethex+0x2fc>
 800866a:	e7d8      	b.n	800861e <__gethex+0x2ca>
 800866c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1d5      	bne.n	800861e <__gethex+0x2ca>
 8008672:	e7ed      	b.n	8008650 <__gethex+0x2fc>
 8008674:	1e6f      	subs	r7, r5, #1
 8008676:	f1ba 0f00 	cmp.w	sl, #0
 800867a:	d131      	bne.n	80086e0 <__gethex+0x38c>
 800867c:	b127      	cbz	r7, 8008688 <__gethex+0x334>
 800867e:	4639      	mov	r1, r7
 8008680:	4620      	mov	r0, r4
 8008682:	f000 fe3b 	bl	80092fc <__any_on>
 8008686:	4682      	mov	sl, r0
 8008688:	117b      	asrs	r3, r7, #5
 800868a:	2101      	movs	r1, #1
 800868c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008690:	f007 071f 	and.w	r7, r7, #31
 8008694:	fa01 f707 	lsl.w	r7, r1, r7
 8008698:	421f      	tst	r7, r3
 800869a:	4629      	mov	r1, r5
 800869c:	4620      	mov	r0, r4
 800869e:	bf18      	it	ne
 80086a0:	f04a 0a02 	orrne.w	sl, sl, #2
 80086a4:	1b76      	subs	r6, r6, r5
 80086a6:	f7ff fded 	bl	8008284 <rshift>
 80086aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80086ae:	2702      	movs	r7, #2
 80086b0:	f1ba 0f00 	cmp.w	sl, #0
 80086b4:	d048      	beq.n	8008748 <__gethex+0x3f4>
 80086b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d015      	beq.n	80086ea <__gethex+0x396>
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d017      	beq.n	80086f2 <__gethex+0x39e>
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d109      	bne.n	80086da <__gethex+0x386>
 80086c6:	f01a 0f02 	tst.w	sl, #2
 80086ca:	d006      	beq.n	80086da <__gethex+0x386>
 80086cc:	f8d9 0000 	ldr.w	r0, [r9]
 80086d0:	ea4a 0a00 	orr.w	sl, sl, r0
 80086d4:	f01a 0f01 	tst.w	sl, #1
 80086d8:	d10e      	bne.n	80086f8 <__gethex+0x3a4>
 80086da:	f047 0710 	orr.w	r7, r7, #16
 80086de:	e033      	b.n	8008748 <__gethex+0x3f4>
 80086e0:	f04f 0a01 	mov.w	sl, #1
 80086e4:	e7d0      	b.n	8008688 <__gethex+0x334>
 80086e6:	2701      	movs	r7, #1
 80086e8:	e7e2      	b.n	80086b0 <__gethex+0x35c>
 80086ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086ec:	f1c3 0301 	rsb	r3, r3, #1
 80086f0:	9315      	str	r3, [sp, #84]	; 0x54
 80086f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0f0      	beq.n	80086da <__gethex+0x386>
 80086f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80086fc:	f104 0314 	add.w	r3, r4, #20
 8008700:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008704:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008708:	f04f 0c00 	mov.w	ip, #0
 800870c:	4618      	mov	r0, r3
 800870e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008712:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008716:	d01c      	beq.n	8008752 <__gethex+0x3fe>
 8008718:	3201      	adds	r2, #1
 800871a:	6002      	str	r2, [r0, #0]
 800871c:	2f02      	cmp	r7, #2
 800871e:	f104 0314 	add.w	r3, r4, #20
 8008722:	d13f      	bne.n	80087a4 <__gethex+0x450>
 8008724:	f8d8 2000 	ldr.w	r2, [r8]
 8008728:	3a01      	subs	r2, #1
 800872a:	42b2      	cmp	r2, r6
 800872c:	d10a      	bne.n	8008744 <__gethex+0x3f0>
 800872e:	1171      	asrs	r1, r6, #5
 8008730:	2201      	movs	r2, #1
 8008732:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008736:	f006 061f 	and.w	r6, r6, #31
 800873a:	fa02 f606 	lsl.w	r6, r2, r6
 800873e:	421e      	tst	r6, r3
 8008740:	bf18      	it	ne
 8008742:	4617      	movne	r7, r2
 8008744:	f047 0720 	orr.w	r7, r7, #32
 8008748:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800874a:	601c      	str	r4, [r3, #0]
 800874c:	9b04      	ldr	r3, [sp, #16]
 800874e:	601d      	str	r5, [r3, #0]
 8008750:	e695      	b.n	800847e <__gethex+0x12a>
 8008752:	4299      	cmp	r1, r3
 8008754:	f843 cc04 	str.w	ip, [r3, #-4]
 8008758:	d8d8      	bhi.n	800870c <__gethex+0x3b8>
 800875a:	68a3      	ldr	r3, [r4, #8]
 800875c:	459b      	cmp	fp, r3
 800875e:	db19      	blt.n	8008794 <__gethex+0x440>
 8008760:	6861      	ldr	r1, [r4, #4]
 8008762:	ee18 0a10 	vmov	r0, s16
 8008766:	3101      	adds	r1, #1
 8008768:	f000 f928 	bl	80089bc <_Balloc>
 800876c:	4681      	mov	r9, r0
 800876e:	b918      	cbnz	r0, 8008778 <__gethex+0x424>
 8008770:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <__gethex+0x488>)
 8008772:	4602      	mov	r2, r0
 8008774:	2184      	movs	r1, #132	; 0x84
 8008776:	e6a8      	b.n	80084ca <__gethex+0x176>
 8008778:	6922      	ldr	r2, [r4, #16]
 800877a:	3202      	adds	r2, #2
 800877c:	f104 010c 	add.w	r1, r4, #12
 8008780:	0092      	lsls	r2, r2, #2
 8008782:	300c      	adds	r0, #12
 8008784:	f000 f90c 	bl	80089a0 <memcpy>
 8008788:	4621      	mov	r1, r4
 800878a:	ee18 0a10 	vmov	r0, s16
 800878e:	f000 f955 	bl	8008a3c <_Bfree>
 8008792:	464c      	mov	r4, r9
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800879c:	6122      	str	r2, [r4, #16]
 800879e:	2201      	movs	r2, #1
 80087a0:	615a      	str	r2, [r3, #20]
 80087a2:	e7bb      	b.n	800871c <__gethex+0x3c8>
 80087a4:	6922      	ldr	r2, [r4, #16]
 80087a6:	455a      	cmp	r2, fp
 80087a8:	dd0b      	ble.n	80087c2 <__gethex+0x46e>
 80087aa:	2101      	movs	r1, #1
 80087ac:	4620      	mov	r0, r4
 80087ae:	f7ff fd69 	bl	8008284 <rshift>
 80087b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087b6:	3501      	adds	r5, #1
 80087b8:	42ab      	cmp	r3, r5
 80087ba:	f6ff aed0 	blt.w	800855e <__gethex+0x20a>
 80087be:	2701      	movs	r7, #1
 80087c0:	e7c0      	b.n	8008744 <__gethex+0x3f0>
 80087c2:	f016 061f 	ands.w	r6, r6, #31
 80087c6:	d0fa      	beq.n	80087be <__gethex+0x46a>
 80087c8:	4453      	add	r3, sl
 80087ca:	f1c6 0620 	rsb	r6, r6, #32
 80087ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80087d2:	f000 f9e5 	bl	8008ba0 <__hi0bits>
 80087d6:	42b0      	cmp	r0, r6
 80087d8:	dbe7      	blt.n	80087aa <__gethex+0x456>
 80087da:	e7f0      	b.n	80087be <__gethex+0x46a>
 80087dc:	0800a6c0 	.word	0x0800a6c0

080087e0 <L_shift>:
 80087e0:	f1c2 0208 	rsb	r2, r2, #8
 80087e4:	0092      	lsls	r2, r2, #2
 80087e6:	b570      	push	{r4, r5, r6, lr}
 80087e8:	f1c2 0620 	rsb	r6, r2, #32
 80087ec:	6843      	ldr	r3, [r0, #4]
 80087ee:	6804      	ldr	r4, [r0, #0]
 80087f0:	fa03 f506 	lsl.w	r5, r3, r6
 80087f4:	432c      	orrs	r4, r5
 80087f6:	40d3      	lsrs	r3, r2
 80087f8:	6004      	str	r4, [r0, #0]
 80087fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80087fe:	4288      	cmp	r0, r1
 8008800:	d3f4      	bcc.n	80087ec <L_shift+0xc>
 8008802:	bd70      	pop	{r4, r5, r6, pc}

08008804 <__match>:
 8008804:	b530      	push	{r4, r5, lr}
 8008806:	6803      	ldr	r3, [r0, #0]
 8008808:	3301      	adds	r3, #1
 800880a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800880e:	b914      	cbnz	r4, 8008816 <__match+0x12>
 8008810:	6003      	str	r3, [r0, #0]
 8008812:	2001      	movs	r0, #1
 8008814:	bd30      	pop	{r4, r5, pc}
 8008816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800881a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800881e:	2d19      	cmp	r5, #25
 8008820:	bf98      	it	ls
 8008822:	3220      	addls	r2, #32
 8008824:	42a2      	cmp	r2, r4
 8008826:	d0f0      	beq.n	800880a <__match+0x6>
 8008828:	2000      	movs	r0, #0
 800882a:	e7f3      	b.n	8008814 <__match+0x10>

0800882c <__hexnan>:
 800882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	680b      	ldr	r3, [r1, #0]
 8008832:	115e      	asrs	r6, r3, #5
 8008834:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008838:	f013 031f 	ands.w	r3, r3, #31
 800883c:	b087      	sub	sp, #28
 800883e:	bf18      	it	ne
 8008840:	3604      	addne	r6, #4
 8008842:	2500      	movs	r5, #0
 8008844:	1f37      	subs	r7, r6, #4
 8008846:	4690      	mov	r8, r2
 8008848:	6802      	ldr	r2, [r0, #0]
 800884a:	9301      	str	r3, [sp, #4]
 800884c:	4682      	mov	sl, r0
 800884e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008852:	46b9      	mov	r9, r7
 8008854:	463c      	mov	r4, r7
 8008856:	9502      	str	r5, [sp, #8]
 8008858:	46ab      	mov	fp, r5
 800885a:	7851      	ldrb	r1, [r2, #1]
 800885c:	1c53      	adds	r3, r2, #1
 800885e:	9303      	str	r3, [sp, #12]
 8008860:	b341      	cbz	r1, 80088b4 <__hexnan+0x88>
 8008862:	4608      	mov	r0, r1
 8008864:	9205      	str	r2, [sp, #20]
 8008866:	9104      	str	r1, [sp, #16]
 8008868:	f7ff fd5e 	bl	8008328 <__hexdig_fun>
 800886c:	2800      	cmp	r0, #0
 800886e:	d14f      	bne.n	8008910 <__hexnan+0xe4>
 8008870:	9904      	ldr	r1, [sp, #16]
 8008872:	9a05      	ldr	r2, [sp, #20]
 8008874:	2920      	cmp	r1, #32
 8008876:	d818      	bhi.n	80088aa <__hexnan+0x7e>
 8008878:	9b02      	ldr	r3, [sp, #8]
 800887a:	459b      	cmp	fp, r3
 800887c:	dd13      	ble.n	80088a6 <__hexnan+0x7a>
 800887e:	454c      	cmp	r4, r9
 8008880:	d206      	bcs.n	8008890 <__hexnan+0x64>
 8008882:	2d07      	cmp	r5, #7
 8008884:	dc04      	bgt.n	8008890 <__hexnan+0x64>
 8008886:	462a      	mov	r2, r5
 8008888:	4649      	mov	r1, r9
 800888a:	4620      	mov	r0, r4
 800888c:	f7ff ffa8 	bl	80087e0 <L_shift>
 8008890:	4544      	cmp	r4, r8
 8008892:	d950      	bls.n	8008936 <__hexnan+0x10a>
 8008894:	2300      	movs	r3, #0
 8008896:	f1a4 0904 	sub.w	r9, r4, #4
 800889a:	f844 3c04 	str.w	r3, [r4, #-4]
 800889e:	f8cd b008 	str.w	fp, [sp, #8]
 80088a2:	464c      	mov	r4, r9
 80088a4:	461d      	mov	r5, r3
 80088a6:	9a03      	ldr	r2, [sp, #12]
 80088a8:	e7d7      	b.n	800885a <__hexnan+0x2e>
 80088aa:	2929      	cmp	r1, #41	; 0x29
 80088ac:	d156      	bne.n	800895c <__hexnan+0x130>
 80088ae:	3202      	adds	r2, #2
 80088b0:	f8ca 2000 	str.w	r2, [sl]
 80088b4:	f1bb 0f00 	cmp.w	fp, #0
 80088b8:	d050      	beq.n	800895c <__hexnan+0x130>
 80088ba:	454c      	cmp	r4, r9
 80088bc:	d206      	bcs.n	80088cc <__hexnan+0xa0>
 80088be:	2d07      	cmp	r5, #7
 80088c0:	dc04      	bgt.n	80088cc <__hexnan+0xa0>
 80088c2:	462a      	mov	r2, r5
 80088c4:	4649      	mov	r1, r9
 80088c6:	4620      	mov	r0, r4
 80088c8:	f7ff ff8a 	bl	80087e0 <L_shift>
 80088cc:	4544      	cmp	r4, r8
 80088ce:	d934      	bls.n	800893a <__hexnan+0x10e>
 80088d0:	f1a8 0204 	sub.w	r2, r8, #4
 80088d4:	4623      	mov	r3, r4
 80088d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80088da:	f842 1f04 	str.w	r1, [r2, #4]!
 80088de:	429f      	cmp	r7, r3
 80088e0:	d2f9      	bcs.n	80088d6 <__hexnan+0xaa>
 80088e2:	1b3b      	subs	r3, r7, r4
 80088e4:	f023 0303 	bic.w	r3, r3, #3
 80088e8:	3304      	adds	r3, #4
 80088ea:	3401      	adds	r4, #1
 80088ec:	3e03      	subs	r6, #3
 80088ee:	42b4      	cmp	r4, r6
 80088f0:	bf88      	it	hi
 80088f2:	2304      	movhi	r3, #4
 80088f4:	4443      	add	r3, r8
 80088f6:	2200      	movs	r2, #0
 80088f8:	f843 2b04 	str.w	r2, [r3], #4
 80088fc:	429f      	cmp	r7, r3
 80088fe:	d2fb      	bcs.n	80088f8 <__hexnan+0xcc>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	b91b      	cbnz	r3, 800890c <__hexnan+0xe0>
 8008904:	4547      	cmp	r7, r8
 8008906:	d127      	bne.n	8008958 <__hexnan+0x12c>
 8008908:	2301      	movs	r3, #1
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	2005      	movs	r0, #5
 800890e:	e026      	b.n	800895e <__hexnan+0x132>
 8008910:	3501      	adds	r5, #1
 8008912:	2d08      	cmp	r5, #8
 8008914:	f10b 0b01 	add.w	fp, fp, #1
 8008918:	dd06      	ble.n	8008928 <__hexnan+0xfc>
 800891a:	4544      	cmp	r4, r8
 800891c:	d9c3      	bls.n	80088a6 <__hexnan+0x7a>
 800891e:	2300      	movs	r3, #0
 8008920:	f844 3c04 	str.w	r3, [r4, #-4]
 8008924:	2501      	movs	r5, #1
 8008926:	3c04      	subs	r4, #4
 8008928:	6822      	ldr	r2, [r4, #0]
 800892a:	f000 000f 	and.w	r0, r0, #15
 800892e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008932:	6022      	str	r2, [r4, #0]
 8008934:	e7b7      	b.n	80088a6 <__hexnan+0x7a>
 8008936:	2508      	movs	r5, #8
 8008938:	e7b5      	b.n	80088a6 <__hexnan+0x7a>
 800893a:	9b01      	ldr	r3, [sp, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0df      	beq.n	8008900 <__hexnan+0xd4>
 8008940:	f04f 32ff 	mov.w	r2, #4294967295
 8008944:	f1c3 0320 	rsb	r3, r3, #32
 8008948:	fa22 f303 	lsr.w	r3, r2, r3
 800894c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008950:	401a      	ands	r2, r3
 8008952:	f846 2c04 	str.w	r2, [r6, #-4]
 8008956:	e7d3      	b.n	8008900 <__hexnan+0xd4>
 8008958:	3f04      	subs	r7, #4
 800895a:	e7d1      	b.n	8008900 <__hexnan+0xd4>
 800895c:	2004      	movs	r0, #4
 800895e:	b007      	add	sp, #28
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008964 <_localeconv_r>:
 8008964:	4800      	ldr	r0, [pc, #0]	; (8008968 <_localeconv_r+0x4>)
 8008966:	4770      	bx	lr
 8008968:	20000174 	.word	0x20000174

0800896c <malloc>:
 800896c:	4b02      	ldr	r3, [pc, #8]	; (8008978 <malloc+0xc>)
 800896e:	4601      	mov	r1, r0
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	f000 bd67 	b.w	8009444 <_malloc_r>
 8008976:	bf00      	nop
 8008978:	2000001c 	.word	0x2000001c

0800897c <__ascii_mbtowc>:
 800897c:	b082      	sub	sp, #8
 800897e:	b901      	cbnz	r1, 8008982 <__ascii_mbtowc+0x6>
 8008980:	a901      	add	r1, sp, #4
 8008982:	b142      	cbz	r2, 8008996 <__ascii_mbtowc+0x1a>
 8008984:	b14b      	cbz	r3, 800899a <__ascii_mbtowc+0x1e>
 8008986:	7813      	ldrb	r3, [r2, #0]
 8008988:	600b      	str	r3, [r1, #0]
 800898a:	7812      	ldrb	r2, [r2, #0]
 800898c:	1e10      	subs	r0, r2, #0
 800898e:	bf18      	it	ne
 8008990:	2001      	movne	r0, #1
 8008992:	b002      	add	sp, #8
 8008994:	4770      	bx	lr
 8008996:	4610      	mov	r0, r2
 8008998:	e7fb      	b.n	8008992 <__ascii_mbtowc+0x16>
 800899a:	f06f 0001 	mvn.w	r0, #1
 800899e:	e7f8      	b.n	8008992 <__ascii_mbtowc+0x16>

080089a0 <memcpy>:
 80089a0:	440a      	add	r2, r1
 80089a2:	4291      	cmp	r1, r2
 80089a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089a8:	d100      	bne.n	80089ac <memcpy+0xc>
 80089aa:	4770      	bx	lr
 80089ac:	b510      	push	{r4, lr}
 80089ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089b6:	4291      	cmp	r1, r2
 80089b8:	d1f9      	bne.n	80089ae <memcpy+0xe>
 80089ba:	bd10      	pop	{r4, pc}

080089bc <_Balloc>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089c0:	4604      	mov	r4, r0
 80089c2:	460d      	mov	r5, r1
 80089c4:	b976      	cbnz	r6, 80089e4 <_Balloc+0x28>
 80089c6:	2010      	movs	r0, #16
 80089c8:	f7ff ffd0 	bl	800896c <malloc>
 80089cc:	4602      	mov	r2, r0
 80089ce:	6260      	str	r0, [r4, #36]	; 0x24
 80089d0:	b920      	cbnz	r0, 80089dc <_Balloc+0x20>
 80089d2:	4b18      	ldr	r3, [pc, #96]	; (8008a34 <_Balloc+0x78>)
 80089d4:	4818      	ldr	r0, [pc, #96]	; (8008a38 <_Balloc+0x7c>)
 80089d6:	2166      	movs	r1, #102	; 0x66
 80089d8:	f000 ff40 	bl	800985c <__assert_func>
 80089dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089e0:	6006      	str	r6, [r0, #0]
 80089e2:	60c6      	str	r6, [r0, #12]
 80089e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089e6:	68f3      	ldr	r3, [r6, #12]
 80089e8:	b183      	cbz	r3, 8008a0c <_Balloc+0x50>
 80089ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089f2:	b9b8      	cbnz	r0, 8008a24 <_Balloc+0x68>
 80089f4:	2101      	movs	r1, #1
 80089f6:	fa01 f605 	lsl.w	r6, r1, r5
 80089fa:	1d72      	adds	r2, r6, #5
 80089fc:	0092      	lsls	r2, r2, #2
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 fc9d 	bl	800933e <_calloc_r>
 8008a04:	b160      	cbz	r0, 8008a20 <_Balloc+0x64>
 8008a06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a0a:	e00e      	b.n	8008a2a <_Balloc+0x6e>
 8008a0c:	2221      	movs	r2, #33	; 0x21
 8008a0e:	2104      	movs	r1, #4
 8008a10:	4620      	mov	r0, r4
 8008a12:	f000 fc94 	bl	800933e <_calloc_r>
 8008a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a18:	60f0      	str	r0, [r6, #12]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e4      	bne.n	80089ea <_Balloc+0x2e>
 8008a20:	2000      	movs	r0, #0
 8008a22:	bd70      	pop	{r4, r5, r6, pc}
 8008a24:	6802      	ldr	r2, [r0, #0]
 8008a26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a30:	e7f7      	b.n	8008a22 <_Balloc+0x66>
 8008a32:	bf00      	nop
 8008a34:	0800a64e 	.word	0x0800a64e
 8008a38:	0800a74c 	.word	0x0800a74c

08008a3c <_Bfree>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a40:	4605      	mov	r5, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	b976      	cbnz	r6, 8008a64 <_Bfree+0x28>
 8008a46:	2010      	movs	r0, #16
 8008a48:	f7ff ff90 	bl	800896c <malloc>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	6268      	str	r0, [r5, #36]	; 0x24
 8008a50:	b920      	cbnz	r0, 8008a5c <_Bfree+0x20>
 8008a52:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <_Bfree+0x3c>)
 8008a54:	4809      	ldr	r0, [pc, #36]	; (8008a7c <_Bfree+0x40>)
 8008a56:	218a      	movs	r1, #138	; 0x8a
 8008a58:	f000 ff00 	bl	800985c <__assert_func>
 8008a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a60:	6006      	str	r6, [r0, #0]
 8008a62:	60c6      	str	r6, [r0, #12]
 8008a64:	b13c      	cbz	r4, 8008a76 <_Bfree+0x3a>
 8008a66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a68:	6862      	ldr	r2, [r4, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a70:	6021      	str	r1, [r4, #0]
 8008a72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	0800a64e 	.word	0x0800a64e
 8008a7c:	0800a74c 	.word	0x0800a74c

08008a80 <__multadd>:
 8008a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a84:	690d      	ldr	r5, [r1, #16]
 8008a86:	4607      	mov	r7, r0
 8008a88:	460c      	mov	r4, r1
 8008a8a:	461e      	mov	r6, r3
 8008a8c:	f101 0c14 	add.w	ip, r1, #20
 8008a90:	2000      	movs	r0, #0
 8008a92:	f8dc 3000 	ldr.w	r3, [ip]
 8008a96:	b299      	uxth	r1, r3
 8008a98:	fb02 6101 	mla	r1, r2, r1, r6
 8008a9c:	0c1e      	lsrs	r6, r3, #16
 8008a9e:	0c0b      	lsrs	r3, r1, #16
 8008aa0:	fb02 3306 	mla	r3, r2, r6, r3
 8008aa4:	b289      	uxth	r1, r1
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008aac:	4285      	cmp	r5, r0
 8008aae:	f84c 1b04 	str.w	r1, [ip], #4
 8008ab2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ab6:	dcec      	bgt.n	8008a92 <__multadd+0x12>
 8008ab8:	b30e      	cbz	r6, 8008afe <__multadd+0x7e>
 8008aba:	68a3      	ldr	r3, [r4, #8]
 8008abc:	42ab      	cmp	r3, r5
 8008abe:	dc19      	bgt.n	8008af4 <__multadd+0x74>
 8008ac0:	6861      	ldr	r1, [r4, #4]
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	3101      	adds	r1, #1
 8008ac6:	f7ff ff79 	bl	80089bc <_Balloc>
 8008aca:	4680      	mov	r8, r0
 8008acc:	b928      	cbnz	r0, 8008ada <__multadd+0x5a>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <__multadd+0x84>)
 8008ad2:	480d      	ldr	r0, [pc, #52]	; (8008b08 <__multadd+0x88>)
 8008ad4:	21b5      	movs	r1, #181	; 0xb5
 8008ad6:	f000 fec1 	bl	800985c <__assert_func>
 8008ada:	6922      	ldr	r2, [r4, #16]
 8008adc:	3202      	adds	r2, #2
 8008ade:	f104 010c 	add.w	r1, r4, #12
 8008ae2:	0092      	lsls	r2, r2, #2
 8008ae4:	300c      	adds	r0, #12
 8008ae6:	f7ff ff5b 	bl	80089a0 <memcpy>
 8008aea:	4621      	mov	r1, r4
 8008aec:	4638      	mov	r0, r7
 8008aee:	f7ff ffa5 	bl	8008a3c <_Bfree>
 8008af2:	4644      	mov	r4, r8
 8008af4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008af8:	3501      	adds	r5, #1
 8008afa:	615e      	str	r6, [r3, #20]
 8008afc:	6125      	str	r5, [r4, #16]
 8008afe:	4620      	mov	r0, r4
 8008b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b04:	0800a6c0 	.word	0x0800a6c0
 8008b08:	0800a74c 	.word	0x0800a74c

08008b0c <__s2b>:
 8008b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b10:	460c      	mov	r4, r1
 8008b12:	4615      	mov	r5, r2
 8008b14:	461f      	mov	r7, r3
 8008b16:	2209      	movs	r2, #9
 8008b18:	3308      	adds	r3, #8
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b20:	2100      	movs	r1, #0
 8008b22:	2201      	movs	r2, #1
 8008b24:	429a      	cmp	r2, r3
 8008b26:	db09      	blt.n	8008b3c <__s2b+0x30>
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7ff ff47 	bl	80089bc <_Balloc>
 8008b2e:	b940      	cbnz	r0, 8008b42 <__s2b+0x36>
 8008b30:	4602      	mov	r2, r0
 8008b32:	4b19      	ldr	r3, [pc, #100]	; (8008b98 <__s2b+0x8c>)
 8008b34:	4819      	ldr	r0, [pc, #100]	; (8008b9c <__s2b+0x90>)
 8008b36:	21ce      	movs	r1, #206	; 0xce
 8008b38:	f000 fe90 	bl	800985c <__assert_func>
 8008b3c:	0052      	lsls	r2, r2, #1
 8008b3e:	3101      	adds	r1, #1
 8008b40:	e7f0      	b.n	8008b24 <__s2b+0x18>
 8008b42:	9b08      	ldr	r3, [sp, #32]
 8008b44:	6143      	str	r3, [r0, #20]
 8008b46:	2d09      	cmp	r5, #9
 8008b48:	f04f 0301 	mov.w	r3, #1
 8008b4c:	6103      	str	r3, [r0, #16]
 8008b4e:	dd16      	ble.n	8008b7e <__s2b+0x72>
 8008b50:	f104 0909 	add.w	r9, r4, #9
 8008b54:	46c8      	mov	r8, r9
 8008b56:	442c      	add	r4, r5
 8008b58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b5c:	4601      	mov	r1, r0
 8008b5e:	3b30      	subs	r3, #48	; 0x30
 8008b60:	220a      	movs	r2, #10
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7ff ff8c 	bl	8008a80 <__multadd>
 8008b68:	45a0      	cmp	r8, r4
 8008b6a:	d1f5      	bne.n	8008b58 <__s2b+0x4c>
 8008b6c:	f1a5 0408 	sub.w	r4, r5, #8
 8008b70:	444c      	add	r4, r9
 8008b72:	1b2d      	subs	r5, r5, r4
 8008b74:	1963      	adds	r3, r4, r5
 8008b76:	42bb      	cmp	r3, r7
 8008b78:	db04      	blt.n	8008b84 <__s2b+0x78>
 8008b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7e:	340a      	adds	r4, #10
 8008b80:	2509      	movs	r5, #9
 8008b82:	e7f6      	b.n	8008b72 <__s2b+0x66>
 8008b84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b88:	4601      	mov	r1, r0
 8008b8a:	3b30      	subs	r3, #48	; 0x30
 8008b8c:	220a      	movs	r2, #10
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7ff ff76 	bl	8008a80 <__multadd>
 8008b94:	e7ee      	b.n	8008b74 <__s2b+0x68>
 8008b96:	bf00      	nop
 8008b98:	0800a6c0 	.word	0x0800a6c0
 8008b9c:	0800a74c 	.word	0x0800a74c

08008ba0 <__hi0bits>:
 8008ba0:	0c03      	lsrs	r3, r0, #16
 8008ba2:	041b      	lsls	r3, r3, #16
 8008ba4:	b9d3      	cbnz	r3, 8008bdc <__hi0bits+0x3c>
 8008ba6:	0400      	lsls	r0, r0, #16
 8008ba8:	2310      	movs	r3, #16
 8008baa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008bae:	bf04      	itt	eq
 8008bb0:	0200      	lsleq	r0, r0, #8
 8008bb2:	3308      	addeq	r3, #8
 8008bb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008bb8:	bf04      	itt	eq
 8008bba:	0100      	lsleq	r0, r0, #4
 8008bbc:	3304      	addeq	r3, #4
 8008bbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bc2:	bf04      	itt	eq
 8008bc4:	0080      	lsleq	r0, r0, #2
 8008bc6:	3302      	addeq	r3, #2
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	db05      	blt.n	8008bd8 <__hi0bits+0x38>
 8008bcc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008bd0:	f103 0301 	add.w	r3, r3, #1
 8008bd4:	bf08      	it	eq
 8008bd6:	2320      	moveq	r3, #32
 8008bd8:	4618      	mov	r0, r3
 8008bda:	4770      	bx	lr
 8008bdc:	2300      	movs	r3, #0
 8008bde:	e7e4      	b.n	8008baa <__hi0bits+0xa>

08008be0 <__lo0bits>:
 8008be0:	6803      	ldr	r3, [r0, #0]
 8008be2:	f013 0207 	ands.w	r2, r3, #7
 8008be6:	4601      	mov	r1, r0
 8008be8:	d00b      	beq.n	8008c02 <__lo0bits+0x22>
 8008bea:	07da      	lsls	r2, r3, #31
 8008bec:	d423      	bmi.n	8008c36 <__lo0bits+0x56>
 8008bee:	0798      	lsls	r0, r3, #30
 8008bf0:	bf49      	itett	mi
 8008bf2:	085b      	lsrmi	r3, r3, #1
 8008bf4:	089b      	lsrpl	r3, r3, #2
 8008bf6:	2001      	movmi	r0, #1
 8008bf8:	600b      	strmi	r3, [r1, #0]
 8008bfa:	bf5c      	itt	pl
 8008bfc:	600b      	strpl	r3, [r1, #0]
 8008bfe:	2002      	movpl	r0, #2
 8008c00:	4770      	bx	lr
 8008c02:	b298      	uxth	r0, r3
 8008c04:	b9a8      	cbnz	r0, 8008c32 <__lo0bits+0x52>
 8008c06:	0c1b      	lsrs	r3, r3, #16
 8008c08:	2010      	movs	r0, #16
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	b90a      	cbnz	r2, 8008c12 <__lo0bits+0x32>
 8008c0e:	3008      	adds	r0, #8
 8008c10:	0a1b      	lsrs	r3, r3, #8
 8008c12:	071a      	lsls	r2, r3, #28
 8008c14:	bf04      	itt	eq
 8008c16:	091b      	lsreq	r3, r3, #4
 8008c18:	3004      	addeq	r0, #4
 8008c1a:	079a      	lsls	r2, r3, #30
 8008c1c:	bf04      	itt	eq
 8008c1e:	089b      	lsreq	r3, r3, #2
 8008c20:	3002      	addeq	r0, #2
 8008c22:	07da      	lsls	r2, r3, #31
 8008c24:	d403      	bmi.n	8008c2e <__lo0bits+0x4e>
 8008c26:	085b      	lsrs	r3, r3, #1
 8008c28:	f100 0001 	add.w	r0, r0, #1
 8008c2c:	d005      	beq.n	8008c3a <__lo0bits+0x5a>
 8008c2e:	600b      	str	r3, [r1, #0]
 8008c30:	4770      	bx	lr
 8008c32:	4610      	mov	r0, r2
 8008c34:	e7e9      	b.n	8008c0a <__lo0bits+0x2a>
 8008c36:	2000      	movs	r0, #0
 8008c38:	4770      	bx	lr
 8008c3a:	2020      	movs	r0, #32
 8008c3c:	4770      	bx	lr
	...

08008c40 <__i2b>:
 8008c40:	b510      	push	{r4, lr}
 8008c42:	460c      	mov	r4, r1
 8008c44:	2101      	movs	r1, #1
 8008c46:	f7ff feb9 	bl	80089bc <_Balloc>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	b928      	cbnz	r0, 8008c5a <__i2b+0x1a>
 8008c4e:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <__i2b+0x24>)
 8008c50:	4805      	ldr	r0, [pc, #20]	; (8008c68 <__i2b+0x28>)
 8008c52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c56:	f000 fe01 	bl	800985c <__assert_func>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	6144      	str	r4, [r0, #20]
 8008c5e:	6103      	str	r3, [r0, #16]
 8008c60:	bd10      	pop	{r4, pc}
 8008c62:	bf00      	nop
 8008c64:	0800a6c0 	.word	0x0800a6c0
 8008c68:	0800a74c 	.word	0x0800a74c

08008c6c <__multiply>:
 8008c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c70:	4691      	mov	r9, r2
 8008c72:	690a      	ldr	r2, [r1, #16]
 8008c74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	bfb8      	it	lt
 8008c7c:	460b      	movlt	r3, r1
 8008c7e:	460c      	mov	r4, r1
 8008c80:	bfbc      	itt	lt
 8008c82:	464c      	movlt	r4, r9
 8008c84:	4699      	movlt	r9, r3
 8008c86:	6927      	ldr	r7, [r4, #16]
 8008c88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c8c:	68a3      	ldr	r3, [r4, #8]
 8008c8e:	6861      	ldr	r1, [r4, #4]
 8008c90:	eb07 060a 	add.w	r6, r7, sl
 8008c94:	42b3      	cmp	r3, r6
 8008c96:	b085      	sub	sp, #20
 8008c98:	bfb8      	it	lt
 8008c9a:	3101      	addlt	r1, #1
 8008c9c:	f7ff fe8e 	bl	80089bc <_Balloc>
 8008ca0:	b930      	cbnz	r0, 8008cb0 <__multiply+0x44>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4b44      	ldr	r3, [pc, #272]	; (8008db8 <__multiply+0x14c>)
 8008ca6:	4845      	ldr	r0, [pc, #276]	; (8008dbc <__multiply+0x150>)
 8008ca8:	f240 115d 	movw	r1, #349	; 0x15d
 8008cac:	f000 fdd6 	bl	800985c <__assert_func>
 8008cb0:	f100 0514 	add.w	r5, r0, #20
 8008cb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008cb8:	462b      	mov	r3, r5
 8008cba:	2200      	movs	r2, #0
 8008cbc:	4543      	cmp	r3, r8
 8008cbe:	d321      	bcc.n	8008d04 <__multiply+0x98>
 8008cc0:	f104 0314 	add.w	r3, r4, #20
 8008cc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008cc8:	f109 0314 	add.w	r3, r9, #20
 8008ccc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008cd0:	9202      	str	r2, [sp, #8]
 8008cd2:	1b3a      	subs	r2, r7, r4
 8008cd4:	3a15      	subs	r2, #21
 8008cd6:	f022 0203 	bic.w	r2, r2, #3
 8008cda:	3204      	adds	r2, #4
 8008cdc:	f104 0115 	add.w	r1, r4, #21
 8008ce0:	428f      	cmp	r7, r1
 8008ce2:	bf38      	it	cc
 8008ce4:	2204      	movcc	r2, #4
 8008ce6:	9201      	str	r2, [sp, #4]
 8008ce8:	9a02      	ldr	r2, [sp, #8]
 8008cea:	9303      	str	r3, [sp, #12]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d80c      	bhi.n	8008d0a <__multiply+0x9e>
 8008cf0:	2e00      	cmp	r6, #0
 8008cf2:	dd03      	ble.n	8008cfc <__multiply+0x90>
 8008cf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d05a      	beq.n	8008db2 <__multiply+0x146>
 8008cfc:	6106      	str	r6, [r0, #16]
 8008cfe:	b005      	add	sp, #20
 8008d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d04:	f843 2b04 	str.w	r2, [r3], #4
 8008d08:	e7d8      	b.n	8008cbc <__multiply+0x50>
 8008d0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d0e:	f1ba 0f00 	cmp.w	sl, #0
 8008d12:	d024      	beq.n	8008d5e <__multiply+0xf2>
 8008d14:	f104 0e14 	add.w	lr, r4, #20
 8008d18:	46a9      	mov	r9, r5
 8008d1a:	f04f 0c00 	mov.w	ip, #0
 8008d1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d22:	f8d9 1000 	ldr.w	r1, [r9]
 8008d26:	fa1f fb82 	uxth.w	fp, r2
 8008d2a:	b289      	uxth	r1, r1
 8008d2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008d34:	f8d9 2000 	ldr.w	r2, [r9]
 8008d38:	4461      	add	r1, ip
 8008d3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d46:	b289      	uxth	r1, r1
 8008d48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d4c:	4577      	cmp	r7, lr
 8008d4e:	f849 1b04 	str.w	r1, [r9], #4
 8008d52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d56:	d8e2      	bhi.n	8008d1e <__multiply+0xb2>
 8008d58:	9a01      	ldr	r2, [sp, #4]
 8008d5a:	f845 c002 	str.w	ip, [r5, r2]
 8008d5e:	9a03      	ldr	r2, [sp, #12]
 8008d60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d64:	3304      	adds	r3, #4
 8008d66:	f1b9 0f00 	cmp.w	r9, #0
 8008d6a:	d020      	beq.n	8008dae <__multiply+0x142>
 8008d6c:	6829      	ldr	r1, [r5, #0]
 8008d6e:	f104 0c14 	add.w	ip, r4, #20
 8008d72:	46ae      	mov	lr, r5
 8008d74:	f04f 0a00 	mov.w	sl, #0
 8008d78:	f8bc b000 	ldrh.w	fp, [ip]
 8008d7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d80:	fb09 220b 	mla	r2, r9, fp, r2
 8008d84:	4492      	add	sl, r2
 8008d86:	b289      	uxth	r1, r1
 8008d88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008d8c:	f84e 1b04 	str.w	r1, [lr], #4
 8008d90:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d94:	f8be 1000 	ldrh.w	r1, [lr]
 8008d98:	0c12      	lsrs	r2, r2, #16
 8008d9a:	fb09 1102 	mla	r1, r9, r2, r1
 8008d9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008da2:	4567      	cmp	r7, ip
 8008da4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008da8:	d8e6      	bhi.n	8008d78 <__multiply+0x10c>
 8008daa:	9a01      	ldr	r2, [sp, #4]
 8008dac:	50a9      	str	r1, [r5, r2]
 8008dae:	3504      	adds	r5, #4
 8008db0:	e79a      	b.n	8008ce8 <__multiply+0x7c>
 8008db2:	3e01      	subs	r6, #1
 8008db4:	e79c      	b.n	8008cf0 <__multiply+0x84>
 8008db6:	bf00      	nop
 8008db8:	0800a6c0 	.word	0x0800a6c0
 8008dbc:	0800a74c 	.word	0x0800a74c

08008dc0 <__pow5mult>:
 8008dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc4:	4615      	mov	r5, r2
 8008dc6:	f012 0203 	ands.w	r2, r2, #3
 8008dca:	4606      	mov	r6, r0
 8008dcc:	460f      	mov	r7, r1
 8008dce:	d007      	beq.n	8008de0 <__pow5mult+0x20>
 8008dd0:	4c25      	ldr	r4, [pc, #148]	; (8008e68 <__pow5mult+0xa8>)
 8008dd2:	3a01      	subs	r2, #1
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dda:	f7ff fe51 	bl	8008a80 <__multadd>
 8008dde:	4607      	mov	r7, r0
 8008de0:	10ad      	asrs	r5, r5, #2
 8008de2:	d03d      	beq.n	8008e60 <__pow5mult+0xa0>
 8008de4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008de6:	b97c      	cbnz	r4, 8008e08 <__pow5mult+0x48>
 8008de8:	2010      	movs	r0, #16
 8008dea:	f7ff fdbf 	bl	800896c <malloc>
 8008dee:	4602      	mov	r2, r0
 8008df0:	6270      	str	r0, [r6, #36]	; 0x24
 8008df2:	b928      	cbnz	r0, 8008e00 <__pow5mult+0x40>
 8008df4:	4b1d      	ldr	r3, [pc, #116]	; (8008e6c <__pow5mult+0xac>)
 8008df6:	481e      	ldr	r0, [pc, #120]	; (8008e70 <__pow5mult+0xb0>)
 8008df8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008dfc:	f000 fd2e 	bl	800985c <__assert_func>
 8008e00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e04:	6004      	str	r4, [r0, #0]
 8008e06:	60c4      	str	r4, [r0, #12]
 8008e08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e10:	b94c      	cbnz	r4, 8008e26 <__pow5mult+0x66>
 8008e12:	f240 2171 	movw	r1, #625	; 0x271
 8008e16:	4630      	mov	r0, r6
 8008e18:	f7ff ff12 	bl	8008c40 <__i2b>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e22:	4604      	mov	r4, r0
 8008e24:	6003      	str	r3, [r0, #0]
 8008e26:	f04f 0900 	mov.w	r9, #0
 8008e2a:	07eb      	lsls	r3, r5, #31
 8008e2c:	d50a      	bpl.n	8008e44 <__pow5mult+0x84>
 8008e2e:	4639      	mov	r1, r7
 8008e30:	4622      	mov	r2, r4
 8008e32:	4630      	mov	r0, r6
 8008e34:	f7ff ff1a 	bl	8008c6c <__multiply>
 8008e38:	4639      	mov	r1, r7
 8008e3a:	4680      	mov	r8, r0
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f7ff fdfd 	bl	8008a3c <_Bfree>
 8008e42:	4647      	mov	r7, r8
 8008e44:	106d      	asrs	r5, r5, #1
 8008e46:	d00b      	beq.n	8008e60 <__pow5mult+0xa0>
 8008e48:	6820      	ldr	r0, [r4, #0]
 8008e4a:	b938      	cbnz	r0, 8008e5c <__pow5mult+0x9c>
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7ff ff0b 	bl	8008c6c <__multiply>
 8008e56:	6020      	str	r0, [r4, #0]
 8008e58:	f8c0 9000 	str.w	r9, [r0]
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	e7e4      	b.n	8008e2a <__pow5mult+0x6a>
 8008e60:	4638      	mov	r0, r7
 8008e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e66:	bf00      	nop
 8008e68:	0800a898 	.word	0x0800a898
 8008e6c:	0800a64e 	.word	0x0800a64e
 8008e70:	0800a74c 	.word	0x0800a74c

08008e74 <__lshift>:
 8008e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e78:	460c      	mov	r4, r1
 8008e7a:	6849      	ldr	r1, [r1, #4]
 8008e7c:	6923      	ldr	r3, [r4, #16]
 8008e7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e82:	68a3      	ldr	r3, [r4, #8]
 8008e84:	4607      	mov	r7, r0
 8008e86:	4691      	mov	r9, r2
 8008e88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e8c:	f108 0601 	add.w	r6, r8, #1
 8008e90:	42b3      	cmp	r3, r6
 8008e92:	db0b      	blt.n	8008eac <__lshift+0x38>
 8008e94:	4638      	mov	r0, r7
 8008e96:	f7ff fd91 	bl	80089bc <_Balloc>
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	b948      	cbnz	r0, 8008eb2 <__lshift+0x3e>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	4b2a      	ldr	r3, [pc, #168]	; (8008f4c <__lshift+0xd8>)
 8008ea2:	482b      	ldr	r0, [pc, #172]	; (8008f50 <__lshift+0xdc>)
 8008ea4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ea8:	f000 fcd8 	bl	800985c <__assert_func>
 8008eac:	3101      	adds	r1, #1
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	e7ee      	b.n	8008e90 <__lshift+0x1c>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f100 0114 	add.w	r1, r0, #20
 8008eb8:	f100 0210 	add.w	r2, r0, #16
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	4553      	cmp	r3, sl
 8008ec0:	db37      	blt.n	8008f32 <__lshift+0xbe>
 8008ec2:	6920      	ldr	r0, [r4, #16]
 8008ec4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ec8:	f104 0314 	add.w	r3, r4, #20
 8008ecc:	f019 091f 	ands.w	r9, r9, #31
 8008ed0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ed4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ed8:	d02f      	beq.n	8008f3a <__lshift+0xc6>
 8008eda:	f1c9 0e20 	rsb	lr, r9, #32
 8008ede:	468a      	mov	sl, r1
 8008ee0:	f04f 0c00 	mov.w	ip, #0
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	fa02 f209 	lsl.w	r2, r2, r9
 8008eea:	ea42 020c 	orr.w	r2, r2, ip
 8008eee:	f84a 2b04 	str.w	r2, [sl], #4
 8008ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef6:	4298      	cmp	r0, r3
 8008ef8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008efc:	d8f2      	bhi.n	8008ee4 <__lshift+0x70>
 8008efe:	1b03      	subs	r3, r0, r4
 8008f00:	3b15      	subs	r3, #21
 8008f02:	f023 0303 	bic.w	r3, r3, #3
 8008f06:	3304      	adds	r3, #4
 8008f08:	f104 0215 	add.w	r2, r4, #21
 8008f0c:	4290      	cmp	r0, r2
 8008f0e:	bf38      	it	cc
 8008f10:	2304      	movcc	r3, #4
 8008f12:	f841 c003 	str.w	ip, [r1, r3]
 8008f16:	f1bc 0f00 	cmp.w	ip, #0
 8008f1a:	d001      	beq.n	8008f20 <__lshift+0xac>
 8008f1c:	f108 0602 	add.w	r6, r8, #2
 8008f20:	3e01      	subs	r6, #1
 8008f22:	4638      	mov	r0, r7
 8008f24:	612e      	str	r6, [r5, #16]
 8008f26:	4621      	mov	r1, r4
 8008f28:	f7ff fd88 	bl	8008a3c <_Bfree>
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f32:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f36:	3301      	adds	r3, #1
 8008f38:	e7c1      	b.n	8008ebe <__lshift+0x4a>
 8008f3a:	3904      	subs	r1, #4
 8008f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f40:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f44:	4298      	cmp	r0, r3
 8008f46:	d8f9      	bhi.n	8008f3c <__lshift+0xc8>
 8008f48:	e7ea      	b.n	8008f20 <__lshift+0xac>
 8008f4a:	bf00      	nop
 8008f4c:	0800a6c0 	.word	0x0800a6c0
 8008f50:	0800a74c 	.word	0x0800a74c

08008f54 <__mcmp>:
 8008f54:	b530      	push	{r4, r5, lr}
 8008f56:	6902      	ldr	r2, [r0, #16]
 8008f58:	690c      	ldr	r4, [r1, #16]
 8008f5a:	1b12      	subs	r2, r2, r4
 8008f5c:	d10e      	bne.n	8008f7c <__mcmp+0x28>
 8008f5e:	f100 0314 	add.w	r3, r0, #20
 8008f62:	3114      	adds	r1, #20
 8008f64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f74:	42a5      	cmp	r5, r4
 8008f76:	d003      	beq.n	8008f80 <__mcmp+0x2c>
 8008f78:	d305      	bcc.n	8008f86 <__mcmp+0x32>
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	bd30      	pop	{r4, r5, pc}
 8008f80:	4283      	cmp	r3, r0
 8008f82:	d3f3      	bcc.n	8008f6c <__mcmp+0x18>
 8008f84:	e7fa      	b.n	8008f7c <__mcmp+0x28>
 8008f86:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8a:	e7f7      	b.n	8008f7c <__mcmp+0x28>

08008f8c <__mdiff>:
 8008f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	460c      	mov	r4, r1
 8008f92:	4606      	mov	r6, r0
 8008f94:	4611      	mov	r1, r2
 8008f96:	4620      	mov	r0, r4
 8008f98:	4690      	mov	r8, r2
 8008f9a:	f7ff ffdb 	bl	8008f54 <__mcmp>
 8008f9e:	1e05      	subs	r5, r0, #0
 8008fa0:	d110      	bne.n	8008fc4 <__mdiff+0x38>
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f7ff fd09 	bl	80089bc <_Balloc>
 8008faa:	b930      	cbnz	r0, 8008fba <__mdiff+0x2e>
 8008fac:	4b3a      	ldr	r3, [pc, #232]	; (8009098 <__mdiff+0x10c>)
 8008fae:	4602      	mov	r2, r0
 8008fb0:	f240 2132 	movw	r1, #562	; 0x232
 8008fb4:	4839      	ldr	r0, [pc, #228]	; (800909c <__mdiff+0x110>)
 8008fb6:	f000 fc51 	bl	800985c <__assert_func>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc4:	bfa4      	itt	ge
 8008fc6:	4643      	movge	r3, r8
 8008fc8:	46a0      	movge	r8, r4
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008fd0:	bfa6      	itte	ge
 8008fd2:	461c      	movge	r4, r3
 8008fd4:	2500      	movge	r5, #0
 8008fd6:	2501      	movlt	r5, #1
 8008fd8:	f7ff fcf0 	bl	80089bc <_Balloc>
 8008fdc:	b920      	cbnz	r0, 8008fe8 <__mdiff+0x5c>
 8008fde:	4b2e      	ldr	r3, [pc, #184]	; (8009098 <__mdiff+0x10c>)
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008fe6:	e7e5      	b.n	8008fb4 <__mdiff+0x28>
 8008fe8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008fec:	6926      	ldr	r6, [r4, #16]
 8008fee:	60c5      	str	r5, [r0, #12]
 8008ff0:	f104 0914 	add.w	r9, r4, #20
 8008ff4:	f108 0514 	add.w	r5, r8, #20
 8008ff8:	f100 0e14 	add.w	lr, r0, #20
 8008ffc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009000:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009004:	f108 0210 	add.w	r2, r8, #16
 8009008:	46f2      	mov	sl, lr
 800900a:	2100      	movs	r1, #0
 800900c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009010:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009014:	fa1f f883 	uxth.w	r8, r3
 8009018:	fa11 f18b 	uxtah	r1, r1, fp
 800901c:	0c1b      	lsrs	r3, r3, #16
 800901e:	eba1 0808 	sub.w	r8, r1, r8
 8009022:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009026:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800902a:	fa1f f888 	uxth.w	r8, r8
 800902e:	1419      	asrs	r1, r3, #16
 8009030:	454e      	cmp	r6, r9
 8009032:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009036:	f84a 3b04 	str.w	r3, [sl], #4
 800903a:	d8e7      	bhi.n	800900c <__mdiff+0x80>
 800903c:	1b33      	subs	r3, r6, r4
 800903e:	3b15      	subs	r3, #21
 8009040:	f023 0303 	bic.w	r3, r3, #3
 8009044:	3304      	adds	r3, #4
 8009046:	3415      	adds	r4, #21
 8009048:	42a6      	cmp	r6, r4
 800904a:	bf38      	it	cc
 800904c:	2304      	movcc	r3, #4
 800904e:	441d      	add	r5, r3
 8009050:	4473      	add	r3, lr
 8009052:	469e      	mov	lr, r3
 8009054:	462e      	mov	r6, r5
 8009056:	4566      	cmp	r6, ip
 8009058:	d30e      	bcc.n	8009078 <__mdiff+0xec>
 800905a:	f10c 0203 	add.w	r2, ip, #3
 800905e:	1b52      	subs	r2, r2, r5
 8009060:	f022 0203 	bic.w	r2, r2, #3
 8009064:	3d03      	subs	r5, #3
 8009066:	45ac      	cmp	ip, r5
 8009068:	bf38      	it	cc
 800906a:	2200      	movcc	r2, #0
 800906c:	441a      	add	r2, r3
 800906e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009072:	b17b      	cbz	r3, 8009094 <__mdiff+0x108>
 8009074:	6107      	str	r7, [r0, #16]
 8009076:	e7a3      	b.n	8008fc0 <__mdiff+0x34>
 8009078:	f856 8b04 	ldr.w	r8, [r6], #4
 800907c:	fa11 f288 	uxtah	r2, r1, r8
 8009080:	1414      	asrs	r4, r2, #16
 8009082:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009086:	b292      	uxth	r2, r2
 8009088:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800908c:	f84e 2b04 	str.w	r2, [lr], #4
 8009090:	1421      	asrs	r1, r4, #16
 8009092:	e7e0      	b.n	8009056 <__mdiff+0xca>
 8009094:	3f01      	subs	r7, #1
 8009096:	e7ea      	b.n	800906e <__mdiff+0xe2>
 8009098:	0800a6c0 	.word	0x0800a6c0
 800909c:	0800a74c 	.word	0x0800a74c

080090a0 <__ulp>:
 80090a0:	b082      	sub	sp, #8
 80090a2:	ed8d 0b00 	vstr	d0, [sp]
 80090a6:	9b01      	ldr	r3, [sp, #4]
 80090a8:	4912      	ldr	r1, [pc, #72]	; (80090f4 <__ulp+0x54>)
 80090aa:	4019      	ands	r1, r3
 80090ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80090b0:	2900      	cmp	r1, #0
 80090b2:	dd05      	ble.n	80090c0 <__ulp+0x20>
 80090b4:	2200      	movs	r2, #0
 80090b6:	460b      	mov	r3, r1
 80090b8:	ec43 2b10 	vmov	d0, r2, r3
 80090bc:	b002      	add	sp, #8
 80090be:	4770      	bx	lr
 80090c0:	4249      	negs	r1, r1
 80090c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80090c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80090ca:	f04f 0200 	mov.w	r2, #0
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	da04      	bge.n	80090de <__ulp+0x3e>
 80090d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80090d8:	fa41 f300 	asr.w	r3, r1, r0
 80090dc:	e7ec      	b.n	80090b8 <__ulp+0x18>
 80090de:	f1a0 0114 	sub.w	r1, r0, #20
 80090e2:	291e      	cmp	r1, #30
 80090e4:	bfda      	itte	le
 80090e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80090ea:	fa20 f101 	lsrle.w	r1, r0, r1
 80090ee:	2101      	movgt	r1, #1
 80090f0:	460a      	mov	r2, r1
 80090f2:	e7e1      	b.n	80090b8 <__ulp+0x18>
 80090f4:	7ff00000 	.word	0x7ff00000

080090f8 <__b2d>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	6905      	ldr	r5, [r0, #16]
 80090fc:	f100 0714 	add.w	r7, r0, #20
 8009100:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009104:	1f2e      	subs	r6, r5, #4
 8009106:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800910a:	4620      	mov	r0, r4
 800910c:	f7ff fd48 	bl	8008ba0 <__hi0bits>
 8009110:	f1c0 0320 	rsb	r3, r0, #32
 8009114:	280a      	cmp	r0, #10
 8009116:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009194 <__b2d+0x9c>
 800911a:	600b      	str	r3, [r1, #0]
 800911c:	dc14      	bgt.n	8009148 <__b2d+0x50>
 800911e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009122:	fa24 f10e 	lsr.w	r1, r4, lr
 8009126:	42b7      	cmp	r7, r6
 8009128:	ea41 030c 	orr.w	r3, r1, ip
 800912c:	bf34      	ite	cc
 800912e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009132:	2100      	movcs	r1, #0
 8009134:	3015      	adds	r0, #21
 8009136:	fa04 f000 	lsl.w	r0, r4, r0
 800913a:	fa21 f10e 	lsr.w	r1, r1, lr
 800913e:	ea40 0201 	orr.w	r2, r0, r1
 8009142:	ec43 2b10 	vmov	d0, r2, r3
 8009146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009148:	42b7      	cmp	r7, r6
 800914a:	bf3a      	itte	cc
 800914c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009150:	f1a5 0608 	subcc.w	r6, r5, #8
 8009154:	2100      	movcs	r1, #0
 8009156:	380b      	subs	r0, #11
 8009158:	d017      	beq.n	800918a <__b2d+0x92>
 800915a:	f1c0 0c20 	rsb	ip, r0, #32
 800915e:	fa04 f500 	lsl.w	r5, r4, r0
 8009162:	42be      	cmp	r6, r7
 8009164:	fa21 f40c 	lsr.w	r4, r1, ip
 8009168:	ea45 0504 	orr.w	r5, r5, r4
 800916c:	bf8c      	ite	hi
 800916e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009172:	2400      	movls	r4, #0
 8009174:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009178:	fa01 f000 	lsl.w	r0, r1, r0
 800917c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009180:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009184:	ea40 0204 	orr.w	r2, r0, r4
 8009188:	e7db      	b.n	8009142 <__b2d+0x4a>
 800918a:	ea44 030c 	orr.w	r3, r4, ip
 800918e:	460a      	mov	r2, r1
 8009190:	e7d7      	b.n	8009142 <__b2d+0x4a>
 8009192:	bf00      	nop
 8009194:	3ff00000 	.word	0x3ff00000

08009198 <__d2b>:
 8009198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800919c:	4689      	mov	r9, r1
 800919e:	2101      	movs	r1, #1
 80091a0:	ec57 6b10 	vmov	r6, r7, d0
 80091a4:	4690      	mov	r8, r2
 80091a6:	f7ff fc09 	bl	80089bc <_Balloc>
 80091aa:	4604      	mov	r4, r0
 80091ac:	b930      	cbnz	r0, 80091bc <__d2b+0x24>
 80091ae:	4602      	mov	r2, r0
 80091b0:	4b25      	ldr	r3, [pc, #148]	; (8009248 <__d2b+0xb0>)
 80091b2:	4826      	ldr	r0, [pc, #152]	; (800924c <__d2b+0xb4>)
 80091b4:	f240 310a 	movw	r1, #778	; 0x30a
 80091b8:	f000 fb50 	bl	800985c <__assert_func>
 80091bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80091c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091c4:	bb35      	cbnz	r5, 8009214 <__d2b+0x7c>
 80091c6:	2e00      	cmp	r6, #0
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	d028      	beq.n	800921e <__d2b+0x86>
 80091cc:	4668      	mov	r0, sp
 80091ce:	9600      	str	r6, [sp, #0]
 80091d0:	f7ff fd06 	bl	8008be0 <__lo0bits>
 80091d4:	9900      	ldr	r1, [sp, #0]
 80091d6:	b300      	cbz	r0, 800921a <__d2b+0x82>
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	f1c0 0320 	rsb	r3, r0, #32
 80091de:	fa02 f303 	lsl.w	r3, r2, r3
 80091e2:	430b      	orrs	r3, r1
 80091e4:	40c2      	lsrs	r2, r0
 80091e6:	6163      	str	r3, [r4, #20]
 80091e8:	9201      	str	r2, [sp, #4]
 80091ea:	9b01      	ldr	r3, [sp, #4]
 80091ec:	61a3      	str	r3, [r4, #24]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bf14      	ite	ne
 80091f2:	2202      	movne	r2, #2
 80091f4:	2201      	moveq	r2, #1
 80091f6:	6122      	str	r2, [r4, #16]
 80091f8:	b1d5      	cbz	r5, 8009230 <__d2b+0x98>
 80091fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091fe:	4405      	add	r5, r0
 8009200:	f8c9 5000 	str.w	r5, [r9]
 8009204:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009208:	f8c8 0000 	str.w	r0, [r8]
 800920c:	4620      	mov	r0, r4
 800920e:	b003      	add	sp, #12
 8009210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009218:	e7d5      	b.n	80091c6 <__d2b+0x2e>
 800921a:	6161      	str	r1, [r4, #20]
 800921c:	e7e5      	b.n	80091ea <__d2b+0x52>
 800921e:	a801      	add	r0, sp, #4
 8009220:	f7ff fcde 	bl	8008be0 <__lo0bits>
 8009224:	9b01      	ldr	r3, [sp, #4]
 8009226:	6163      	str	r3, [r4, #20]
 8009228:	2201      	movs	r2, #1
 800922a:	6122      	str	r2, [r4, #16]
 800922c:	3020      	adds	r0, #32
 800922e:	e7e3      	b.n	80091f8 <__d2b+0x60>
 8009230:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009234:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009238:	f8c9 0000 	str.w	r0, [r9]
 800923c:	6918      	ldr	r0, [r3, #16]
 800923e:	f7ff fcaf 	bl	8008ba0 <__hi0bits>
 8009242:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009246:	e7df      	b.n	8009208 <__d2b+0x70>
 8009248:	0800a6c0 	.word	0x0800a6c0
 800924c:	0800a74c 	.word	0x0800a74c

08009250 <__ratio>:
 8009250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	4688      	mov	r8, r1
 8009256:	4669      	mov	r1, sp
 8009258:	4681      	mov	r9, r0
 800925a:	f7ff ff4d 	bl	80090f8 <__b2d>
 800925e:	a901      	add	r1, sp, #4
 8009260:	4640      	mov	r0, r8
 8009262:	ec55 4b10 	vmov	r4, r5, d0
 8009266:	f7ff ff47 	bl	80090f8 <__b2d>
 800926a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800926e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009272:	eba3 0c02 	sub.w	ip, r3, r2
 8009276:	e9dd 3200 	ldrd	r3, r2, [sp]
 800927a:	1a9b      	subs	r3, r3, r2
 800927c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009280:	ec51 0b10 	vmov	r0, r1, d0
 8009284:	2b00      	cmp	r3, #0
 8009286:	bfd6      	itet	le
 8009288:	460a      	movle	r2, r1
 800928a:	462a      	movgt	r2, r5
 800928c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009290:	468b      	mov	fp, r1
 8009292:	462f      	mov	r7, r5
 8009294:	bfd4      	ite	le
 8009296:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800929a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800929e:	4620      	mov	r0, r4
 80092a0:	ee10 2a10 	vmov	r2, s0
 80092a4:	465b      	mov	r3, fp
 80092a6:	4639      	mov	r1, r7
 80092a8:	f7f7 fad8 	bl	800085c <__aeabi_ddiv>
 80092ac:	ec41 0b10 	vmov	d0, r0, r1
 80092b0:	b003      	add	sp, #12
 80092b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092b6 <__copybits>:
 80092b6:	3901      	subs	r1, #1
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	1149      	asrs	r1, r1, #5
 80092bc:	6914      	ldr	r4, [r2, #16]
 80092be:	3101      	adds	r1, #1
 80092c0:	f102 0314 	add.w	r3, r2, #20
 80092c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80092c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092cc:	1f05      	subs	r5, r0, #4
 80092ce:	42a3      	cmp	r3, r4
 80092d0:	d30c      	bcc.n	80092ec <__copybits+0x36>
 80092d2:	1aa3      	subs	r3, r4, r2
 80092d4:	3b11      	subs	r3, #17
 80092d6:	f023 0303 	bic.w	r3, r3, #3
 80092da:	3211      	adds	r2, #17
 80092dc:	42a2      	cmp	r2, r4
 80092de:	bf88      	it	hi
 80092e0:	2300      	movhi	r3, #0
 80092e2:	4418      	add	r0, r3
 80092e4:	2300      	movs	r3, #0
 80092e6:	4288      	cmp	r0, r1
 80092e8:	d305      	bcc.n	80092f6 <__copybits+0x40>
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80092f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80092f4:	e7eb      	b.n	80092ce <__copybits+0x18>
 80092f6:	f840 3b04 	str.w	r3, [r0], #4
 80092fa:	e7f4      	b.n	80092e6 <__copybits+0x30>

080092fc <__any_on>:
 80092fc:	f100 0214 	add.w	r2, r0, #20
 8009300:	6900      	ldr	r0, [r0, #16]
 8009302:	114b      	asrs	r3, r1, #5
 8009304:	4298      	cmp	r0, r3
 8009306:	b510      	push	{r4, lr}
 8009308:	db11      	blt.n	800932e <__any_on+0x32>
 800930a:	dd0a      	ble.n	8009322 <__any_on+0x26>
 800930c:	f011 011f 	ands.w	r1, r1, #31
 8009310:	d007      	beq.n	8009322 <__any_on+0x26>
 8009312:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009316:	fa24 f001 	lsr.w	r0, r4, r1
 800931a:	fa00 f101 	lsl.w	r1, r0, r1
 800931e:	428c      	cmp	r4, r1
 8009320:	d10b      	bne.n	800933a <__any_on+0x3e>
 8009322:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009326:	4293      	cmp	r3, r2
 8009328:	d803      	bhi.n	8009332 <__any_on+0x36>
 800932a:	2000      	movs	r0, #0
 800932c:	bd10      	pop	{r4, pc}
 800932e:	4603      	mov	r3, r0
 8009330:	e7f7      	b.n	8009322 <__any_on+0x26>
 8009332:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009336:	2900      	cmp	r1, #0
 8009338:	d0f5      	beq.n	8009326 <__any_on+0x2a>
 800933a:	2001      	movs	r0, #1
 800933c:	e7f6      	b.n	800932c <__any_on+0x30>

0800933e <_calloc_r>:
 800933e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009340:	fba1 2402 	umull	r2, r4, r1, r2
 8009344:	b94c      	cbnz	r4, 800935a <_calloc_r+0x1c>
 8009346:	4611      	mov	r1, r2
 8009348:	9201      	str	r2, [sp, #4]
 800934a:	f000 f87b 	bl	8009444 <_malloc_r>
 800934e:	9a01      	ldr	r2, [sp, #4]
 8009350:	4605      	mov	r5, r0
 8009352:	b930      	cbnz	r0, 8009362 <_calloc_r+0x24>
 8009354:	4628      	mov	r0, r5
 8009356:	b003      	add	sp, #12
 8009358:	bd30      	pop	{r4, r5, pc}
 800935a:	220c      	movs	r2, #12
 800935c:	6002      	str	r2, [r0, #0]
 800935e:	2500      	movs	r5, #0
 8009360:	e7f8      	b.n	8009354 <_calloc_r+0x16>
 8009362:	4621      	mov	r1, r4
 8009364:	f7fc fbbe 	bl	8005ae4 <memset>
 8009368:	e7f4      	b.n	8009354 <_calloc_r+0x16>
	...

0800936c <_free_r>:
 800936c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800936e:	2900      	cmp	r1, #0
 8009370:	d044      	beq.n	80093fc <_free_r+0x90>
 8009372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009376:	9001      	str	r0, [sp, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f1a1 0404 	sub.w	r4, r1, #4
 800937e:	bfb8      	it	lt
 8009380:	18e4      	addlt	r4, r4, r3
 8009382:	f000 fab5 	bl	80098f0 <__malloc_lock>
 8009386:	4a1e      	ldr	r2, [pc, #120]	; (8009400 <_free_r+0x94>)
 8009388:	9801      	ldr	r0, [sp, #4]
 800938a:	6813      	ldr	r3, [r2, #0]
 800938c:	b933      	cbnz	r3, 800939c <_free_r+0x30>
 800938e:	6063      	str	r3, [r4, #4]
 8009390:	6014      	str	r4, [r2, #0]
 8009392:	b003      	add	sp, #12
 8009394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009398:	f000 bab0 	b.w	80098fc <__malloc_unlock>
 800939c:	42a3      	cmp	r3, r4
 800939e:	d908      	bls.n	80093b2 <_free_r+0x46>
 80093a0:	6825      	ldr	r5, [r4, #0]
 80093a2:	1961      	adds	r1, r4, r5
 80093a4:	428b      	cmp	r3, r1
 80093a6:	bf01      	itttt	eq
 80093a8:	6819      	ldreq	r1, [r3, #0]
 80093aa:	685b      	ldreq	r3, [r3, #4]
 80093ac:	1949      	addeq	r1, r1, r5
 80093ae:	6021      	streq	r1, [r4, #0]
 80093b0:	e7ed      	b.n	800938e <_free_r+0x22>
 80093b2:	461a      	mov	r2, r3
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	b10b      	cbz	r3, 80093bc <_free_r+0x50>
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	d9fa      	bls.n	80093b2 <_free_r+0x46>
 80093bc:	6811      	ldr	r1, [r2, #0]
 80093be:	1855      	adds	r5, r2, r1
 80093c0:	42a5      	cmp	r5, r4
 80093c2:	d10b      	bne.n	80093dc <_free_r+0x70>
 80093c4:	6824      	ldr	r4, [r4, #0]
 80093c6:	4421      	add	r1, r4
 80093c8:	1854      	adds	r4, r2, r1
 80093ca:	42a3      	cmp	r3, r4
 80093cc:	6011      	str	r1, [r2, #0]
 80093ce:	d1e0      	bne.n	8009392 <_free_r+0x26>
 80093d0:	681c      	ldr	r4, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	6053      	str	r3, [r2, #4]
 80093d6:	4421      	add	r1, r4
 80093d8:	6011      	str	r1, [r2, #0]
 80093da:	e7da      	b.n	8009392 <_free_r+0x26>
 80093dc:	d902      	bls.n	80093e4 <_free_r+0x78>
 80093de:	230c      	movs	r3, #12
 80093e0:	6003      	str	r3, [r0, #0]
 80093e2:	e7d6      	b.n	8009392 <_free_r+0x26>
 80093e4:	6825      	ldr	r5, [r4, #0]
 80093e6:	1961      	adds	r1, r4, r5
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf04      	itt	eq
 80093ec:	6819      	ldreq	r1, [r3, #0]
 80093ee:	685b      	ldreq	r3, [r3, #4]
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	bf04      	itt	eq
 80093f4:	1949      	addeq	r1, r1, r5
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	6054      	str	r4, [r2, #4]
 80093fa:	e7ca      	b.n	8009392 <_free_r+0x26>
 80093fc:	b003      	add	sp, #12
 80093fe:	bd30      	pop	{r4, r5, pc}
 8009400:	200003f8 	.word	0x200003f8

08009404 <sbrk_aligned>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	4e0e      	ldr	r6, [pc, #56]	; (8009440 <sbrk_aligned+0x3c>)
 8009408:	460c      	mov	r4, r1
 800940a:	6831      	ldr	r1, [r6, #0]
 800940c:	4605      	mov	r5, r0
 800940e:	b911      	cbnz	r1, 8009416 <sbrk_aligned+0x12>
 8009410:	f000 f9f2 	bl	80097f8 <_sbrk_r>
 8009414:	6030      	str	r0, [r6, #0]
 8009416:	4621      	mov	r1, r4
 8009418:	4628      	mov	r0, r5
 800941a:	f000 f9ed 	bl	80097f8 <_sbrk_r>
 800941e:	1c43      	adds	r3, r0, #1
 8009420:	d00a      	beq.n	8009438 <sbrk_aligned+0x34>
 8009422:	1cc4      	adds	r4, r0, #3
 8009424:	f024 0403 	bic.w	r4, r4, #3
 8009428:	42a0      	cmp	r0, r4
 800942a:	d007      	beq.n	800943c <sbrk_aligned+0x38>
 800942c:	1a21      	subs	r1, r4, r0
 800942e:	4628      	mov	r0, r5
 8009430:	f000 f9e2 	bl	80097f8 <_sbrk_r>
 8009434:	3001      	adds	r0, #1
 8009436:	d101      	bne.n	800943c <sbrk_aligned+0x38>
 8009438:	f04f 34ff 	mov.w	r4, #4294967295
 800943c:	4620      	mov	r0, r4
 800943e:	bd70      	pop	{r4, r5, r6, pc}
 8009440:	200003fc 	.word	0x200003fc

08009444 <_malloc_r>:
 8009444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009448:	1ccd      	adds	r5, r1, #3
 800944a:	f025 0503 	bic.w	r5, r5, #3
 800944e:	3508      	adds	r5, #8
 8009450:	2d0c      	cmp	r5, #12
 8009452:	bf38      	it	cc
 8009454:	250c      	movcc	r5, #12
 8009456:	2d00      	cmp	r5, #0
 8009458:	4607      	mov	r7, r0
 800945a:	db01      	blt.n	8009460 <_malloc_r+0x1c>
 800945c:	42a9      	cmp	r1, r5
 800945e:	d905      	bls.n	800946c <_malloc_r+0x28>
 8009460:	230c      	movs	r3, #12
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	2600      	movs	r6, #0
 8009466:	4630      	mov	r0, r6
 8009468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800946c:	4e2e      	ldr	r6, [pc, #184]	; (8009528 <_malloc_r+0xe4>)
 800946e:	f000 fa3f 	bl	80098f0 <__malloc_lock>
 8009472:	6833      	ldr	r3, [r6, #0]
 8009474:	461c      	mov	r4, r3
 8009476:	bb34      	cbnz	r4, 80094c6 <_malloc_r+0x82>
 8009478:	4629      	mov	r1, r5
 800947a:	4638      	mov	r0, r7
 800947c:	f7ff ffc2 	bl	8009404 <sbrk_aligned>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	4604      	mov	r4, r0
 8009484:	d14d      	bne.n	8009522 <_malloc_r+0xde>
 8009486:	6834      	ldr	r4, [r6, #0]
 8009488:	4626      	mov	r6, r4
 800948a:	2e00      	cmp	r6, #0
 800948c:	d140      	bne.n	8009510 <_malloc_r+0xcc>
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	4631      	mov	r1, r6
 8009492:	4638      	mov	r0, r7
 8009494:	eb04 0803 	add.w	r8, r4, r3
 8009498:	f000 f9ae 	bl	80097f8 <_sbrk_r>
 800949c:	4580      	cmp	r8, r0
 800949e:	d13a      	bne.n	8009516 <_malloc_r+0xd2>
 80094a0:	6821      	ldr	r1, [r4, #0]
 80094a2:	3503      	adds	r5, #3
 80094a4:	1a6d      	subs	r5, r5, r1
 80094a6:	f025 0503 	bic.w	r5, r5, #3
 80094aa:	3508      	adds	r5, #8
 80094ac:	2d0c      	cmp	r5, #12
 80094ae:	bf38      	it	cc
 80094b0:	250c      	movcc	r5, #12
 80094b2:	4629      	mov	r1, r5
 80094b4:	4638      	mov	r0, r7
 80094b6:	f7ff ffa5 	bl	8009404 <sbrk_aligned>
 80094ba:	3001      	adds	r0, #1
 80094bc:	d02b      	beq.n	8009516 <_malloc_r+0xd2>
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	442b      	add	r3, r5
 80094c2:	6023      	str	r3, [r4, #0]
 80094c4:	e00e      	b.n	80094e4 <_malloc_r+0xa0>
 80094c6:	6822      	ldr	r2, [r4, #0]
 80094c8:	1b52      	subs	r2, r2, r5
 80094ca:	d41e      	bmi.n	800950a <_malloc_r+0xc6>
 80094cc:	2a0b      	cmp	r2, #11
 80094ce:	d916      	bls.n	80094fe <_malloc_r+0xba>
 80094d0:	1961      	adds	r1, r4, r5
 80094d2:	42a3      	cmp	r3, r4
 80094d4:	6025      	str	r5, [r4, #0]
 80094d6:	bf18      	it	ne
 80094d8:	6059      	strne	r1, [r3, #4]
 80094da:	6863      	ldr	r3, [r4, #4]
 80094dc:	bf08      	it	eq
 80094de:	6031      	streq	r1, [r6, #0]
 80094e0:	5162      	str	r2, [r4, r5]
 80094e2:	604b      	str	r3, [r1, #4]
 80094e4:	4638      	mov	r0, r7
 80094e6:	f104 060b 	add.w	r6, r4, #11
 80094ea:	f000 fa07 	bl	80098fc <__malloc_unlock>
 80094ee:	f026 0607 	bic.w	r6, r6, #7
 80094f2:	1d23      	adds	r3, r4, #4
 80094f4:	1af2      	subs	r2, r6, r3
 80094f6:	d0b6      	beq.n	8009466 <_malloc_r+0x22>
 80094f8:	1b9b      	subs	r3, r3, r6
 80094fa:	50a3      	str	r3, [r4, r2]
 80094fc:	e7b3      	b.n	8009466 <_malloc_r+0x22>
 80094fe:	6862      	ldr	r2, [r4, #4]
 8009500:	42a3      	cmp	r3, r4
 8009502:	bf0c      	ite	eq
 8009504:	6032      	streq	r2, [r6, #0]
 8009506:	605a      	strne	r2, [r3, #4]
 8009508:	e7ec      	b.n	80094e4 <_malloc_r+0xa0>
 800950a:	4623      	mov	r3, r4
 800950c:	6864      	ldr	r4, [r4, #4]
 800950e:	e7b2      	b.n	8009476 <_malloc_r+0x32>
 8009510:	4634      	mov	r4, r6
 8009512:	6876      	ldr	r6, [r6, #4]
 8009514:	e7b9      	b.n	800948a <_malloc_r+0x46>
 8009516:	230c      	movs	r3, #12
 8009518:	603b      	str	r3, [r7, #0]
 800951a:	4638      	mov	r0, r7
 800951c:	f000 f9ee 	bl	80098fc <__malloc_unlock>
 8009520:	e7a1      	b.n	8009466 <_malloc_r+0x22>
 8009522:	6025      	str	r5, [r4, #0]
 8009524:	e7de      	b.n	80094e4 <_malloc_r+0xa0>
 8009526:	bf00      	nop
 8009528:	200003f8 	.word	0x200003f8

0800952c <__ssputs_r>:
 800952c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009530:	688e      	ldr	r6, [r1, #8]
 8009532:	429e      	cmp	r6, r3
 8009534:	4682      	mov	sl, r0
 8009536:	460c      	mov	r4, r1
 8009538:	4690      	mov	r8, r2
 800953a:	461f      	mov	r7, r3
 800953c:	d838      	bhi.n	80095b0 <__ssputs_r+0x84>
 800953e:	898a      	ldrh	r2, [r1, #12]
 8009540:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009544:	d032      	beq.n	80095ac <__ssputs_r+0x80>
 8009546:	6825      	ldr	r5, [r4, #0]
 8009548:	6909      	ldr	r1, [r1, #16]
 800954a:	eba5 0901 	sub.w	r9, r5, r1
 800954e:	6965      	ldr	r5, [r4, #20]
 8009550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009558:	3301      	adds	r3, #1
 800955a:	444b      	add	r3, r9
 800955c:	106d      	asrs	r5, r5, #1
 800955e:	429d      	cmp	r5, r3
 8009560:	bf38      	it	cc
 8009562:	461d      	movcc	r5, r3
 8009564:	0553      	lsls	r3, r2, #21
 8009566:	d531      	bpl.n	80095cc <__ssputs_r+0xa0>
 8009568:	4629      	mov	r1, r5
 800956a:	f7ff ff6b 	bl	8009444 <_malloc_r>
 800956e:	4606      	mov	r6, r0
 8009570:	b950      	cbnz	r0, 8009588 <__ssputs_r+0x5c>
 8009572:	230c      	movs	r3, #12
 8009574:	f8ca 3000 	str.w	r3, [sl]
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800957e:	81a3      	strh	r3, [r4, #12]
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009588:	6921      	ldr	r1, [r4, #16]
 800958a:	464a      	mov	r2, r9
 800958c:	f7ff fa08 	bl	80089a0 <memcpy>
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	6126      	str	r6, [r4, #16]
 800959e:	6165      	str	r5, [r4, #20]
 80095a0:	444e      	add	r6, r9
 80095a2:	eba5 0509 	sub.w	r5, r5, r9
 80095a6:	6026      	str	r6, [r4, #0]
 80095a8:	60a5      	str	r5, [r4, #8]
 80095aa:	463e      	mov	r6, r7
 80095ac:	42be      	cmp	r6, r7
 80095ae:	d900      	bls.n	80095b2 <__ssputs_r+0x86>
 80095b0:	463e      	mov	r6, r7
 80095b2:	6820      	ldr	r0, [r4, #0]
 80095b4:	4632      	mov	r2, r6
 80095b6:	4641      	mov	r1, r8
 80095b8:	f000 f980 	bl	80098bc <memmove>
 80095bc:	68a3      	ldr	r3, [r4, #8]
 80095be:	1b9b      	subs	r3, r3, r6
 80095c0:	60a3      	str	r3, [r4, #8]
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	4433      	add	r3, r6
 80095c6:	6023      	str	r3, [r4, #0]
 80095c8:	2000      	movs	r0, #0
 80095ca:	e7db      	b.n	8009584 <__ssputs_r+0x58>
 80095cc:	462a      	mov	r2, r5
 80095ce:	f000 f99b 	bl	8009908 <_realloc_r>
 80095d2:	4606      	mov	r6, r0
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d1e1      	bne.n	800959c <__ssputs_r+0x70>
 80095d8:	6921      	ldr	r1, [r4, #16]
 80095da:	4650      	mov	r0, sl
 80095dc:	f7ff fec6 	bl	800936c <_free_r>
 80095e0:	e7c7      	b.n	8009572 <__ssputs_r+0x46>
	...

080095e4 <_svfiprintf_r>:
 80095e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e8:	4698      	mov	r8, r3
 80095ea:	898b      	ldrh	r3, [r1, #12]
 80095ec:	061b      	lsls	r3, r3, #24
 80095ee:	b09d      	sub	sp, #116	; 0x74
 80095f0:	4607      	mov	r7, r0
 80095f2:	460d      	mov	r5, r1
 80095f4:	4614      	mov	r4, r2
 80095f6:	d50e      	bpl.n	8009616 <_svfiprintf_r+0x32>
 80095f8:	690b      	ldr	r3, [r1, #16]
 80095fa:	b963      	cbnz	r3, 8009616 <_svfiprintf_r+0x32>
 80095fc:	2140      	movs	r1, #64	; 0x40
 80095fe:	f7ff ff21 	bl	8009444 <_malloc_r>
 8009602:	6028      	str	r0, [r5, #0]
 8009604:	6128      	str	r0, [r5, #16]
 8009606:	b920      	cbnz	r0, 8009612 <_svfiprintf_r+0x2e>
 8009608:	230c      	movs	r3, #12
 800960a:	603b      	str	r3, [r7, #0]
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	e0d1      	b.n	80097b6 <_svfiprintf_r+0x1d2>
 8009612:	2340      	movs	r3, #64	; 0x40
 8009614:	616b      	str	r3, [r5, #20]
 8009616:	2300      	movs	r3, #0
 8009618:	9309      	str	r3, [sp, #36]	; 0x24
 800961a:	2320      	movs	r3, #32
 800961c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009620:	f8cd 800c 	str.w	r8, [sp, #12]
 8009624:	2330      	movs	r3, #48	; 0x30
 8009626:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097d0 <_svfiprintf_r+0x1ec>
 800962a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800962e:	f04f 0901 	mov.w	r9, #1
 8009632:	4623      	mov	r3, r4
 8009634:	469a      	mov	sl, r3
 8009636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800963a:	b10a      	cbz	r2, 8009640 <_svfiprintf_r+0x5c>
 800963c:	2a25      	cmp	r2, #37	; 0x25
 800963e:	d1f9      	bne.n	8009634 <_svfiprintf_r+0x50>
 8009640:	ebba 0b04 	subs.w	fp, sl, r4
 8009644:	d00b      	beq.n	800965e <_svfiprintf_r+0x7a>
 8009646:	465b      	mov	r3, fp
 8009648:	4622      	mov	r2, r4
 800964a:	4629      	mov	r1, r5
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff ff6d 	bl	800952c <__ssputs_r>
 8009652:	3001      	adds	r0, #1
 8009654:	f000 80aa 	beq.w	80097ac <_svfiprintf_r+0x1c8>
 8009658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800965a:	445a      	add	r2, fp
 800965c:	9209      	str	r2, [sp, #36]	; 0x24
 800965e:	f89a 3000 	ldrb.w	r3, [sl]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 80a2 	beq.w	80097ac <_svfiprintf_r+0x1c8>
 8009668:	2300      	movs	r3, #0
 800966a:	f04f 32ff 	mov.w	r2, #4294967295
 800966e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009672:	f10a 0a01 	add.w	sl, sl, #1
 8009676:	9304      	str	r3, [sp, #16]
 8009678:	9307      	str	r3, [sp, #28]
 800967a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800967e:	931a      	str	r3, [sp, #104]	; 0x68
 8009680:	4654      	mov	r4, sl
 8009682:	2205      	movs	r2, #5
 8009684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009688:	4851      	ldr	r0, [pc, #324]	; (80097d0 <_svfiprintf_r+0x1ec>)
 800968a:	f7f6 fdb1 	bl	80001f0 <memchr>
 800968e:	9a04      	ldr	r2, [sp, #16]
 8009690:	b9d8      	cbnz	r0, 80096ca <_svfiprintf_r+0xe6>
 8009692:	06d0      	lsls	r0, r2, #27
 8009694:	bf44      	itt	mi
 8009696:	2320      	movmi	r3, #32
 8009698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800969c:	0711      	lsls	r1, r2, #28
 800969e:	bf44      	itt	mi
 80096a0:	232b      	movmi	r3, #43	; 0x2b
 80096a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096a6:	f89a 3000 	ldrb.w	r3, [sl]
 80096aa:	2b2a      	cmp	r3, #42	; 0x2a
 80096ac:	d015      	beq.n	80096da <_svfiprintf_r+0xf6>
 80096ae:	9a07      	ldr	r2, [sp, #28]
 80096b0:	4654      	mov	r4, sl
 80096b2:	2000      	movs	r0, #0
 80096b4:	f04f 0c0a 	mov.w	ip, #10
 80096b8:	4621      	mov	r1, r4
 80096ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096be:	3b30      	subs	r3, #48	; 0x30
 80096c0:	2b09      	cmp	r3, #9
 80096c2:	d94e      	bls.n	8009762 <_svfiprintf_r+0x17e>
 80096c4:	b1b0      	cbz	r0, 80096f4 <_svfiprintf_r+0x110>
 80096c6:	9207      	str	r2, [sp, #28]
 80096c8:	e014      	b.n	80096f4 <_svfiprintf_r+0x110>
 80096ca:	eba0 0308 	sub.w	r3, r0, r8
 80096ce:	fa09 f303 	lsl.w	r3, r9, r3
 80096d2:	4313      	orrs	r3, r2
 80096d4:	9304      	str	r3, [sp, #16]
 80096d6:	46a2      	mov	sl, r4
 80096d8:	e7d2      	b.n	8009680 <_svfiprintf_r+0x9c>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	1d19      	adds	r1, r3, #4
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	9103      	str	r1, [sp, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bfbb      	ittet	lt
 80096e6:	425b      	neglt	r3, r3
 80096e8:	f042 0202 	orrlt.w	r2, r2, #2
 80096ec:	9307      	strge	r3, [sp, #28]
 80096ee:	9307      	strlt	r3, [sp, #28]
 80096f0:	bfb8      	it	lt
 80096f2:	9204      	strlt	r2, [sp, #16]
 80096f4:	7823      	ldrb	r3, [r4, #0]
 80096f6:	2b2e      	cmp	r3, #46	; 0x2e
 80096f8:	d10c      	bne.n	8009714 <_svfiprintf_r+0x130>
 80096fa:	7863      	ldrb	r3, [r4, #1]
 80096fc:	2b2a      	cmp	r3, #42	; 0x2a
 80096fe:	d135      	bne.n	800976c <_svfiprintf_r+0x188>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	1d1a      	adds	r2, r3, #4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	9203      	str	r2, [sp, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	bfb8      	it	lt
 800970c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009710:	3402      	adds	r4, #2
 8009712:	9305      	str	r3, [sp, #20]
 8009714:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097e0 <_svfiprintf_r+0x1fc>
 8009718:	7821      	ldrb	r1, [r4, #0]
 800971a:	2203      	movs	r2, #3
 800971c:	4650      	mov	r0, sl
 800971e:	f7f6 fd67 	bl	80001f0 <memchr>
 8009722:	b140      	cbz	r0, 8009736 <_svfiprintf_r+0x152>
 8009724:	2340      	movs	r3, #64	; 0x40
 8009726:	eba0 000a 	sub.w	r0, r0, sl
 800972a:	fa03 f000 	lsl.w	r0, r3, r0
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	4303      	orrs	r3, r0
 8009732:	3401      	adds	r4, #1
 8009734:	9304      	str	r3, [sp, #16]
 8009736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800973a:	4826      	ldr	r0, [pc, #152]	; (80097d4 <_svfiprintf_r+0x1f0>)
 800973c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009740:	2206      	movs	r2, #6
 8009742:	f7f6 fd55 	bl	80001f0 <memchr>
 8009746:	2800      	cmp	r0, #0
 8009748:	d038      	beq.n	80097bc <_svfiprintf_r+0x1d8>
 800974a:	4b23      	ldr	r3, [pc, #140]	; (80097d8 <_svfiprintf_r+0x1f4>)
 800974c:	bb1b      	cbnz	r3, 8009796 <_svfiprintf_r+0x1b2>
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	3307      	adds	r3, #7
 8009752:	f023 0307 	bic.w	r3, r3, #7
 8009756:	3308      	adds	r3, #8
 8009758:	9303      	str	r3, [sp, #12]
 800975a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800975c:	4433      	add	r3, r6
 800975e:	9309      	str	r3, [sp, #36]	; 0x24
 8009760:	e767      	b.n	8009632 <_svfiprintf_r+0x4e>
 8009762:	fb0c 3202 	mla	r2, ip, r2, r3
 8009766:	460c      	mov	r4, r1
 8009768:	2001      	movs	r0, #1
 800976a:	e7a5      	b.n	80096b8 <_svfiprintf_r+0xd4>
 800976c:	2300      	movs	r3, #0
 800976e:	3401      	adds	r4, #1
 8009770:	9305      	str	r3, [sp, #20]
 8009772:	4619      	mov	r1, r3
 8009774:	f04f 0c0a 	mov.w	ip, #10
 8009778:	4620      	mov	r0, r4
 800977a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800977e:	3a30      	subs	r2, #48	; 0x30
 8009780:	2a09      	cmp	r2, #9
 8009782:	d903      	bls.n	800978c <_svfiprintf_r+0x1a8>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d0c5      	beq.n	8009714 <_svfiprintf_r+0x130>
 8009788:	9105      	str	r1, [sp, #20]
 800978a:	e7c3      	b.n	8009714 <_svfiprintf_r+0x130>
 800978c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009790:	4604      	mov	r4, r0
 8009792:	2301      	movs	r3, #1
 8009794:	e7f0      	b.n	8009778 <_svfiprintf_r+0x194>
 8009796:	ab03      	add	r3, sp, #12
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	462a      	mov	r2, r5
 800979c:	4b0f      	ldr	r3, [pc, #60]	; (80097dc <_svfiprintf_r+0x1f8>)
 800979e:	a904      	add	r1, sp, #16
 80097a0:	4638      	mov	r0, r7
 80097a2:	f7fc fa47 	bl	8005c34 <_printf_float>
 80097a6:	1c42      	adds	r2, r0, #1
 80097a8:	4606      	mov	r6, r0
 80097aa:	d1d6      	bne.n	800975a <_svfiprintf_r+0x176>
 80097ac:	89ab      	ldrh	r3, [r5, #12]
 80097ae:	065b      	lsls	r3, r3, #25
 80097b0:	f53f af2c 	bmi.w	800960c <_svfiprintf_r+0x28>
 80097b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097b6:	b01d      	add	sp, #116	; 0x74
 80097b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097bc:	ab03      	add	r3, sp, #12
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	462a      	mov	r2, r5
 80097c2:	4b06      	ldr	r3, [pc, #24]	; (80097dc <_svfiprintf_r+0x1f8>)
 80097c4:	a904      	add	r1, sp, #16
 80097c6:	4638      	mov	r0, r7
 80097c8:	f7fc fcd8 	bl	800617c <_printf_i>
 80097cc:	e7eb      	b.n	80097a6 <_svfiprintf_r+0x1c2>
 80097ce:	bf00      	nop
 80097d0:	0800a8a4 	.word	0x0800a8a4
 80097d4:	0800a8ae 	.word	0x0800a8ae
 80097d8:	08005c35 	.word	0x08005c35
 80097dc:	0800952d 	.word	0x0800952d
 80097e0:	0800a8aa 	.word	0x0800a8aa
 80097e4:	00000000 	.word	0x00000000

080097e8 <nan>:
 80097e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80097f0 <nan+0x8>
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	00000000 	.word	0x00000000
 80097f4:	7ff80000 	.word	0x7ff80000

080097f8 <_sbrk_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d06      	ldr	r5, [pc, #24]	; (8009814 <_sbrk_r+0x1c>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4604      	mov	r4, r0
 8009800:	4608      	mov	r0, r1
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	f7f8 fc70 	bl	80020e8 <_sbrk>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_sbrk_r+0x1a>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_sbrk_r+0x1a>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	20000400 	.word	0x20000400

08009818 <strncmp>:
 8009818:	b510      	push	{r4, lr}
 800981a:	b17a      	cbz	r2, 800983c <strncmp+0x24>
 800981c:	4603      	mov	r3, r0
 800981e:	3901      	subs	r1, #1
 8009820:	1884      	adds	r4, r0, r2
 8009822:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009826:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800982a:	4290      	cmp	r0, r2
 800982c:	d101      	bne.n	8009832 <strncmp+0x1a>
 800982e:	42a3      	cmp	r3, r4
 8009830:	d101      	bne.n	8009836 <strncmp+0x1e>
 8009832:	1a80      	subs	r0, r0, r2
 8009834:	bd10      	pop	{r4, pc}
 8009836:	2800      	cmp	r0, #0
 8009838:	d1f3      	bne.n	8009822 <strncmp+0xa>
 800983a:	e7fa      	b.n	8009832 <strncmp+0x1a>
 800983c:	4610      	mov	r0, r2
 800983e:	e7f9      	b.n	8009834 <strncmp+0x1c>

08009840 <__ascii_wctomb>:
 8009840:	b149      	cbz	r1, 8009856 <__ascii_wctomb+0x16>
 8009842:	2aff      	cmp	r2, #255	; 0xff
 8009844:	bf85      	ittet	hi
 8009846:	238a      	movhi	r3, #138	; 0x8a
 8009848:	6003      	strhi	r3, [r0, #0]
 800984a:	700a      	strbls	r2, [r1, #0]
 800984c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009850:	bf98      	it	ls
 8009852:	2001      	movls	r0, #1
 8009854:	4770      	bx	lr
 8009856:	4608      	mov	r0, r1
 8009858:	4770      	bx	lr
	...

0800985c <__assert_func>:
 800985c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800985e:	4614      	mov	r4, r2
 8009860:	461a      	mov	r2, r3
 8009862:	4b09      	ldr	r3, [pc, #36]	; (8009888 <__assert_func+0x2c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4605      	mov	r5, r0
 8009868:	68d8      	ldr	r0, [r3, #12]
 800986a:	b14c      	cbz	r4, 8009880 <__assert_func+0x24>
 800986c:	4b07      	ldr	r3, [pc, #28]	; (800988c <__assert_func+0x30>)
 800986e:	9100      	str	r1, [sp, #0]
 8009870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009874:	4906      	ldr	r1, [pc, #24]	; (8009890 <__assert_func+0x34>)
 8009876:	462b      	mov	r3, r5
 8009878:	f000 f80e 	bl	8009898 <fiprintf>
 800987c:	f000 fa8c 	bl	8009d98 <abort>
 8009880:	4b04      	ldr	r3, [pc, #16]	; (8009894 <__assert_func+0x38>)
 8009882:	461c      	mov	r4, r3
 8009884:	e7f3      	b.n	800986e <__assert_func+0x12>
 8009886:	bf00      	nop
 8009888:	2000001c 	.word	0x2000001c
 800988c:	0800a8b5 	.word	0x0800a8b5
 8009890:	0800a8c2 	.word	0x0800a8c2
 8009894:	0800a8f0 	.word	0x0800a8f0

08009898 <fiprintf>:
 8009898:	b40e      	push	{r1, r2, r3}
 800989a:	b503      	push	{r0, r1, lr}
 800989c:	4601      	mov	r1, r0
 800989e:	ab03      	add	r3, sp, #12
 80098a0:	4805      	ldr	r0, [pc, #20]	; (80098b8 <fiprintf+0x20>)
 80098a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a6:	6800      	ldr	r0, [r0, #0]
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	f000 f885 	bl	80099b8 <_vfiprintf_r>
 80098ae:	b002      	add	sp, #8
 80098b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098b4:	b003      	add	sp, #12
 80098b6:	4770      	bx	lr
 80098b8:	2000001c 	.word	0x2000001c

080098bc <memmove>:
 80098bc:	4288      	cmp	r0, r1
 80098be:	b510      	push	{r4, lr}
 80098c0:	eb01 0402 	add.w	r4, r1, r2
 80098c4:	d902      	bls.n	80098cc <memmove+0x10>
 80098c6:	4284      	cmp	r4, r0
 80098c8:	4623      	mov	r3, r4
 80098ca:	d807      	bhi.n	80098dc <memmove+0x20>
 80098cc:	1e43      	subs	r3, r0, #1
 80098ce:	42a1      	cmp	r1, r4
 80098d0:	d008      	beq.n	80098e4 <memmove+0x28>
 80098d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098da:	e7f8      	b.n	80098ce <memmove+0x12>
 80098dc:	4402      	add	r2, r0
 80098de:	4601      	mov	r1, r0
 80098e0:	428a      	cmp	r2, r1
 80098e2:	d100      	bne.n	80098e6 <memmove+0x2a>
 80098e4:	bd10      	pop	{r4, pc}
 80098e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098ee:	e7f7      	b.n	80098e0 <memmove+0x24>

080098f0 <__malloc_lock>:
 80098f0:	4801      	ldr	r0, [pc, #4]	; (80098f8 <__malloc_lock+0x8>)
 80098f2:	f000 bc11 	b.w	800a118 <__retarget_lock_acquire_recursive>
 80098f6:	bf00      	nop
 80098f8:	20000404 	.word	0x20000404

080098fc <__malloc_unlock>:
 80098fc:	4801      	ldr	r0, [pc, #4]	; (8009904 <__malloc_unlock+0x8>)
 80098fe:	f000 bc0c 	b.w	800a11a <__retarget_lock_release_recursive>
 8009902:	bf00      	nop
 8009904:	20000404 	.word	0x20000404

08009908 <_realloc_r>:
 8009908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990c:	4680      	mov	r8, r0
 800990e:	4614      	mov	r4, r2
 8009910:	460e      	mov	r6, r1
 8009912:	b921      	cbnz	r1, 800991e <_realloc_r+0x16>
 8009914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009918:	4611      	mov	r1, r2
 800991a:	f7ff bd93 	b.w	8009444 <_malloc_r>
 800991e:	b92a      	cbnz	r2, 800992c <_realloc_r+0x24>
 8009920:	f7ff fd24 	bl	800936c <_free_r>
 8009924:	4625      	mov	r5, r4
 8009926:	4628      	mov	r0, r5
 8009928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800992c:	f000 fc5c 	bl	800a1e8 <_malloc_usable_size_r>
 8009930:	4284      	cmp	r4, r0
 8009932:	4607      	mov	r7, r0
 8009934:	d802      	bhi.n	800993c <_realloc_r+0x34>
 8009936:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800993a:	d812      	bhi.n	8009962 <_realloc_r+0x5a>
 800993c:	4621      	mov	r1, r4
 800993e:	4640      	mov	r0, r8
 8009940:	f7ff fd80 	bl	8009444 <_malloc_r>
 8009944:	4605      	mov	r5, r0
 8009946:	2800      	cmp	r0, #0
 8009948:	d0ed      	beq.n	8009926 <_realloc_r+0x1e>
 800994a:	42bc      	cmp	r4, r7
 800994c:	4622      	mov	r2, r4
 800994e:	4631      	mov	r1, r6
 8009950:	bf28      	it	cs
 8009952:	463a      	movcs	r2, r7
 8009954:	f7ff f824 	bl	80089a0 <memcpy>
 8009958:	4631      	mov	r1, r6
 800995a:	4640      	mov	r0, r8
 800995c:	f7ff fd06 	bl	800936c <_free_r>
 8009960:	e7e1      	b.n	8009926 <_realloc_r+0x1e>
 8009962:	4635      	mov	r5, r6
 8009964:	e7df      	b.n	8009926 <_realloc_r+0x1e>

08009966 <__sfputc_r>:
 8009966:	6893      	ldr	r3, [r2, #8]
 8009968:	3b01      	subs	r3, #1
 800996a:	2b00      	cmp	r3, #0
 800996c:	b410      	push	{r4}
 800996e:	6093      	str	r3, [r2, #8]
 8009970:	da08      	bge.n	8009984 <__sfputc_r+0x1e>
 8009972:	6994      	ldr	r4, [r2, #24]
 8009974:	42a3      	cmp	r3, r4
 8009976:	db01      	blt.n	800997c <__sfputc_r+0x16>
 8009978:	290a      	cmp	r1, #10
 800997a:	d103      	bne.n	8009984 <__sfputc_r+0x1e>
 800997c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009980:	f000 b94a 	b.w	8009c18 <__swbuf_r>
 8009984:	6813      	ldr	r3, [r2, #0]
 8009986:	1c58      	adds	r0, r3, #1
 8009988:	6010      	str	r0, [r2, #0]
 800998a:	7019      	strb	r1, [r3, #0]
 800998c:	4608      	mov	r0, r1
 800998e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009992:	4770      	bx	lr

08009994 <__sfputs_r>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	4606      	mov	r6, r0
 8009998:	460f      	mov	r7, r1
 800999a:	4614      	mov	r4, r2
 800999c:	18d5      	adds	r5, r2, r3
 800999e:	42ac      	cmp	r4, r5
 80099a0:	d101      	bne.n	80099a6 <__sfputs_r+0x12>
 80099a2:	2000      	movs	r0, #0
 80099a4:	e007      	b.n	80099b6 <__sfputs_r+0x22>
 80099a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099aa:	463a      	mov	r2, r7
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7ff ffda 	bl	8009966 <__sfputc_r>
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	d1f3      	bne.n	800999e <__sfputs_r+0xa>
 80099b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099b8 <_vfiprintf_r>:
 80099b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	460d      	mov	r5, r1
 80099be:	b09d      	sub	sp, #116	; 0x74
 80099c0:	4614      	mov	r4, r2
 80099c2:	4698      	mov	r8, r3
 80099c4:	4606      	mov	r6, r0
 80099c6:	b118      	cbz	r0, 80099d0 <_vfiprintf_r+0x18>
 80099c8:	6983      	ldr	r3, [r0, #24]
 80099ca:	b90b      	cbnz	r3, 80099d0 <_vfiprintf_r+0x18>
 80099cc:	f000 fb06 	bl	8009fdc <__sinit>
 80099d0:	4b89      	ldr	r3, [pc, #548]	; (8009bf8 <_vfiprintf_r+0x240>)
 80099d2:	429d      	cmp	r5, r3
 80099d4:	d11b      	bne.n	8009a0e <_vfiprintf_r+0x56>
 80099d6:	6875      	ldr	r5, [r6, #4]
 80099d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099da:	07d9      	lsls	r1, r3, #31
 80099dc:	d405      	bmi.n	80099ea <_vfiprintf_r+0x32>
 80099de:	89ab      	ldrh	r3, [r5, #12]
 80099e0:	059a      	lsls	r2, r3, #22
 80099e2:	d402      	bmi.n	80099ea <_vfiprintf_r+0x32>
 80099e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099e6:	f000 fb97 	bl	800a118 <__retarget_lock_acquire_recursive>
 80099ea:	89ab      	ldrh	r3, [r5, #12]
 80099ec:	071b      	lsls	r3, r3, #28
 80099ee:	d501      	bpl.n	80099f4 <_vfiprintf_r+0x3c>
 80099f0:	692b      	ldr	r3, [r5, #16]
 80099f2:	b9eb      	cbnz	r3, 8009a30 <_vfiprintf_r+0x78>
 80099f4:	4629      	mov	r1, r5
 80099f6:	4630      	mov	r0, r6
 80099f8:	f000 f960 	bl	8009cbc <__swsetup_r>
 80099fc:	b1c0      	cbz	r0, 8009a30 <_vfiprintf_r+0x78>
 80099fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a00:	07dc      	lsls	r4, r3, #31
 8009a02:	d50e      	bpl.n	8009a22 <_vfiprintf_r+0x6a>
 8009a04:	f04f 30ff 	mov.w	r0, #4294967295
 8009a08:	b01d      	add	sp, #116	; 0x74
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0e:	4b7b      	ldr	r3, [pc, #492]	; (8009bfc <_vfiprintf_r+0x244>)
 8009a10:	429d      	cmp	r5, r3
 8009a12:	d101      	bne.n	8009a18 <_vfiprintf_r+0x60>
 8009a14:	68b5      	ldr	r5, [r6, #8]
 8009a16:	e7df      	b.n	80099d8 <_vfiprintf_r+0x20>
 8009a18:	4b79      	ldr	r3, [pc, #484]	; (8009c00 <_vfiprintf_r+0x248>)
 8009a1a:	429d      	cmp	r5, r3
 8009a1c:	bf08      	it	eq
 8009a1e:	68f5      	ldreq	r5, [r6, #12]
 8009a20:	e7da      	b.n	80099d8 <_vfiprintf_r+0x20>
 8009a22:	89ab      	ldrh	r3, [r5, #12]
 8009a24:	0598      	lsls	r0, r3, #22
 8009a26:	d4ed      	bmi.n	8009a04 <_vfiprintf_r+0x4c>
 8009a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a2a:	f000 fb76 	bl	800a11a <__retarget_lock_release_recursive>
 8009a2e:	e7e9      	b.n	8009a04 <_vfiprintf_r+0x4c>
 8009a30:	2300      	movs	r3, #0
 8009a32:	9309      	str	r3, [sp, #36]	; 0x24
 8009a34:	2320      	movs	r3, #32
 8009a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a3e:	2330      	movs	r3, #48	; 0x30
 8009a40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c04 <_vfiprintf_r+0x24c>
 8009a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a48:	f04f 0901 	mov.w	r9, #1
 8009a4c:	4623      	mov	r3, r4
 8009a4e:	469a      	mov	sl, r3
 8009a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a54:	b10a      	cbz	r2, 8009a5a <_vfiprintf_r+0xa2>
 8009a56:	2a25      	cmp	r2, #37	; 0x25
 8009a58:	d1f9      	bne.n	8009a4e <_vfiprintf_r+0x96>
 8009a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8009a5e:	d00b      	beq.n	8009a78 <_vfiprintf_r+0xc0>
 8009a60:	465b      	mov	r3, fp
 8009a62:	4622      	mov	r2, r4
 8009a64:	4629      	mov	r1, r5
 8009a66:	4630      	mov	r0, r6
 8009a68:	f7ff ff94 	bl	8009994 <__sfputs_r>
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	f000 80aa 	beq.w	8009bc6 <_vfiprintf_r+0x20e>
 8009a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a74:	445a      	add	r2, fp
 8009a76:	9209      	str	r2, [sp, #36]	; 0x24
 8009a78:	f89a 3000 	ldrb.w	r3, [sl]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 80a2 	beq.w	8009bc6 <_vfiprintf_r+0x20e>
 8009a82:	2300      	movs	r3, #0
 8009a84:	f04f 32ff 	mov.w	r2, #4294967295
 8009a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a8c:	f10a 0a01 	add.w	sl, sl, #1
 8009a90:	9304      	str	r3, [sp, #16]
 8009a92:	9307      	str	r3, [sp, #28]
 8009a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a98:	931a      	str	r3, [sp, #104]	; 0x68
 8009a9a:	4654      	mov	r4, sl
 8009a9c:	2205      	movs	r2, #5
 8009a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa2:	4858      	ldr	r0, [pc, #352]	; (8009c04 <_vfiprintf_r+0x24c>)
 8009aa4:	f7f6 fba4 	bl	80001f0 <memchr>
 8009aa8:	9a04      	ldr	r2, [sp, #16]
 8009aaa:	b9d8      	cbnz	r0, 8009ae4 <_vfiprintf_r+0x12c>
 8009aac:	06d1      	lsls	r1, r2, #27
 8009aae:	bf44      	itt	mi
 8009ab0:	2320      	movmi	r3, #32
 8009ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ab6:	0713      	lsls	r3, r2, #28
 8009ab8:	bf44      	itt	mi
 8009aba:	232b      	movmi	r3, #43	; 0x2b
 8009abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ac6:	d015      	beq.n	8009af4 <_vfiprintf_r+0x13c>
 8009ac8:	9a07      	ldr	r2, [sp, #28]
 8009aca:	4654      	mov	r4, sl
 8009acc:	2000      	movs	r0, #0
 8009ace:	f04f 0c0a 	mov.w	ip, #10
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ad8:	3b30      	subs	r3, #48	; 0x30
 8009ada:	2b09      	cmp	r3, #9
 8009adc:	d94e      	bls.n	8009b7c <_vfiprintf_r+0x1c4>
 8009ade:	b1b0      	cbz	r0, 8009b0e <_vfiprintf_r+0x156>
 8009ae0:	9207      	str	r2, [sp, #28]
 8009ae2:	e014      	b.n	8009b0e <_vfiprintf_r+0x156>
 8009ae4:	eba0 0308 	sub.w	r3, r0, r8
 8009ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8009aec:	4313      	orrs	r3, r2
 8009aee:	9304      	str	r3, [sp, #16]
 8009af0:	46a2      	mov	sl, r4
 8009af2:	e7d2      	b.n	8009a9a <_vfiprintf_r+0xe2>
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	1d19      	adds	r1, r3, #4
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	9103      	str	r1, [sp, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	bfbb      	ittet	lt
 8009b00:	425b      	neglt	r3, r3
 8009b02:	f042 0202 	orrlt.w	r2, r2, #2
 8009b06:	9307      	strge	r3, [sp, #28]
 8009b08:	9307      	strlt	r3, [sp, #28]
 8009b0a:	bfb8      	it	lt
 8009b0c:	9204      	strlt	r2, [sp, #16]
 8009b0e:	7823      	ldrb	r3, [r4, #0]
 8009b10:	2b2e      	cmp	r3, #46	; 0x2e
 8009b12:	d10c      	bne.n	8009b2e <_vfiprintf_r+0x176>
 8009b14:	7863      	ldrb	r3, [r4, #1]
 8009b16:	2b2a      	cmp	r3, #42	; 0x2a
 8009b18:	d135      	bne.n	8009b86 <_vfiprintf_r+0x1ce>
 8009b1a:	9b03      	ldr	r3, [sp, #12]
 8009b1c:	1d1a      	adds	r2, r3, #4
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	9203      	str	r2, [sp, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	bfb8      	it	lt
 8009b26:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b2a:	3402      	adds	r4, #2
 8009b2c:	9305      	str	r3, [sp, #20]
 8009b2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c14 <_vfiprintf_r+0x25c>
 8009b32:	7821      	ldrb	r1, [r4, #0]
 8009b34:	2203      	movs	r2, #3
 8009b36:	4650      	mov	r0, sl
 8009b38:	f7f6 fb5a 	bl	80001f0 <memchr>
 8009b3c:	b140      	cbz	r0, 8009b50 <_vfiprintf_r+0x198>
 8009b3e:	2340      	movs	r3, #64	; 0x40
 8009b40:	eba0 000a 	sub.w	r0, r0, sl
 8009b44:	fa03 f000 	lsl.w	r0, r3, r0
 8009b48:	9b04      	ldr	r3, [sp, #16]
 8009b4a:	4303      	orrs	r3, r0
 8009b4c:	3401      	adds	r4, #1
 8009b4e:	9304      	str	r3, [sp, #16]
 8009b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b54:	482c      	ldr	r0, [pc, #176]	; (8009c08 <_vfiprintf_r+0x250>)
 8009b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b5a:	2206      	movs	r2, #6
 8009b5c:	f7f6 fb48 	bl	80001f0 <memchr>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d03f      	beq.n	8009be4 <_vfiprintf_r+0x22c>
 8009b64:	4b29      	ldr	r3, [pc, #164]	; (8009c0c <_vfiprintf_r+0x254>)
 8009b66:	bb1b      	cbnz	r3, 8009bb0 <_vfiprintf_r+0x1f8>
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	3307      	adds	r3, #7
 8009b6c:	f023 0307 	bic.w	r3, r3, #7
 8009b70:	3308      	adds	r3, #8
 8009b72:	9303      	str	r3, [sp, #12]
 8009b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b76:	443b      	add	r3, r7
 8009b78:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7a:	e767      	b.n	8009a4c <_vfiprintf_r+0x94>
 8009b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b80:	460c      	mov	r4, r1
 8009b82:	2001      	movs	r0, #1
 8009b84:	e7a5      	b.n	8009ad2 <_vfiprintf_r+0x11a>
 8009b86:	2300      	movs	r3, #0
 8009b88:	3401      	adds	r4, #1
 8009b8a:	9305      	str	r3, [sp, #20]
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	f04f 0c0a 	mov.w	ip, #10
 8009b92:	4620      	mov	r0, r4
 8009b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b98:	3a30      	subs	r2, #48	; 0x30
 8009b9a:	2a09      	cmp	r2, #9
 8009b9c:	d903      	bls.n	8009ba6 <_vfiprintf_r+0x1ee>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0c5      	beq.n	8009b2e <_vfiprintf_r+0x176>
 8009ba2:	9105      	str	r1, [sp, #20]
 8009ba4:	e7c3      	b.n	8009b2e <_vfiprintf_r+0x176>
 8009ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009baa:	4604      	mov	r4, r0
 8009bac:	2301      	movs	r3, #1
 8009bae:	e7f0      	b.n	8009b92 <_vfiprintf_r+0x1da>
 8009bb0:	ab03      	add	r3, sp, #12
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	462a      	mov	r2, r5
 8009bb6:	4b16      	ldr	r3, [pc, #88]	; (8009c10 <_vfiprintf_r+0x258>)
 8009bb8:	a904      	add	r1, sp, #16
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7fc f83a 	bl	8005c34 <_printf_float>
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	1c78      	adds	r0, r7, #1
 8009bc4:	d1d6      	bne.n	8009b74 <_vfiprintf_r+0x1bc>
 8009bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bc8:	07d9      	lsls	r1, r3, #31
 8009bca:	d405      	bmi.n	8009bd8 <_vfiprintf_r+0x220>
 8009bcc:	89ab      	ldrh	r3, [r5, #12]
 8009bce:	059a      	lsls	r2, r3, #22
 8009bd0:	d402      	bmi.n	8009bd8 <_vfiprintf_r+0x220>
 8009bd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bd4:	f000 faa1 	bl	800a11a <__retarget_lock_release_recursive>
 8009bd8:	89ab      	ldrh	r3, [r5, #12]
 8009bda:	065b      	lsls	r3, r3, #25
 8009bdc:	f53f af12 	bmi.w	8009a04 <_vfiprintf_r+0x4c>
 8009be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009be2:	e711      	b.n	8009a08 <_vfiprintf_r+0x50>
 8009be4:	ab03      	add	r3, sp, #12
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	462a      	mov	r2, r5
 8009bea:	4b09      	ldr	r3, [pc, #36]	; (8009c10 <_vfiprintf_r+0x258>)
 8009bec:	a904      	add	r1, sp, #16
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f7fc fac4 	bl	800617c <_printf_i>
 8009bf4:	e7e4      	b.n	8009bc0 <_vfiprintf_r+0x208>
 8009bf6:	bf00      	nop
 8009bf8:	0800a914 	.word	0x0800a914
 8009bfc:	0800a934 	.word	0x0800a934
 8009c00:	0800a8f4 	.word	0x0800a8f4
 8009c04:	0800a8a4 	.word	0x0800a8a4
 8009c08:	0800a8ae 	.word	0x0800a8ae
 8009c0c:	08005c35 	.word	0x08005c35
 8009c10:	08009995 	.word	0x08009995
 8009c14:	0800a8aa 	.word	0x0800a8aa

08009c18 <__swbuf_r>:
 8009c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1a:	460e      	mov	r6, r1
 8009c1c:	4614      	mov	r4, r2
 8009c1e:	4605      	mov	r5, r0
 8009c20:	b118      	cbz	r0, 8009c2a <__swbuf_r+0x12>
 8009c22:	6983      	ldr	r3, [r0, #24]
 8009c24:	b90b      	cbnz	r3, 8009c2a <__swbuf_r+0x12>
 8009c26:	f000 f9d9 	bl	8009fdc <__sinit>
 8009c2a:	4b21      	ldr	r3, [pc, #132]	; (8009cb0 <__swbuf_r+0x98>)
 8009c2c:	429c      	cmp	r4, r3
 8009c2e:	d12b      	bne.n	8009c88 <__swbuf_r+0x70>
 8009c30:	686c      	ldr	r4, [r5, #4]
 8009c32:	69a3      	ldr	r3, [r4, #24]
 8009c34:	60a3      	str	r3, [r4, #8]
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	071a      	lsls	r2, r3, #28
 8009c3a:	d52f      	bpl.n	8009c9c <__swbuf_r+0x84>
 8009c3c:	6923      	ldr	r3, [r4, #16]
 8009c3e:	b36b      	cbz	r3, 8009c9c <__swbuf_r+0x84>
 8009c40:	6923      	ldr	r3, [r4, #16]
 8009c42:	6820      	ldr	r0, [r4, #0]
 8009c44:	1ac0      	subs	r0, r0, r3
 8009c46:	6963      	ldr	r3, [r4, #20]
 8009c48:	b2f6      	uxtb	r6, r6
 8009c4a:	4283      	cmp	r3, r0
 8009c4c:	4637      	mov	r7, r6
 8009c4e:	dc04      	bgt.n	8009c5a <__swbuf_r+0x42>
 8009c50:	4621      	mov	r1, r4
 8009c52:	4628      	mov	r0, r5
 8009c54:	f000 f92e 	bl	8009eb4 <_fflush_r>
 8009c58:	bb30      	cbnz	r0, 8009ca8 <__swbuf_r+0x90>
 8009c5a:	68a3      	ldr	r3, [r4, #8]
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	60a3      	str	r3, [r4, #8]
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	1c5a      	adds	r2, r3, #1
 8009c64:	6022      	str	r2, [r4, #0]
 8009c66:	701e      	strb	r6, [r3, #0]
 8009c68:	6963      	ldr	r3, [r4, #20]
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	4283      	cmp	r3, r0
 8009c6e:	d004      	beq.n	8009c7a <__swbuf_r+0x62>
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	07db      	lsls	r3, r3, #31
 8009c74:	d506      	bpl.n	8009c84 <__swbuf_r+0x6c>
 8009c76:	2e0a      	cmp	r6, #10
 8009c78:	d104      	bne.n	8009c84 <__swbuf_r+0x6c>
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f000 f919 	bl	8009eb4 <_fflush_r>
 8009c82:	b988      	cbnz	r0, 8009ca8 <__swbuf_r+0x90>
 8009c84:	4638      	mov	r0, r7
 8009c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c88:	4b0a      	ldr	r3, [pc, #40]	; (8009cb4 <__swbuf_r+0x9c>)
 8009c8a:	429c      	cmp	r4, r3
 8009c8c:	d101      	bne.n	8009c92 <__swbuf_r+0x7a>
 8009c8e:	68ac      	ldr	r4, [r5, #8]
 8009c90:	e7cf      	b.n	8009c32 <__swbuf_r+0x1a>
 8009c92:	4b09      	ldr	r3, [pc, #36]	; (8009cb8 <__swbuf_r+0xa0>)
 8009c94:	429c      	cmp	r4, r3
 8009c96:	bf08      	it	eq
 8009c98:	68ec      	ldreq	r4, [r5, #12]
 8009c9a:	e7ca      	b.n	8009c32 <__swbuf_r+0x1a>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f000 f80c 	bl	8009cbc <__swsetup_r>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d0cb      	beq.n	8009c40 <__swbuf_r+0x28>
 8009ca8:	f04f 37ff 	mov.w	r7, #4294967295
 8009cac:	e7ea      	b.n	8009c84 <__swbuf_r+0x6c>
 8009cae:	bf00      	nop
 8009cb0:	0800a914 	.word	0x0800a914
 8009cb4:	0800a934 	.word	0x0800a934
 8009cb8:	0800a8f4 	.word	0x0800a8f4

08009cbc <__swsetup_r>:
 8009cbc:	4b32      	ldr	r3, [pc, #200]	; (8009d88 <__swsetup_r+0xcc>)
 8009cbe:	b570      	push	{r4, r5, r6, lr}
 8009cc0:	681d      	ldr	r5, [r3, #0]
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	b125      	cbz	r5, 8009cd2 <__swsetup_r+0x16>
 8009cc8:	69ab      	ldr	r3, [r5, #24]
 8009cca:	b913      	cbnz	r3, 8009cd2 <__swsetup_r+0x16>
 8009ccc:	4628      	mov	r0, r5
 8009cce:	f000 f985 	bl	8009fdc <__sinit>
 8009cd2:	4b2e      	ldr	r3, [pc, #184]	; (8009d8c <__swsetup_r+0xd0>)
 8009cd4:	429c      	cmp	r4, r3
 8009cd6:	d10f      	bne.n	8009cf8 <__swsetup_r+0x3c>
 8009cd8:	686c      	ldr	r4, [r5, #4]
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ce0:	0719      	lsls	r1, r3, #28
 8009ce2:	d42c      	bmi.n	8009d3e <__swsetup_r+0x82>
 8009ce4:	06dd      	lsls	r5, r3, #27
 8009ce6:	d411      	bmi.n	8009d0c <__swsetup_r+0x50>
 8009ce8:	2309      	movs	r3, #9
 8009cea:	6033      	str	r3, [r6, #0]
 8009cec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf6:	e03e      	b.n	8009d76 <__swsetup_r+0xba>
 8009cf8:	4b25      	ldr	r3, [pc, #148]	; (8009d90 <__swsetup_r+0xd4>)
 8009cfa:	429c      	cmp	r4, r3
 8009cfc:	d101      	bne.n	8009d02 <__swsetup_r+0x46>
 8009cfe:	68ac      	ldr	r4, [r5, #8]
 8009d00:	e7eb      	b.n	8009cda <__swsetup_r+0x1e>
 8009d02:	4b24      	ldr	r3, [pc, #144]	; (8009d94 <__swsetup_r+0xd8>)
 8009d04:	429c      	cmp	r4, r3
 8009d06:	bf08      	it	eq
 8009d08:	68ec      	ldreq	r4, [r5, #12]
 8009d0a:	e7e6      	b.n	8009cda <__swsetup_r+0x1e>
 8009d0c:	0758      	lsls	r0, r3, #29
 8009d0e:	d512      	bpl.n	8009d36 <__swsetup_r+0x7a>
 8009d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d12:	b141      	cbz	r1, 8009d26 <__swsetup_r+0x6a>
 8009d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d18:	4299      	cmp	r1, r3
 8009d1a:	d002      	beq.n	8009d22 <__swsetup_r+0x66>
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f7ff fb25 	bl	800936c <_free_r>
 8009d22:	2300      	movs	r3, #0
 8009d24:	6363      	str	r3, [r4, #52]	; 0x34
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d2c:	81a3      	strh	r3, [r4, #12]
 8009d2e:	2300      	movs	r3, #0
 8009d30:	6063      	str	r3, [r4, #4]
 8009d32:	6923      	ldr	r3, [r4, #16]
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f043 0308 	orr.w	r3, r3, #8
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	6923      	ldr	r3, [r4, #16]
 8009d40:	b94b      	cbnz	r3, 8009d56 <__swsetup_r+0x9a>
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d4c:	d003      	beq.n	8009d56 <__swsetup_r+0x9a>
 8009d4e:	4621      	mov	r1, r4
 8009d50:	4630      	mov	r0, r6
 8009d52:	f000 fa09 	bl	800a168 <__smakebuf_r>
 8009d56:	89a0      	ldrh	r0, [r4, #12]
 8009d58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d5c:	f010 0301 	ands.w	r3, r0, #1
 8009d60:	d00a      	beq.n	8009d78 <__swsetup_r+0xbc>
 8009d62:	2300      	movs	r3, #0
 8009d64:	60a3      	str	r3, [r4, #8]
 8009d66:	6963      	ldr	r3, [r4, #20]
 8009d68:	425b      	negs	r3, r3
 8009d6a:	61a3      	str	r3, [r4, #24]
 8009d6c:	6923      	ldr	r3, [r4, #16]
 8009d6e:	b943      	cbnz	r3, 8009d82 <__swsetup_r+0xc6>
 8009d70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d74:	d1ba      	bne.n	8009cec <__swsetup_r+0x30>
 8009d76:	bd70      	pop	{r4, r5, r6, pc}
 8009d78:	0781      	lsls	r1, r0, #30
 8009d7a:	bf58      	it	pl
 8009d7c:	6963      	ldrpl	r3, [r4, #20]
 8009d7e:	60a3      	str	r3, [r4, #8]
 8009d80:	e7f4      	b.n	8009d6c <__swsetup_r+0xb0>
 8009d82:	2000      	movs	r0, #0
 8009d84:	e7f7      	b.n	8009d76 <__swsetup_r+0xba>
 8009d86:	bf00      	nop
 8009d88:	2000001c 	.word	0x2000001c
 8009d8c:	0800a914 	.word	0x0800a914
 8009d90:	0800a934 	.word	0x0800a934
 8009d94:	0800a8f4 	.word	0x0800a8f4

08009d98 <abort>:
 8009d98:	b508      	push	{r3, lr}
 8009d9a:	2006      	movs	r0, #6
 8009d9c:	f000 fa54 	bl	800a248 <raise>
 8009da0:	2001      	movs	r0, #1
 8009da2:	f7f8 f929 	bl	8001ff8 <_exit>
	...

08009da8 <__sflush_r>:
 8009da8:	898a      	ldrh	r2, [r1, #12]
 8009daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dae:	4605      	mov	r5, r0
 8009db0:	0710      	lsls	r0, r2, #28
 8009db2:	460c      	mov	r4, r1
 8009db4:	d458      	bmi.n	8009e68 <__sflush_r+0xc0>
 8009db6:	684b      	ldr	r3, [r1, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	dc05      	bgt.n	8009dc8 <__sflush_r+0x20>
 8009dbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	dc02      	bgt.n	8009dc8 <__sflush_r+0x20>
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dca:	2e00      	cmp	r6, #0
 8009dcc:	d0f9      	beq.n	8009dc2 <__sflush_r+0x1a>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009dd4:	682f      	ldr	r7, [r5, #0]
 8009dd6:	602b      	str	r3, [r5, #0]
 8009dd8:	d032      	beq.n	8009e40 <__sflush_r+0x98>
 8009dda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	075a      	lsls	r2, r3, #29
 8009de0:	d505      	bpl.n	8009dee <__sflush_r+0x46>
 8009de2:	6863      	ldr	r3, [r4, #4]
 8009de4:	1ac0      	subs	r0, r0, r3
 8009de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009de8:	b10b      	cbz	r3, 8009dee <__sflush_r+0x46>
 8009dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dec:	1ac0      	subs	r0, r0, r3
 8009dee:	2300      	movs	r3, #0
 8009df0:	4602      	mov	r2, r0
 8009df2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009df4:	6a21      	ldr	r1, [r4, #32]
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b0      	blx	r6
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	d106      	bne.n	8009e0e <__sflush_r+0x66>
 8009e00:	6829      	ldr	r1, [r5, #0]
 8009e02:	291d      	cmp	r1, #29
 8009e04:	d82c      	bhi.n	8009e60 <__sflush_r+0xb8>
 8009e06:	4a2a      	ldr	r2, [pc, #168]	; (8009eb0 <__sflush_r+0x108>)
 8009e08:	40ca      	lsrs	r2, r1
 8009e0a:	07d6      	lsls	r6, r2, #31
 8009e0c:	d528      	bpl.n	8009e60 <__sflush_r+0xb8>
 8009e0e:	2200      	movs	r2, #0
 8009e10:	6062      	str	r2, [r4, #4]
 8009e12:	04d9      	lsls	r1, r3, #19
 8009e14:	6922      	ldr	r2, [r4, #16]
 8009e16:	6022      	str	r2, [r4, #0]
 8009e18:	d504      	bpl.n	8009e24 <__sflush_r+0x7c>
 8009e1a:	1c42      	adds	r2, r0, #1
 8009e1c:	d101      	bne.n	8009e22 <__sflush_r+0x7a>
 8009e1e:	682b      	ldr	r3, [r5, #0]
 8009e20:	b903      	cbnz	r3, 8009e24 <__sflush_r+0x7c>
 8009e22:	6560      	str	r0, [r4, #84]	; 0x54
 8009e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e26:	602f      	str	r7, [r5, #0]
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	d0ca      	beq.n	8009dc2 <__sflush_r+0x1a>
 8009e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e30:	4299      	cmp	r1, r3
 8009e32:	d002      	beq.n	8009e3a <__sflush_r+0x92>
 8009e34:	4628      	mov	r0, r5
 8009e36:	f7ff fa99 	bl	800936c <_free_r>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e3e:	e7c1      	b.n	8009dc4 <__sflush_r+0x1c>
 8009e40:	6a21      	ldr	r1, [r4, #32]
 8009e42:	2301      	movs	r3, #1
 8009e44:	4628      	mov	r0, r5
 8009e46:	47b0      	blx	r6
 8009e48:	1c41      	adds	r1, r0, #1
 8009e4a:	d1c7      	bne.n	8009ddc <__sflush_r+0x34>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0c4      	beq.n	8009ddc <__sflush_r+0x34>
 8009e52:	2b1d      	cmp	r3, #29
 8009e54:	d001      	beq.n	8009e5a <__sflush_r+0xb2>
 8009e56:	2b16      	cmp	r3, #22
 8009e58:	d101      	bne.n	8009e5e <__sflush_r+0xb6>
 8009e5a:	602f      	str	r7, [r5, #0]
 8009e5c:	e7b1      	b.n	8009dc2 <__sflush_r+0x1a>
 8009e5e:	89a3      	ldrh	r3, [r4, #12]
 8009e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e64:	81a3      	strh	r3, [r4, #12]
 8009e66:	e7ad      	b.n	8009dc4 <__sflush_r+0x1c>
 8009e68:	690f      	ldr	r7, [r1, #16]
 8009e6a:	2f00      	cmp	r7, #0
 8009e6c:	d0a9      	beq.n	8009dc2 <__sflush_r+0x1a>
 8009e6e:	0793      	lsls	r3, r2, #30
 8009e70:	680e      	ldr	r6, [r1, #0]
 8009e72:	bf08      	it	eq
 8009e74:	694b      	ldreq	r3, [r1, #20]
 8009e76:	600f      	str	r7, [r1, #0]
 8009e78:	bf18      	it	ne
 8009e7a:	2300      	movne	r3, #0
 8009e7c:	eba6 0807 	sub.w	r8, r6, r7
 8009e80:	608b      	str	r3, [r1, #8]
 8009e82:	f1b8 0f00 	cmp.w	r8, #0
 8009e86:	dd9c      	ble.n	8009dc2 <__sflush_r+0x1a>
 8009e88:	6a21      	ldr	r1, [r4, #32]
 8009e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e8c:	4643      	mov	r3, r8
 8009e8e:	463a      	mov	r2, r7
 8009e90:	4628      	mov	r0, r5
 8009e92:	47b0      	blx	r6
 8009e94:	2800      	cmp	r0, #0
 8009e96:	dc06      	bgt.n	8009ea6 <__sflush_r+0xfe>
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e9e:	81a3      	strh	r3, [r4, #12]
 8009ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea4:	e78e      	b.n	8009dc4 <__sflush_r+0x1c>
 8009ea6:	4407      	add	r7, r0
 8009ea8:	eba8 0800 	sub.w	r8, r8, r0
 8009eac:	e7e9      	b.n	8009e82 <__sflush_r+0xda>
 8009eae:	bf00      	nop
 8009eb0:	20400001 	.word	0x20400001

08009eb4 <_fflush_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	690b      	ldr	r3, [r1, #16]
 8009eb8:	4605      	mov	r5, r0
 8009eba:	460c      	mov	r4, r1
 8009ebc:	b913      	cbnz	r3, 8009ec4 <_fflush_r+0x10>
 8009ebe:	2500      	movs	r5, #0
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	bd38      	pop	{r3, r4, r5, pc}
 8009ec4:	b118      	cbz	r0, 8009ece <_fflush_r+0x1a>
 8009ec6:	6983      	ldr	r3, [r0, #24]
 8009ec8:	b90b      	cbnz	r3, 8009ece <_fflush_r+0x1a>
 8009eca:	f000 f887 	bl	8009fdc <__sinit>
 8009ece:	4b14      	ldr	r3, [pc, #80]	; (8009f20 <_fflush_r+0x6c>)
 8009ed0:	429c      	cmp	r4, r3
 8009ed2:	d11b      	bne.n	8009f0c <_fflush_r+0x58>
 8009ed4:	686c      	ldr	r4, [r5, #4]
 8009ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0ef      	beq.n	8009ebe <_fflush_r+0xa>
 8009ede:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ee0:	07d0      	lsls	r0, r2, #31
 8009ee2:	d404      	bmi.n	8009eee <_fflush_r+0x3a>
 8009ee4:	0599      	lsls	r1, r3, #22
 8009ee6:	d402      	bmi.n	8009eee <_fflush_r+0x3a>
 8009ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eea:	f000 f915 	bl	800a118 <__retarget_lock_acquire_recursive>
 8009eee:	4628      	mov	r0, r5
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	f7ff ff59 	bl	8009da8 <__sflush_r>
 8009ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ef8:	07da      	lsls	r2, r3, #31
 8009efa:	4605      	mov	r5, r0
 8009efc:	d4e0      	bmi.n	8009ec0 <_fflush_r+0xc>
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	059b      	lsls	r3, r3, #22
 8009f02:	d4dd      	bmi.n	8009ec0 <_fflush_r+0xc>
 8009f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f06:	f000 f908 	bl	800a11a <__retarget_lock_release_recursive>
 8009f0a:	e7d9      	b.n	8009ec0 <_fflush_r+0xc>
 8009f0c:	4b05      	ldr	r3, [pc, #20]	; (8009f24 <_fflush_r+0x70>)
 8009f0e:	429c      	cmp	r4, r3
 8009f10:	d101      	bne.n	8009f16 <_fflush_r+0x62>
 8009f12:	68ac      	ldr	r4, [r5, #8]
 8009f14:	e7df      	b.n	8009ed6 <_fflush_r+0x22>
 8009f16:	4b04      	ldr	r3, [pc, #16]	; (8009f28 <_fflush_r+0x74>)
 8009f18:	429c      	cmp	r4, r3
 8009f1a:	bf08      	it	eq
 8009f1c:	68ec      	ldreq	r4, [r5, #12]
 8009f1e:	e7da      	b.n	8009ed6 <_fflush_r+0x22>
 8009f20:	0800a914 	.word	0x0800a914
 8009f24:	0800a934 	.word	0x0800a934
 8009f28:	0800a8f4 	.word	0x0800a8f4

08009f2c <std>:
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	b510      	push	{r4, lr}
 8009f30:	4604      	mov	r4, r0
 8009f32:	e9c0 3300 	strd	r3, r3, [r0]
 8009f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f3a:	6083      	str	r3, [r0, #8]
 8009f3c:	8181      	strh	r1, [r0, #12]
 8009f3e:	6643      	str	r3, [r0, #100]	; 0x64
 8009f40:	81c2      	strh	r2, [r0, #14]
 8009f42:	6183      	str	r3, [r0, #24]
 8009f44:	4619      	mov	r1, r3
 8009f46:	2208      	movs	r2, #8
 8009f48:	305c      	adds	r0, #92	; 0x5c
 8009f4a:	f7fb fdcb 	bl	8005ae4 <memset>
 8009f4e:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <std+0x38>)
 8009f50:	6263      	str	r3, [r4, #36]	; 0x24
 8009f52:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <std+0x3c>)
 8009f54:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <std+0x40>)
 8009f58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f5a:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <std+0x44>)
 8009f5c:	6224      	str	r4, [r4, #32]
 8009f5e:	6323      	str	r3, [r4, #48]	; 0x30
 8009f60:	bd10      	pop	{r4, pc}
 8009f62:	bf00      	nop
 8009f64:	0800a281 	.word	0x0800a281
 8009f68:	0800a2a3 	.word	0x0800a2a3
 8009f6c:	0800a2db 	.word	0x0800a2db
 8009f70:	0800a2ff 	.word	0x0800a2ff

08009f74 <_cleanup_r>:
 8009f74:	4901      	ldr	r1, [pc, #4]	; (8009f7c <_cleanup_r+0x8>)
 8009f76:	f000 b8af 	b.w	800a0d8 <_fwalk_reent>
 8009f7a:	bf00      	nop
 8009f7c:	08009eb5 	.word	0x08009eb5

08009f80 <__sfmoreglue>:
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	2268      	movs	r2, #104	; 0x68
 8009f84:	1e4d      	subs	r5, r1, #1
 8009f86:	4355      	muls	r5, r2
 8009f88:	460e      	mov	r6, r1
 8009f8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f8e:	f7ff fa59 	bl	8009444 <_malloc_r>
 8009f92:	4604      	mov	r4, r0
 8009f94:	b140      	cbz	r0, 8009fa8 <__sfmoreglue+0x28>
 8009f96:	2100      	movs	r1, #0
 8009f98:	e9c0 1600 	strd	r1, r6, [r0]
 8009f9c:	300c      	adds	r0, #12
 8009f9e:	60a0      	str	r0, [r4, #8]
 8009fa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fa4:	f7fb fd9e 	bl	8005ae4 <memset>
 8009fa8:	4620      	mov	r0, r4
 8009faa:	bd70      	pop	{r4, r5, r6, pc}

08009fac <__sfp_lock_acquire>:
 8009fac:	4801      	ldr	r0, [pc, #4]	; (8009fb4 <__sfp_lock_acquire+0x8>)
 8009fae:	f000 b8b3 	b.w	800a118 <__retarget_lock_acquire_recursive>
 8009fb2:	bf00      	nop
 8009fb4:	20000405 	.word	0x20000405

08009fb8 <__sfp_lock_release>:
 8009fb8:	4801      	ldr	r0, [pc, #4]	; (8009fc0 <__sfp_lock_release+0x8>)
 8009fba:	f000 b8ae 	b.w	800a11a <__retarget_lock_release_recursive>
 8009fbe:	bf00      	nop
 8009fc0:	20000405 	.word	0x20000405

08009fc4 <__sinit_lock_acquire>:
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <__sinit_lock_acquire+0x8>)
 8009fc6:	f000 b8a7 	b.w	800a118 <__retarget_lock_acquire_recursive>
 8009fca:	bf00      	nop
 8009fcc:	20000406 	.word	0x20000406

08009fd0 <__sinit_lock_release>:
 8009fd0:	4801      	ldr	r0, [pc, #4]	; (8009fd8 <__sinit_lock_release+0x8>)
 8009fd2:	f000 b8a2 	b.w	800a11a <__retarget_lock_release_recursive>
 8009fd6:	bf00      	nop
 8009fd8:	20000406 	.word	0x20000406

08009fdc <__sinit>:
 8009fdc:	b510      	push	{r4, lr}
 8009fde:	4604      	mov	r4, r0
 8009fe0:	f7ff fff0 	bl	8009fc4 <__sinit_lock_acquire>
 8009fe4:	69a3      	ldr	r3, [r4, #24]
 8009fe6:	b11b      	cbz	r3, 8009ff0 <__sinit+0x14>
 8009fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fec:	f7ff bff0 	b.w	8009fd0 <__sinit_lock_release>
 8009ff0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ff4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ff6:	4b13      	ldr	r3, [pc, #76]	; (800a044 <__sinit+0x68>)
 8009ff8:	4a13      	ldr	r2, [pc, #76]	; (800a048 <__sinit+0x6c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ffe:	42a3      	cmp	r3, r4
 800a000:	bf04      	itt	eq
 800a002:	2301      	moveq	r3, #1
 800a004:	61a3      	streq	r3, [r4, #24]
 800a006:	4620      	mov	r0, r4
 800a008:	f000 f820 	bl	800a04c <__sfp>
 800a00c:	6060      	str	r0, [r4, #4]
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 f81c 	bl	800a04c <__sfp>
 800a014:	60a0      	str	r0, [r4, #8]
 800a016:	4620      	mov	r0, r4
 800a018:	f000 f818 	bl	800a04c <__sfp>
 800a01c:	2200      	movs	r2, #0
 800a01e:	60e0      	str	r0, [r4, #12]
 800a020:	2104      	movs	r1, #4
 800a022:	6860      	ldr	r0, [r4, #4]
 800a024:	f7ff ff82 	bl	8009f2c <std>
 800a028:	68a0      	ldr	r0, [r4, #8]
 800a02a:	2201      	movs	r2, #1
 800a02c:	2109      	movs	r1, #9
 800a02e:	f7ff ff7d 	bl	8009f2c <std>
 800a032:	68e0      	ldr	r0, [r4, #12]
 800a034:	2202      	movs	r2, #2
 800a036:	2112      	movs	r1, #18
 800a038:	f7ff ff78 	bl	8009f2c <std>
 800a03c:	2301      	movs	r3, #1
 800a03e:	61a3      	str	r3, [r4, #24]
 800a040:	e7d2      	b.n	8009fe8 <__sinit+0xc>
 800a042:	bf00      	nop
 800a044:	0800a4ac 	.word	0x0800a4ac
 800a048:	08009f75 	.word	0x08009f75

0800a04c <__sfp>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	4607      	mov	r7, r0
 800a050:	f7ff ffac 	bl	8009fac <__sfp_lock_acquire>
 800a054:	4b1e      	ldr	r3, [pc, #120]	; (800a0d0 <__sfp+0x84>)
 800a056:	681e      	ldr	r6, [r3, #0]
 800a058:	69b3      	ldr	r3, [r6, #24]
 800a05a:	b913      	cbnz	r3, 800a062 <__sfp+0x16>
 800a05c:	4630      	mov	r0, r6
 800a05e:	f7ff ffbd 	bl	8009fdc <__sinit>
 800a062:	3648      	adds	r6, #72	; 0x48
 800a064:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a068:	3b01      	subs	r3, #1
 800a06a:	d503      	bpl.n	800a074 <__sfp+0x28>
 800a06c:	6833      	ldr	r3, [r6, #0]
 800a06e:	b30b      	cbz	r3, 800a0b4 <__sfp+0x68>
 800a070:	6836      	ldr	r6, [r6, #0]
 800a072:	e7f7      	b.n	800a064 <__sfp+0x18>
 800a074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a078:	b9d5      	cbnz	r5, 800a0b0 <__sfp+0x64>
 800a07a:	4b16      	ldr	r3, [pc, #88]	; (800a0d4 <__sfp+0x88>)
 800a07c:	60e3      	str	r3, [r4, #12]
 800a07e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a082:	6665      	str	r5, [r4, #100]	; 0x64
 800a084:	f000 f847 	bl	800a116 <__retarget_lock_init_recursive>
 800a088:	f7ff ff96 	bl	8009fb8 <__sfp_lock_release>
 800a08c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a090:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a094:	6025      	str	r5, [r4, #0]
 800a096:	61a5      	str	r5, [r4, #24]
 800a098:	2208      	movs	r2, #8
 800a09a:	4629      	mov	r1, r5
 800a09c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0a0:	f7fb fd20 	bl	8005ae4 <memset>
 800a0a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b0:	3468      	adds	r4, #104	; 0x68
 800a0b2:	e7d9      	b.n	800a068 <__sfp+0x1c>
 800a0b4:	2104      	movs	r1, #4
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	f7ff ff62 	bl	8009f80 <__sfmoreglue>
 800a0bc:	4604      	mov	r4, r0
 800a0be:	6030      	str	r0, [r6, #0]
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d1d5      	bne.n	800a070 <__sfp+0x24>
 800a0c4:	f7ff ff78 	bl	8009fb8 <__sfp_lock_release>
 800a0c8:	230c      	movs	r3, #12
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	e7ee      	b.n	800a0ac <__sfp+0x60>
 800a0ce:	bf00      	nop
 800a0d0:	0800a4ac 	.word	0x0800a4ac
 800a0d4:	ffff0001 	.word	0xffff0001

0800a0d8 <_fwalk_reent>:
 800a0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0dc:	4606      	mov	r6, r0
 800a0de:	4688      	mov	r8, r1
 800a0e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0e4:	2700      	movs	r7, #0
 800a0e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0ea:	f1b9 0901 	subs.w	r9, r9, #1
 800a0ee:	d505      	bpl.n	800a0fc <_fwalk_reent+0x24>
 800a0f0:	6824      	ldr	r4, [r4, #0]
 800a0f2:	2c00      	cmp	r4, #0
 800a0f4:	d1f7      	bne.n	800a0e6 <_fwalk_reent+0xe>
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0fc:	89ab      	ldrh	r3, [r5, #12]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d907      	bls.n	800a112 <_fwalk_reent+0x3a>
 800a102:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a106:	3301      	adds	r3, #1
 800a108:	d003      	beq.n	800a112 <_fwalk_reent+0x3a>
 800a10a:	4629      	mov	r1, r5
 800a10c:	4630      	mov	r0, r6
 800a10e:	47c0      	blx	r8
 800a110:	4307      	orrs	r7, r0
 800a112:	3568      	adds	r5, #104	; 0x68
 800a114:	e7e9      	b.n	800a0ea <_fwalk_reent+0x12>

0800a116 <__retarget_lock_init_recursive>:
 800a116:	4770      	bx	lr

0800a118 <__retarget_lock_acquire_recursive>:
 800a118:	4770      	bx	lr

0800a11a <__retarget_lock_release_recursive>:
 800a11a:	4770      	bx	lr

0800a11c <__swhatbuf_r>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	460e      	mov	r6, r1
 800a120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a124:	2900      	cmp	r1, #0
 800a126:	b096      	sub	sp, #88	; 0x58
 800a128:	4614      	mov	r4, r2
 800a12a:	461d      	mov	r5, r3
 800a12c:	da08      	bge.n	800a140 <__swhatbuf_r+0x24>
 800a12e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	602a      	str	r2, [r5, #0]
 800a136:	061a      	lsls	r2, r3, #24
 800a138:	d410      	bmi.n	800a15c <__swhatbuf_r+0x40>
 800a13a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a13e:	e00e      	b.n	800a15e <__swhatbuf_r+0x42>
 800a140:	466a      	mov	r2, sp
 800a142:	f000 f903 	bl	800a34c <_fstat_r>
 800a146:	2800      	cmp	r0, #0
 800a148:	dbf1      	blt.n	800a12e <__swhatbuf_r+0x12>
 800a14a:	9a01      	ldr	r2, [sp, #4]
 800a14c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a150:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a154:	425a      	negs	r2, r3
 800a156:	415a      	adcs	r2, r3
 800a158:	602a      	str	r2, [r5, #0]
 800a15a:	e7ee      	b.n	800a13a <__swhatbuf_r+0x1e>
 800a15c:	2340      	movs	r3, #64	; 0x40
 800a15e:	2000      	movs	r0, #0
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	b016      	add	sp, #88	; 0x58
 800a164:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a168 <__smakebuf_r>:
 800a168:	898b      	ldrh	r3, [r1, #12]
 800a16a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a16c:	079d      	lsls	r5, r3, #30
 800a16e:	4606      	mov	r6, r0
 800a170:	460c      	mov	r4, r1
 800a172:	d507      	bpl.n	800a184 <__smakebuf_r+0x1c>
 800a174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	2301      	movs	r3, #1
 800a17e:	6163      	str	r3, [r4, #20]
 800a180:	b002      	add	sp, #8
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	ab01      	add	r3, sp, #4
 800a186:	466a      	mov	r2, sp
 800a188:	f7ff ffc8 	bl	800a11c <__swhatbuf_r>
 800a18c:	9900      	ldr	r1, [sp, #0]
 800a18e:	4605      	mov	r5, r0
 800a190:	4630      	mov	r0, r6
 800a192:	f7ff f957 	bl	8009444 <_malloc_r>
 800a196:	b948      	cbnz	r0, 800a1ac <__smakebuf_r+0x44>
 800a198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19c:	059a      	lsls	r2, r3, #22
 800a19e:	d4ef      	bmi.n	800a180 <__smakebuf_r+0x18>
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	f043 0302 	orr.w	r3, r3, #2
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	e7e3      	b.n	800a174 <__smakebuf_r+0xc>
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <__smakebuf_r+0x7c>)
 800a1ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	6020      	str	r0, [r4, #0]
 800a1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b8:	81a3      	strh	r3, [r4, #12]
 800a1ba:	9b00      	ldr	r3, [sp, #0]
 800a1bc:	6163      	str	r3, [r4, #20]
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	6120      	str	r0, [r4, #16]
 800a1c2:	b15b      	cbz	r3, 800a1dc <__smakebuf_r+0x74>
 800a1c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f000 f8d1 	bl	800a370 <_isatty_r>
 800a1ce:	b128      	cbz	r0, 800a1dc <__smakebuf_r+0x74>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	f023 0303 	bic.w	r3, r3, #3
 800a1d6:	f043 0301 	orr.w	r3, r3, #1
 800a1da:	81a3      	strh	r3, [r4, #12]
 800a1dc:	89a0      	ldrh	r0, [r4, #12]
 800a1de:	4305      	orrs	r5, r0
 800a1e0:	81a5      	strh	r5, [r4, #12]
 800a1e2:	e7cd      	b.n	800a180 <__smakebuf_r+0x18>
 800a1e4:	08009f75 	.word	0x08009f75

0800a1e8 <_malloc_usable_size_r>:
 800a1e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ec:	1f18      	subs	r0, r3, #4
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	bfbc      	itt	lt
 800a1f2:	580b      	ldrlt	r3, [r1, r0]
 800a1f4:	18c0      	addlt	r0, r0, r3
 800a1f6:	4770      	bx	lr

0800a1f8 <_raise_r>:
 800a1f8:	291f      	cmp	r1, #31
 800a1fa:	b538      	push	{r3, r4, r5, lr}
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	460d      	mov	r5, r1
 800a200:	d904      	bls.n	800a20c <_raise_r+0x14>
 800a202:	2316      	movs	r3, #22
 800a204:	6003      	str	r3, [r0, #0]
 800a206:	f04f 30ff 	mov.w	r0, #4294967295
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a20e:	b112      	cbz	r2, 800a216 <_raise_r+0x1e>
 800a210:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a214:	b94b      	cbnz	r3, 800a22a <_raise_r+0x32>
 800a216:	4620      	mov	r0, r4
 800a218:	f000 f830 	bl	800a27c <_getpid_r>
 800a21c:	462a      	mov	r2, r5
 800a21e:	4601      	mov	r1, r0
 800a220:	4620      	mov	r0, r4
 800a222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a226:	f000 b817 	b.w	800a258 <_kill_r>
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d00a      	beq.n	800a244 <_raise_r+0x4c>
 800a22e:	1c59      	adds	r1, r3, #1
 800a230:	d103      	bne.n	800a23a <_raise_r+0x42>
 800a232:	2316      	movs	r3, #22
 800a234:	6003      	str	r3, [r0, #0]
 800a236:	2001      	movs	r0, #1
 800a238:	e7e7      	b.n	800a20a <_raise_r+0x12>
 800a23a:	2400      	movs	r4, #0
 800a23c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a240:	4628      	mov	r0, r5
 800a242:	4798      	blx	r3
 800a244:	2000      	movs	r0, #0
 800a246:	e7e0      	b.n	800a20a <_raise_r+0x12>

0800a248 <raise>:
 800a248:	4b02      	ldr	r3, [pc, #8]	; (800a254 <raise+0xc>)
 800a24a:	4601      	mov	r1, r0
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	f7ff bfd3 	b.w	800a1f8 <_raise_r>
 800a252:	bf00      	nop
 800a254:	2000001c 	.word	0x2000001c

0800a258 <_kill_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d07      	ldr	r5, [pc, #28]	; (800a278 <_kill_r+0x20>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	4611      	mov	r1, r2
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	f7f7 feb7 	bl	8001fd8 <_kill>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	d102      	bne.n	800a274 <_kill_r+0x1c>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	b103      	cbz	r3, 800a274 <_kill_r+0x1c>
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	bd38      	pop	{r3, r4, r5, pc}
 800a276:	bf00      	nop
 800a278:	20000400 	.word	0x20000400

0800a27c <_getpid_r>:
 800a27c:	f7f7 bea4 	b.w	8001fc8 <_getpid>

0800a280 <__sread>:
 800a280:	b510      	push	{r4, lr}
 800a282:	460c      	mov	r4, r1
 800a284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a288:	f000 f894 	bl	800a3b4 <_read_r>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	bfab      	itete	ge
 800a290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a292:	89a3      	ldrhlt	r3, [r4, #12]
 800a294:	181b      	addge	r3, r3, r0
 800a296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a29a:	bfac      	ite	ge
 800a29c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a29e:	81a3      	strhlt	r3, [r4, #12]
 800a2a0:	bd10      	pop	{r4, pc}

0800a2a2 <__swrite>:
 800a2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a6:	461f      	mov	r7, r3
 800a2a8:	898b      	ldrh	r3, [r1, #12]
 800a2aa:	05db      	lsls	r3, r3, #23
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	4616      	mov	r6, r2
 800a2b2:	d505      	bpl.n	800a2c0 <__swrite+0x1e>
 800a2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f000 f868 	bl	800a390 <_lseek_r>
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ca:	81a3      	strh	r3, [r4, #12]
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	463b      	mov	r3, r7
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d6:	f000 b817 	b.w	800a308 <_write_r>

0800a2da <__sseek>:
 800a2da:	b510      	push	{r4, lr}
 800a2dc:	460c      	mov	r4, r1
 800a2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e2:	f000 f855 	bl	800a390 <_lseek_r>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	bf15      	itete	ne
 800a2ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2f6:	81a3      	strheq	r3, [r4, #12]
 800a2f8:	bf18      	it	ne
 800a2fa:	81a3      	strhne	r3, [r4, #12]
 800a2fc:	bd10      	pop	{r4, pc}

0800a2fe <__sclose>:
 800a2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a302:	f000 b813 	b.w	800a32c <_close_r>
	...

0800a308 <_write_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4d07      	ldr	r5, [pc, #28]	; (800a328 <_write_r+0x20>)
 800a30c:	4604      	mov	r4, r0
 800a30e:	4608      	mov	r0, r1
 800a310:	4611      	mov	r1, r2
 800a312:	2200      	movs	r2, #0
 800a314:	602a      	str	r2, [r5, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	f7f7 fe95 	bl	8002046 <_write>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_write_r+0x1e>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b103      	cbz	r3, 800a326 <_write_r+0x1e>
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	20000400 	.word	0x20000400

0800a32c <_close_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d06      	ldr	r5, [pc, #24]	; (800a348 <_close_r+0x1c>)
 800a330:	2300      	movs	r3, #0
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	f7f7 fea1 	bl	800207e <_close>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_close_r+0x1a>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	b103      	cbz	r3, 800a346 <_close_r+0x1a>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	20000400 	.word	0x20000400

0800a34c <_fstat_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d07      	ldr	r5, [pc, #28]	; (800a36c <_fstat_r+0x20>)
 800a350:	2300      	movs	r3, #0
 800a352:	4604      	mov	r4, r0
 800a354:	4608      	mov	r0, r1
 800a356:	4611      	mov	r1, r2
 800a358:	602b      	str	r3, [r5, #0]
 800a35a:	f7f7 fe9c 	bl	8002096 <_fstat>
 800a35e:	1c43      	adds	r3, r0, #1
 800a360:	d102      	bne.n	800a368 <_fstat_r+0x1c>
 800a362:	682b      	ldr	r3, [r5, #0]
 800a364:	b103      	cbz	r3, 800a368 <_fstat_r+0x1c>
 800a366:	6023      	str	r3, [r4, #0]
 800a368:	bd38      	pop	{r3, r4, r5, pc}
 800a36a:	bf00      	nop
 800a36c:	20000400 	.word	0x20000400

0800a370 <_isatty_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4d06      	ldr	r5, [pc, #24]	; (800a38c <_isatty_r+0x1c>)
 800a374:	2300      	movs	r3, #0
 800a376:	4604      	mov	r4, r0
 800a378:	4608      	mov	r0, r1
 800a37a:	602b      	str	r3, [r5, #0]
 800a37c:	f7f7 fe9b 	bl	80020b6 <_isatty>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_isatty_r+0x1a>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b103      	cbz	r3, 800a38a <_isatty_r+0x1a>
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20000400 	.word	0x20000400

0800a390 <_lseek_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d07      	ldr	r5, [pc, #28]	; (800a3b0 <_lseek_r+0x20>)
 800a394:	4604      	mov	r4, r0
 800a396:	4608      	mov	r0, r1
 800a398:	4611      	mov	r1, r2
 800a39a:	2200      	movs	r2, #0
 800a39c:	602a      	str	r2, [r5, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f7f7 fe94 	bl	80020cc <_lseek>
 800a3a4:	1c43      	adds	r3, r0, #1
 800a3a6:	d102      	bne.n	800a3ae <_lseek_r+0x1e>
 800a3a8:	682b      	ldr	r3, [r5, #0]
 800a3aa:	b103      	cbz	r3, 800a3ae <_lseek_r+0x1e>
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	bd38      	pop	{r3, r4, r5, pc}
 800a3b0:	20000400 	.word	0x20000400

0800a3b4 <_read_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4d07      	ldr	r5, [pc, #28]	; (800a3d4 <_read_r+0x20>)
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	4608      	mov	r0, r1
 800a3bc:	4611      	mov	r1, r2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	602a      	str	r2, [r5, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f7f7 fe22 	bl	800200c <_read>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_read_r+0x1e>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_read_r+0x1e>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	20000400 	.word	0x20000400

0800a3d8 <_init>:
 800a3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3da:	bf00      	nop
 800a3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3de:	bc08      	pop	{r3}
 800a3e0:	469e      	mov	lr, r3
 800a3e2:	4770      	bx	lr

0800a3e4 <_fini>:
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e6:	bf00      	nop
 800a3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ea:	bc08      	pop	{r3}
 800a3ec:	469e      	mov	lr, r3
 800a3ee:	4770      	bx	lr
